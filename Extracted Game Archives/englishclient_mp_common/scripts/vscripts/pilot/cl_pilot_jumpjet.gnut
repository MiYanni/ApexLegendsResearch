global function ClPilotJumpjet_Init

global function OnHumanJumpJetDBL
global function OnHumanJumpJet
global function OnHumanMeleeTrails
global function SetupPlayerJumpJetAnimEvents
global function GetJumpJetFXData

global function CodeCallback_PlayerDecoyStateChange //

const STEALTH_TEAM_JUMPJET_ON = $"P_jump_jet_stealth"
const STEALTH_TEAM_JUMPJET_DBL = $"P_jump_jet_stealth_DBL"
const STEALTH_TEAM_JUMPJET_WR = $"P_jump_jet_stealth"

const STEALTH_PENEMY_JUMPJET_ON = $"P_jump_jet_stealth"
const STEALTH_PENEMY_JUMPJET_DBL = $"P_jump_jet_stealth_DBL"
const STEALTH_PENEMY_JUMPJET_WR = $"P_jump_jet_stealth"

const TEAM_JUMPJET_ON = $"P_team_jump_jet_ON"
const TEAM_JUMPJET_RT = $"P_team_jump_jet_RT"
const TEAM_JUMPJET_DBL = $"P_team_jump_jet_DBL"
const TEAM_JUMPJET_WR = $"P_team_jump_jet_WR"
const TEAM_JUMPJET_ON_ENGINEER = $"P_team_jump_jet_center"
const TEAM_JUMPJET_DBL_ENGINEER = $"P_team_jump_jet_center_DBL"
const TEAM_JUMPJET_ON_SCOUT = $"P_team_jump_jet_ON_trails"
const TEAM_JUMPJET_WR_SCOUT = $"P_team_jump_jet_WR_trails"

const PENEMY_JUMPJET_ON = $"P_enemy_jump_jet_ON"
const PENEMY_JUMPJET_RT = $"P_enemy_jump_jet_RT"
const PENEMY_JUMPJET_DBL = $"P_enemy_jump_jet_DBL"
const PENEMY_JUMPJET_WR = $"P_enemy_jump_jet_WR"
const PENEMY_JUMPJET_ON_ENGINEER = $"P_enemy_jump_jet_center"
const PENEMY_JUMPJET_DBL_ENGINEER = $"P_enemy_jump_jet_center_DBL"
const PENEMY_JUMPJET_ON_SCOUT = $"P_enemy_jump_jet_ON_trails"
const PENEMY_JUMPJET_WR_SCOUT = $"P_enemy_jump_jet_WR_trails"

global enum eJumpJetType
{
	ON,
	DBL,
	WR,
	RT,
	JUMPJETTYPE_COUNT
}

global struct JumpJetFXNamesStruct
{
	asset[ eJumpJetType.JUMPJETTYPE_COUNT ] stealthJumpJets
	asset[ eJumpJetType.JUMPJETTYPE_COUNT ] regularJumpJets
}

global struct JumpJetDataStruct
{
	array<string> attachments = [ "vent_left", "vent_right" ]
	string rt_light_attachment = "vent_right"
	JumpJetFXNamesStruct friendlyJumpJets
	JumpJetFXNamesStruct enemyJumpJets
}

struct {
	JumpJetDataStruct jumpJetFXData
	table<entity, array<int> > playerDecoyJumpJetFX
} file

void function ClPilotJumpjet_Init()
{
	//
	PrecacheParticleSystem( PENEMY_JUMPJET_ON )
	PrecacheParticleSystem( TEAM_JUMPJET_ON )
	PrecacheParticleSystem( PENEMY_JUMPJET_RT )
	PrecacheParticleSystem( TEAM_JUMPJET_RT )
	PrecacheParticleSystem( PENEMY_JUMPJET_DBL )
	PrecacheParticleSystem( TEAM_JUMPJET_DBL )
	PrecacheParticleSystem( PENEMY_JUMPJET_WR )
	PrecacheParticleSystem( TEAM_JUMPJET_WR )

	//
	PrecacheParticleSystem( TEAM_JUMPJET_ON_ENGINEER )
	PrecacheParticleSystem( TEAM_JUMPJET_DBL_ENGINEER )
	PrecacheParticleSystem( PENEMY_JUMPJET_ON_ENGINEER )
	PrecacheParticleSystem( PENEMY_JUMPJET_DBL_ENGINEER )

	PrecacheParticleSystem( TEAM_JUMPJET_ON_SCOUT )
	PrecacheParticleSystem( TEAM_JUMPJET_WR_SCOUT )
	PrecacheParticleSystem( PENEMY_JUMPJET_ON_SCOUT )
	PrecacheParticleSystem( PENEMY_JUMPJET_WR_SCOUT )

	//
	PrecacheParticleSystem( STEALTH_PENEMY_JUMPJET_ON )
	PrecacheParticleSystem( STEALTH_TEAM_JUMPJET_ON )
	PrecacheParticleSystem( STEALTH_PENEMY_JUMPJET_DBL )
	PrecacheParticleSystem( STEALTH_TEAM_JUMPJET_DBL )
	PrecacheParticleSystem( STEALTH_PENEMY_JUMPJET_WR )
	PrecacheParticleSystem( STEALTH_TEAM_JUMPJET_WR )

	CreateWallRunJumpJetData()

	foreach ( key, value in eJumpJetType ) //
		RegisterSignal( "eJumpJetType." +  key )

	AddOnDeathOrDestroyCallback( "player_decoy", CleanUpDecoyFXHandles )
}

void function CreateWallRunJumpJetData()
{
	//
	file.jumpJetFXData.friendlyJumpJets.stealthJumpJets[ eJumpJetType.ON ] = STEALTH_TEAM_JUMPJET_ON
	file.jumpJetFXData.friendlyJumpJets.stealthJumpJets[ eJumpJetType.DBL ] = STEALTH_TEAM_JUMPJET_DBL
	file.jumpJetFXData.friendlyJumpJets.stealthJumpJets[ eJumpJetType.WR ] = STEALTH_TEAM_JUMPJET_WR
	file.jumpJetFXData.friendlyJumpJets.regularJumpJets[ eJumpJetType.ON ]  = TEAM_JUMPJET_ON
	file.jumpJetFXData.friendlyJumpJets.regularJumpJets[ eJumpJetType.DBL ] = TEAM_JUMPJET_DBL
	file.jumpJetFXData.friendlyJumpJets.regularJumpJets[ eJumpJetType.WR ]  = TEAM_JUMPJET_WR
	file.jumpJetFXData.friendlyJumpJets.regularJumpJets[ eJumpJetType.RT ]  = TEAM_JUMPJET_RT

	file.jumpJetFXData.enemyJumpJets.stealthJumpJets[ eJumpJetType.ON ]  = STEALTH_PENEMY_JUMPJET_ON
	file.jumpJetFXData.enemyJumpJets.stealthJumpJets[ eJumpJetType.DBL ] = STEALTH_PENEMY_JUMPJET_DBL
	file.jumpJetFXData.enemyJumpJets.stealthJumpJets[ eJumpJetType.WR ]  = STEALTH_PENEMY_JUMPJET_WR
	file.jumpJetFXData.enemyJumpJets.regularJumpJets[ eJumpJetType.ON ]  = PENEMY_JUMPJET_ON_SCOUT
	file.jumpJetFXData.enemyJumpJets.regularJumpJets[ eJumpJetType.DBL ] = PENEMY_JUMPJET_DBL
	file.jumpJetFXData.enemyJumpJets.regularJumpJets[ eJumpJetType.WR ]  = PENEMY_JUMPJET_WR_SCOUT
	file.jumpJetFXData.enemyJumpJets.regularJumpJets[ eJumpJetType.RT ]  = PENEMY_JUMPJET_RT
}

int function GetJumpjetFXForPlayer( entity playerOrDecoy, int jumpjetType )
{
	if ( GetLocalViewPlayer() == null )
		return 0

	JumpJetDataStruct dataStruct = file.jumpJetFXData

	JumpJetFXNamesStruct namesStruct = dataStruct.enemyJumpJets
	if ( IsFriendlyTeam( playerOrDecoy.GetTeam(), GetLocalViewPlayer().GetTeam() ) )
		namesStruct = dataStruct.friendlyJumpJets

	asset[ 4 ] names = namesStruct.regularJumpJets
	if ( ShouldDoStealthJumpJetFX( playerOrDecoy ) ) //
		names = namesStruct.stealthJumpJets

	asset fxString = names[ jumpjetType ]

	int fxID = GetParticleSystemIndex( fxString ) //

	return fxID
}

bool function ShouldDoStealthJumpJetFX( entity playerOrDecoy )
{
	if ( playerOrDecoy.IsPlayerDecoy() )
		return playerOrDecoy.decoy.decoyHasStealthPassive

	return PlayerHasStealthMovement( playerOrDecoy )
}

array<int> function PlayJumpjetFX( entity playerOrDecoy, int jumpjetType, array<string> attachments )
{
	if ( !ShouldDoJumpjetEffects( playerOrDecoy ) )
		return []

	int fxID = GetJumpjetFXForPlayer( playerOrDecoy, jumpjetType )

	if ( fxID == 0 )
		return []

	array<int> particleEffects
	foreach ( attachment in attachments )
	{
		int jumpJet = StartParticleEffectOnEntity( playerOrDecoy, fxID, FX_PATTACH_POINT_FOLLOW, playerOrDecoy.LookupAttachment( attachment ) )
		//
		//
		particleEffects.append( jumpJet )
	}

	return particleEffects
}

int function PlayJumpjetLight( entity playerOrDecoy )
{
	if ( !ShouldDoJumpjetEffects( playerOrDecoy ) )
		return 0

	int fxID = GetJumpjetFXForPlayer( playerOrDecoy, eJumpJetType.RT )

	if ( fxID == 0 )
		return 0

	return StartParticleEffectOnEntity( playerOrDecoy, fxID, FX_PATTACH_POINT_FOLLOW, playerOrDecoy.LookupAttachment( file.jumpJetFXData.rt_light_attachment ) )
}

void function SetupPlayerJumpJetAnimEvents( entity playerOrDecoy )
{
	AddAnimEvent( playerOrDecoy, "HMN_Jump_Jet", OnHumanJumpJet )
	AddAnimEvent( playerOrDecoy, "HMN_Jump_Jet_Left", OnHumanJumpJetLeft )
	AddAnimEvent( playerOrDecoy, "HMN_Jump_Jet_Right", OnHumanJumpJetRight )
	AddAnimEvent( playerOrDecoy, "HMN_Jump_Jet_DBL", OnHumanJumpJetDBL )
	AddAnimEvent( playerOrDecoy, "HMN_Jump_Jet_WallRun_Left", OnHumanJumpJetWallRun_Left )
	AddAnimEvent( playerOrDecoy, "HMN_Jump_Jet_WallRun_Right", OnHumanJumpJetWallRun_Right )
	AddAnimEvent( playerOrDecoy, "HMN_Melee", OnHumanMeleeTrails )
}

void function OnHumanJumpJet( entity playerOrDecoy )
{
	array<int> particleEffects = PlayJumpjetFX( playerOrDecoy, eJumpJetType.ON, file.jumpJetFXData.attachments )
	HandleFXCleanUp( playerOrDecoy, particleEffects, "eJumpJetType.ON" )
}

void function OnHumanJumpJetOneSide( entity playerOrDecoy, string attachment )
{
	array<int> particleEffects = PlayJumpjetFX( playerOrDecoy, eJumpJetType.ON, [ attachment ] )

	if ( particleEffects.len() == 0 )
		return

	int lightFX = PlayJumpjetLight( playerOrDecoy )
	if ( lightFX != 0 )
	{
		//
		particleEffects.append( lightFX )
	}

	HandleFXCleanUp( playerOrDecoy, particleEffects, "eJumpJetType.ON" )
}

void function OnHumanJumpJetLeft( entity playerOrDecoy )
{
	OnHumanJumpJetOneSide( playerOrDecoy, "vent_left" )
}

void function OnHumanJumpJetRight( entity playerOrDecoy )
{
	OnHumanJumpJetOneSide( playerOrDecoy, "vent_right" )
}

void function OnHumanJumpJetDBL( entity playerOrDecoy )
{
	array<int> particleEffects = PlayJumpjetFX( playerOrDecoy, eJumpJetType.DBL, file.jumpJetFXData.attachments )

	if ( particleEffects.len() > 0 )
		HandleFXCleanUp( playerOrDecoy, particleEffects, "eJumpJetType.DBL" )
}

void function OnHumanJumpJetWallRun_Left( entity playerOrDecoy )
{
	array<int> particleEffects = PlayJumpjetFX( playerOrDecoy, eJumpJetType.WR, [ "vent_left_out" ] )

	if ( particleEffects.len() > 0 )
		HandleFXCleanUp( playerOrDecoy, particleEffects, "eJumpJetType.WR" )
}

void function OnHumanJumpJetWallRun_Right( entity playerOrDecoy )
{
	array<int> particleEffects = PlayJumpjetFX( playerOrDecoy, eJumpJetType.WR, [ "vent_right_out" ] )

	if ( particleEffects.len() > 0 )
		HandleFXCleanUp( playerOrDecoy, particleEffects, "eJumpJetType.WR" )
}

void function CleanUpJumpJetParticleEffect( entity player, array<int> particleEffects, string stopSignalName )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )
	player.Signal( stopSignalName ) //
	player.EndSignal( stopSignalName )

	OnThreadEnd
	(
		function() : ( player, particleEffects /**/ )
		{
			bool playEndCap = !IsValid( player ) || !player.IsPhaseShifted()
			foreach ( particle in particleEffects )
			{
				//
				//

				if ( EffectDoesExist( particle ) )
					EffectStop( particle, false, playEndCap )
			}
		}
	)

	if ( player.IsWallRunning() ) //
	{
		for ( ;; ) //
		{
			WaitFrame()
			if ( !player.IsWallRunning() || player.IsPhaseShifted() )
				break
		}
	}
	else
	{
		for ( ;; ) //
		{
			WaitFrame()
			if ( player.IsOnGround() || (player.GetParent() != null) || player.IsPhaseShifted() )
				break
		}
	}
}

void function OnHumanMeleeTrails( entity player ) //
{
	int fxID
	if ( IsFriendlyTeam( player.GetTeam(), GetLocalViewPlayer().GetTeam() ) )
		fxID = GetParticleSystemIndex( $"P_team_jump_jet_ON_trails" )
	else
		fxID = GetParticleSystemIndex( $"P_enemy_jump_jet_ON_trails" )

	array<int> particleEffects = []
	foreach ( attachment in file.jumpJetFXData.attachments )
	{
		int jumpJet = StartParticleEffectOnEntity( player, fxID, FX_PATTACH_POINT_FOLLOW, player.LookupAttachment( attachment ) )
		particleEffects.append( jumpJet )
	}

	thread CleanUpMeleeTrails( player, particleEffects )
}

void function CleanUpMeleeTrails( entity player, array<int> particleEffects )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )

	OnThreadEnd
	(
		function() : ( particleEffects )
		{
			foreach ( particle in particleEffects )
			{
				if ( EffectDoesExist( particle ) )
					EffectStop( particle, false, true )
			}
		}
	)

	while ( player.Lunge_IsActive() )
		WaitFrame()
}

bool function ShouldDoJumpjetEffects( entity playerOrDecoy )
{
	return false
	/*














*/
}

void function CleanUpDecoyFXHandles( entity decoy )
{
	foreach ( particleIndex in decoy.decoy.particleIndexes )
	{
		if ( EffectDoesExist( particleIndex ) )
			EffectStop( particleIndex, false, true )
	}

	decoy.decoy.particleIndexes.clear()
}

void function CodeCallback_PlayerDecoyStateChange( entity decoy, int previousState, int currentState )
{
	//

	if ( previousState == PLAYER_DECOY_STATE_NONE )
	{
		//

		//
		SetupPlayerJumpJetAnimEvents( decoy )
		entity bossPlayer = decoy.GetBossPlayer()
		if ( IsValid( bossPlayer ) ) //
			decoy.decoy.decoyHasStealthPassive = PlayerHasStealthMovement( bossPlayer )
	}
	else if ( currentState != PLAYER_DECOY_STATE_AIRBORNE )
	{
		CleanUpDecoyFXHandles( decoy )
	}
}

void function HandleFXCleanUp( entity playerOrDecoy, array<int> particleEffects, string stopSignalName )
{
	if ( particleEffects.len() == 0 )
		return

	if ( playerOrDecoy.IsPlayer() ) //
		thread CleanUpJumpJetParticleEffect( playerOrDecoy, particleEffects, stopSignalName )
	else
		playerOrDecoy.decoy.particleIndexes.extend( particleEffects )
}

JumpJetDataStruct function GetJumpJetFXData()
{
	return file.jumpJetFXData
}

/*











*/