global function ShLootBin_Init

#if(false)























#endif

global function GetLootBinForHitEnt

global function LootBin_IsOpen

global const string LOOT_BIN_MARKER_SCRIPTNAME = "survival_lootbin"
global const string LOOT_BIN_SCRIPTNAME = "survival_lootbin_spawned"

global const asset LOOT_BIN_MODEL = $"mdl/props/loot_bin/loot_bin_01_animated.rmdl"
global const bool LOOT_BIN_CLOSABLE = false //

global const string SOUND_LOOT_BIN_OPEN = "Door_Lootbin_Open"
global const string SOUND_LOOT_BIN_IDLE = "Door_Lootbin_Presence_Loop"
const float NUM_LOOT_BIN_SOUND_INITS_PER_SEC 	= 50.0		//
const float LOOT_BIN_SOUND_INIT_MIN_WAIT		= 5.0

const bool SURVIVAL_DEBUG_LOOT_BINS = false

struct
{
	bool                          lootBinsInfinite = false
	table<entity, array<entity> > lootBinsSpawnedLootMap
	table<entity, array<string> > lootBinsLootInside
	#if(false)

#endif
	array<entity>                 lootBinList
	int							  numLootBins
} file

void function ShLootBin_Init()
{
	PrecacheModel( LOOT_BIN_MODEL )

	#if(false)







#endif
	#if(CLIENT)
		AddCreateCallback( "prop_dynamic", OnPropDynamicCreated )
	#endif
}


#if(false)


//








#endif

#if(false)










#endif

#if(false)






//
//




#endif

#if(false)
















#endif

#if(false)


















#endif

#if(false)
//


//



//





#endif

#if(false)






//
















#endif

#if(false)













//











//








#endif

#if(false)
//












//









#endif

#if(false)




#endif

#if(false)










#endif

#if(false)










#endif

#if(false)















#endif

#if(false)







#endif

#if(false)



















#endif

#if(false)








#endif

#if(false)





















#endif

#if(false)






#endif

#if(false)




#endif

#if(false)




#endif

#if(false)











#endif

#if(false)











#endif

#if(false)


























#endif

#if(false)


























#endif

#if(false)










#endif

#if(false)








#endif

#if(false)








#endif


#if(false)







#endif

#if(false)












//

















#endif

#if(false)






































#endif

#if(false)


















#endif

#if(false)





















//










#endif

#if(false)




//
//
//




#endif

#if(false)





















#endif

#if(false)










#endif

#if(CLIENT)
bool function LootBin_IsOpen( entity lootbin )
{
	if ( GradeFlagsHas( lootbin, eGradeFlags.IS_OPEN ) )
		return true
	return false
}
#endif

#if(false)






#endif

#if(CLIENT)
bool function LootBin_IsBusy( entity lootbin )
{
	if ( GradeFlagsHas( lootbin, eGradeFlags.IS_BUSY ) )
		return true
	return false
}
#endif

#if(CLIENT)
void function OnPropDynamicCreated( entity lootbin )
{
	if ( lootbin.GetScriptName() != LOOT_BIN_SCRIPTNAME )
		return

	AddEntityCallback_GetUseEntOverrideText( lootbin, GetLootBinUseTextOverride )

	SetCallback_CanUseEntityCallback( lootbin, LootBin_CanUse )
}
#endif

#if(CLIENT)
entity function GetLootBinForHitEnt( entity hitEnt )
{
	if ( hitEnt.GetScriptName() == LOOT_BIN_SCRIPTNAME )
		return hitEnt

	entity parentEnt = hitEnt.GetParent()
	if ( IsValid( parentEnt ) && (parentEnt.GetScriptName() == LOOT_BIN_SCRIPTNAME) )
		return parentEnt

	return null
}
#endif

#if(CLIENT)
bool function LootBin_CanUse( entity player, entity lootBin )
{
	if ( player.GetWeaponDisableFlags() == WEAPON_DISABLE_FLAGS_ALL )
		return false

	if ( Bleedout_IsBleedingOut( player ) )
		return false

	if ( LootBin_IsBusy( lootBin ) )
		return false

	bool anythingToOpen = false
	if ( !LootBin_IsOpen( lootBin ) )
		anythingToOpen = true
	#if(false)


#endif

	return anythingToOpen
}
#endif

#if(CLIENT)
string function GetLootBinUseTextOverride( entity lootbin )
{
	if ( !LootBin_IsOpen( lootbin ) )
		return "#SURVIVAL_LOOTBIN_OPEN"
#if(false)


#endif
	else if ( LOOT_BIN_CLOSABLE )
		return "#SURVIVAL_LOOTBIN_CLOSE"
	else
		return ""

	unreachable
}
#endif


