global function SURVIVAL_Loot_All_InitShared

global function SURVIVAL_Loot_GetLootDataTable
global function SURVIVAL_Loot_GetLootDataByIndex
global function SURVIVAL_Loot_IsLootIndexValid
global function SURVIVAL_Loot_GetLootDataByRef
global function SURVIVAL_Loot_IsRefValid
global function SURVIVAL_Loot_IsRefDisabled
global function SURVIVAL_Loot_GetByType
global function SURVIVAL_Loot_GetLootTypeFromString

global function SURVIVAL_Loot_IsUniqueAmmoWeapon

#if(CLIENT)
global function GetRarityColor
#endif

#if CLIENT && DEV 
global function DumpModdedKeyColors
global function DiffKeyColors
#endif

global function GetFXRarityColorForTier //
global function GetFXRarityColorForUnlockable //

#if(false)

#elseif(false)

#endif

global enum eLootTier
{
	NONE
	COMMON
	RARE
	EPIC
	LEGENDARY
	HEIRLOOM

	_count
}

global struct LootData
{
	string        ref
	int           tier
	int           index = -1
	int           inventorySlotCount
	int           pingCommsAction
	asset         model
	int           skinOverride
	asset         hudIcon
	asset         emptyImage
	string        attachSound
	string        pickupSound_1p
	string        pickupSound_3p
	string        carrySound
	string        pickupString
	string        desc
	string        specialCaseInvalidReason
	int           countPerDrop
	int           lootType
	string        netInt
	array<string> supportedAttachments
	array<string> lootTags
	string        ammoType
	float         minInWorld
	bool          isActive = false
	int           passive = -1
	string        attachmentStyle = ""
	int           scrapValue
	bool          droppodRotate = false
	bool          isDynamic = false
	bool          conditional = false

	string        baseWeapon
	array<string> baseMods

	asset         fakeAmmoIcon
	array<string> fakeMods
}

global enum eLootType
{
	MAINWEAPON
	AMMO
	HEALTH
	ARMOR
	INCAPSHIELD
	JUMPKIT
	ORDNANCE
	ATTACHMENT
	CUSTOMPICKUP
	BACKPACK
	HELMET
	BLANK
	#if(false)

#endif
	RESOURCE
	#if(false)

#endif

	//
	#if(false)

#endif

	_count
}

#if(false)

#endif

struct
{
	table< string, LootData > lootData
	array<string>             lootIndexToString
	bool                      initialized
	array<string>             disabledRefs
	array<string>             uniqueAmmoWeaponRefs
} file

array<string> attachmentSortOrder = ["barrel", "mag", "sight", "grip", "hopup"]

void function SURVIVAL_Loot_All_InitShared()
{
	#if(!UI)

		//

	#endif

	var dataTable        = GetDataTable( $"datatable/survival_loot.rpak" )
	array<var> tableList = [dataTable]
	#if(false)





























#endif
	file.lootIndexToString.clear()
	file.lootData.clear()

	var attachmentTable = GetDataTable( $"datatable/survival_weapon_mods.rpak" )

	file.disabledRefs.clear()
	string disabledRefs = GetCurrentPlaylistVar( "survival_disabled_loot", " " )
	file.disabledRefs = split( disabledRefs, " " )

	foreach ( var dt in tableList )
	{
		int numRows = GetDatatableRowCount( dt )
		for ( int i = 0; i < numRows; i++ )
		{
			LootData data
			data.ref = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "ref" ) )

			string pingCommsActionName = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "pingCommsAction" ) )

			#if(CLIENT)
				data.pingCommsAction = GetCommsActionForName( pingCommsActionName )
			#endif

			string lootType = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "type" ) )

			data.baseWeapon = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "baseWeapon" ) )

			if ( data.baseWeapon == "" )
			{
				data.baseWeapon = data.ref
			}

			data.fakeAmmoIcon = GetDataTableAsset( dt, i, GetDataTableColumnByName( dt, "fakeAmmoIcon" ) )

			data.baseMods = split( GetDataTableString( dt, i, GetDataTableColumnByName( dt, "baseMods" ) ), " " )

			data.model = GetDataTableAsset( dt, i, GetDataTableColumnByName( dt, "pickupModel" ) )
			data.skinOverride = GetDataTableInt( dt, i, GetDataTableColumnByName( dt, "skinOverride" ) )
			data.hudIcon = GetDataTableAsset( dt, i, GetDataTableColumnByName( dt, "icon" ) )
			data.attachSound = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "attachSound" ) )
			data.pickupSound_3p = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "pickupSound_3p" ) )
			data.pickupSound_1p = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "pickupSound_1p" ) )
			data.carrySound = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "carrySound" ) )
			data.scrapValue = GetDataTableInt( dt, i, GetDataTableColumnByName( dt, "scrapValue" ) )
			data.droppodRotate = GetDataTableBool( dt, i, GetDataTableColumnByName( dt, "droppodRotate" ) )
			data.isDynamic = GetDataTableBool( dt, i, GetDataTableColumnByName( dt, "isDynamic" ) )
			data.conditional = GetDataTableBool( dt, i, GetDataTableColumnByName( dt, "conditional" ) )

			data.pickupString = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "pickupString" ) )
			data.desc = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "desc" ) )

			data.countPerDrop = GetDataTableInt( dt, i, GetDataTableColumnByName( dt, "countPerDrop" ) )
			data.tier = GetDataTableInt( dt, i, GetDataTableColumnByName( dt, "tier" ) )
			#if(false)

#endif

			string supportedAttachmentsString  = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "supportedAttachments" ) )
			array<string> supportedAttachments = split( supportedAttachmentsString, " " )
			supportedAttachments.sort(
				int function( string attachmentA, string attachmentB ) : ()
				{
					int aIndex = attachmentSortOrder.find( attachmentA )
					int bIndex = attachmentSortOrder.find( attachmentB )
					if ( aIndex > bIndex )
						return 1
					else if ( aIndex < bIndex )
						return -1

					return 0
				}
			)
			data.supportedAttachments = supportedAttachments

			data.lootTags = split( GetDataTableString( dt, i, GetDataTableColumnByName( dt, "lootTags" ) ), " " )

			data.lootType = SURVIVAL_Loot_GetLootTypeFromString( lootType )
			data.netInt = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "netInt" ) )
			data.inventorySlotCount = GetDataTableInt( dt, i, GetDataTableColumnByName( dt, "inventorySlotCount" ) )

#if(CLIENT)
			data.minInWorld = GetDataTableFloat( dt, i, GetDataTableColumnByName( dt, "minInWorld" ) )
			if ( IsTestMap() )
				data.minInWorld = max( -1, data.minInWorld )
			//
			#if(false)


#endif

			#endif

			string passiveRef = GetDataTableString( dt, i, GetDataTableColumnByName( dt, "passive" ) )
			if ( passiveRef == "" )
			{
				data.passive = ePassives.INVALID
			}
			else
			{
				Assert( passiveRef in ePassives )
				data.passive = ePassives[passiveRef]
				#if CLIENT || UI 
					Assert( data.passive in PASSIVE_NAME_MAP )
					Assert( data.passive in PASSIVE_DESCRIPTION_SHORT_MAP )
				#endif
			}

			switch ( data.lootType )
			{
				case eLootType.MAINWEAPON:
					RegisterWeaponForUse( data.baseWeapon )
					data.model = GetWeaponInfoFileKeyFieldAsset_Global( data.baseWeapon, "playermodel" )
					if ( GetWeaponInfoFileKeyField_Global( data.baseWeapon, "ammo_pool_type" ) != null )
						data.ammoType = GetWeaponInfoFileKeyField_GlobalString( data.baseWeapon, "ammo_pool_type" )
					else
						data.ammoType = ""

					if ( data.fakeAmmoIcon != "" )
					{
						file.uniqueAmmoWeaponRefs.append( data.ref )
					}

					ItemFlavor ornull weaponFlavor = GetWeaponItemFlavorByClass( data.baseWeapon )
					if ( weaponFlavor != null )
					{
						expect ItemFlavor( weaponFlavor )

						int availableState = ItemFlavor_GetPlaylistOpinion( weaponFlavor )
						bool shouldBeEnabled
						if ( availableState == eItemFlavorPlaylistOpinion.FORCE_UNLOCK_FOR_SPECIAL_EVENT )
							shouldBeEnabled = true
						else if ( availableState == eItemFlavorPlaylistOpinion.HIDDEN )
							shouldBeEnabled = false
						else if ( availableState == eItemFlavorPlaylistOpinion.DISABLED )
							shouldBeEnabled = false
						else
							shouldBeEnabled = ItemFlavor_IsActiveForEdition( weaponFlavor, GetConVarInt( "mtx_svEdition" ) )

						if ( !shouldBeEnabled )
							file.disabledRefs.append( data.ref )
					}

				case eLootType.ORDNANCE:
					RegisterWeaponForUse( data.baseWeapon )
					data.pickupString = GetWeaponInfoFileKeyField_GlobalString( data.baseWeapon, "printName" )
					data.desc = GetWeaponInfoFileKeyField_GlobalString( data.baseWeapon, "description" )
					data.hudIcon = GetWeaponInfoFileKeyFieldAsset_Global( data.baseWeapon, "hud_icon" )
					break

				case eLootType.ATTACHMENT:
					int row = GetDataTableRowMatchingStringValue( attachmentTable, PILOT_WEAPON_MOD_COMMON_COLUMN, data.ref )
					data.pickupString = GetDataTableString( attachmentTable, row, PILOT_WEAPON_MOD_COMMON_NAME_COLUMN )
					data.desc = GetDataTableString( attachmentTable, row, PILOT_WEAPON_MOD_COMMON_DESCRIPTION_COLUMN )

					data.ammoType = GetDataTableString( attachmentTable, row, GetDataTableColumnByName( attachmentTable, "ammoType" ) )
					data.hudIcon = GetDataTableAsset( dt, i, GetDataTableColumnByName( dt, "icon" ) )
					data.specialCaseInvalidReason = ""//
					if ( data.hudIcon == $"" )
						data.hudIcon = GetDataTableAsset( attachmentTable, row, PILOT_WEAPON_MOD_COMMON_IMAGE_COLUMN )

					string attachmentPoint = GetDataTableString( attachmentTable, row, GetDataTableColumnByName( attachmentTable, "attachmentPoint" ) )
					data.attachmentStyle = GetDataTableString( attachmentTable, row, GetDataTableColumnByName( attachmentTable, "type" ) )
					data.emptyImage = GetDataTableAsset( attachmentTable, row, GetDataTableColumnByName( attachmentTable, "emptyImage" ) )

#if(CLIENT)
					RegisterAttachmentPoint( attachmentPoint )
#endif

					break

				case eLootType.AMMO:
					//
					break
			}

			{
				data.index = file.lootIndexToString.len()
				file.lootIndexToString.append( data.ref )
				file.lootData[ data.ref ] <- data

				#if(false)

#endif
			}

			#if(!UI)
				if ( data.model != $"" )
					PrecacheModel( data.model )
			#endif
		}
	}

	#if(false)
//





//










#endif

	file.initialized = true
}


table< string, LootData > function SURVIVAL_Loot_GetLootDataTable()
{
	return file.lootData
}


array<LootData> function SURVIVAL_Loot_GetByType( int lootType )
{
	array<LootData> lootOfType = []
	foreach ( string lootRef, LootData lootData in file.lootData )
	{
		if ( lootData.lootType != lootType )
			continue

		lootOfType.append( lootData )
	}

	return lootOfType
}


int function SURVIVAL_Loot_GetLootTypeFromString( string lootTypeString )
{
	Assert( lootTypeString != "", "Loot Type has null type defined in survival_loot.csv" )

	switch( lootTypeString )
	{
		case "main_weapon":
			return eLootType.MAINWEAPON

		case "ammo":
			return eLootType.AMMO

		case "health":
			return eLootType.HEALTH

		case "armor":
			return eLootType.ARMOR

		case "incapshield":
			return eLootType.INCAPSHIELD

		case "jumpkit":
			return eLootType.JUMPKIT

		case "ordnance":
			return eLootType.ORDNANCE

		case "attachment":
			return eLootType.ATTACHMENT

		case "backpack":
			return eLootType.BACKPACK

		case "custom_pickup":
			return eLootType.CUSTOMPICKUP

		case "helmet":
			return eLootType.HELMET

#if(false)


#endif

		case "blank":
			return eLootType.BLANK

		case "resource":
			return eLootType.RESOURCE

#if(false)


#endif

#if(false)


#endif

		default:
			//
			Warning( "Error Building LootData Struct: Unknown loot type string: " + lootTypeString )
			return eLootType.BLANK
	}

	unreachable
}


LootData function SURVIVAL_Loot_GetLootDataByIndex( int index )
{
	return file.lootData[ file.lootIndexToString[ index ] ]
}


bool function SURVIVAL_Loot_IsLootIndexValid( int index )
{
	return (index in file.lootIndexToString)
}


LootData function SURVIVAL_Loot_GetLootDataByRef( string ref )
{
	return file.lootData[ ref ]
}


bool function SURVIVAL_Loot_IsRefValid( string ref )
{
	return (ref in file.lootData)
}

#if(false)


























#endif

bool function SURVIVAL_Loot_IsRefDisabled( string ref )
{
	return file.disabledRefs.contains( ref )
}

#if(CLIENT)
vector function GetRarityColor( entity ent )
{
	int lootIndex = ent.GetSurvivalInt()
	Assert( lootIndex >= 0 )
	LootData lootData = SURVIVAL_Loot_GetLootDataByIndex( lootIndex )

	return GetKeyColor( COLORID_TEXT_LOOT_TIER0, lootData.tier )
}
#endif

#if(false)
//


















#endif

//
vector function GetFXRarityColorForTier( int tier )
{
	#if(false)





















#endif

	#if(true)
		return GetKeyColor( COLORID_FX_LOOT_TIER0, tier )
	#endif

	unreachable
}

//
vector function GetFXRarityColorForUnlockable( int tier )
{
	#if(false)
























#endif

	#if(true)
		return GetKeyColor( COLORID_FX_LOOT_TIER0, tier + 1 )
	#endif

	unreachable
}

#if CLIENT && DEV 
void function DumpModdedKeyColors( int colorID, float modVal )
{
	for ( int index = 0; index < 6; index++ )
	{
		vector color = ColorPalette_GetColorFromID( colorID + index ) / 255.0
		color = SrgbToLinear( color )
		color *= modVal
		color = LinearToSrgb( color ) * 255.0

		printt( index + ", ", int( color.x ) + " ", int( color.y ) + " ", int( color.z ) )
	}
}
#endif

#if CLIENT && DEV 
void function DiffKeyColors( int baseColorID, int colorID )
{
	var datatable = GetDataTable( $"datatable/colorpalette_table.rpak" )
	for ( int index = 0; index < 6; index++ )
	{
		vector baseColor  = ColorPalette_GetColorFromID( baseColorID + index )
		vector otherColor = ColorPalette_GetColorFromID( colorID + index )

		float deltaX = (baseColor.x - otherColor.x) / 255.0
		float deltaY = (baseColor.y - otherColor.y) / 255.0
		float deltaZ = (baseColor.z - otherColor.z) / 255.0

		vector protanColor = GetDataTableVector( datatable, baseColorID + index, 2 )
		vector deuterColor = GetDataTableVector( datatable, baseColorID + index, 3 )
		vector tritanColor = GetDataTableVector( datatable, baseColorID + index, 4 )

		printt( index + ", ", deltaX + " ", deltaY + " ", deltaZ )
	}
}
#endif

bool function SURVIVAL_Loot_IsUniqueAmmoWeapon( string ref )
{
	return file.uniqueAmmoWeaponRefs.contains( ref )
}