untyped

global function MinimapShared_Init
global function GetMinimapMaterial

const MINIMAP_MINION_SCALE = 0.035
const MINIMAP_MINION_SCALE_COOP = 0.021

//
//
//

#if(false)




#endif

struct
{
	array<asset> minimapRuis
	bool allowRegisterMinimapRuis
} file


global enum eMinimapObject_info_hardpoint
{
	DEFAULT,
	HARDPOINT_A,
	HARDPOINT_B,
	HARDPOINT_C,
	HARDPOINT_D,
	HARDPOINT_E,
	COUNT
}


global enum eMinimapObject_prop_script
{
	DEFAULT,
	AT_DROPZONE_A,
	AT_DROPZONE_B,
	AT_DROPZONE_C,
	SPAWNZONE_MIL,
	SPAWNZONE_IMC,
	FW_CAMP_A,
	FW_CAMP_B,
	FW_CAMP_C,
	FW_BUILDSITE,
	FW_BUILDSITE_TURRET,
	FW_BUILDSITE_SHIELDED,
	LTS_SITE_A,
	LTS_SITE_B,
	AT_BANK,
	FD_HARVESTER,
	FD_LOADOUT_CHEST,
	FD_BATTERY_EXCHANGE,
	FD_MORTAR_POSITION,
	OBJECTIVE_AREA,
	BOOST_STORE,
	ARC_TRAP,
	DIRTY_BOMB,
	DEPLOYABLE_MEDIC,
	PHASE_GATE,
	#if(false)


#endif
	SURVEY_BEACON,
	#if(false)

#endif
	HOVERTANK,
	HOVERTANK_DESTINATION,
	RESPAWN_CHAMBER,
	RESPAWN_DNA,
	#if(false)

#endif
	COUNT
}

global enum eMinimapObject_npc
{
	DEFAULT,
	AI_TDM_AI,
	AI_PVEOBJECTIVE,
	FD_TURRET,
	COUNT
}

global enum eMinimapObject_npc_titan
{
	DEFAULT,
	AT_BOUNTY_BOSS,
	COUNT
}

void function MinimapShared_Init()
{
	level.minimapMaterials <- {}
	level.minimapMaterialsIndexes <- []
	level.allowRegisterMinimapMaterials <- true
	file.allowRegisterMinimapRuis = true

	RegisterMinimapMaterial( "minimap_default", $"vgui/hud/minimap_default" )

	//
	//
	//

	//
	//
	//

	//
	//
	//

	//
	//
	//

	//
	//
	//

	//
	//
	//

	//
	//
	//

	//
	//
	//

	//
	//
	//

	//
	//
	//

	//
	//
	//

	//
	//
	//

	//
	//
	//

	//
	//
	//

	//
	//
	//

	//
	//
		//
		//
		//
		//
		//
		//
		//
		//
		//
		//

		//
		//
		//
		//

		//
		//
		//
		//
		//
		//
		//
		//
		//
		//
		//
		//
		//
		//
		//

		//
	//
	//

	level.allowRegisterMinimapMaterials = false
	file.allowRegisterMinimapRuis = false
}

void function RegisterMinimapRuiAsset( asset ruiAsset )
{
	Assert( file.allowRegisterMinimapRuis )

	file.minimapRuis[file.minimapRuis.len()] = ruiAsset
}

void function RegisterMinimapMaterial( string materialRef, asset material )
{
	Assert( !( materialRef in level.minimapMaterials ) )
	Assert( level.allowRegisterMinimapMaterials )

	level.minimapMaterials[ materialRef ] <- material

	//
	//
	//
	//
	//
}

asset function GetMinimapMaterial( string materialRef )
{
	return expect asset( level.minimapMaterials[ materialRef ] )
}

const MINIMAP_TITAN_SCALE = 0.3
const MINIMAP_PILOT_SCALE = 0.15
//
const MINIMAP_TITAN_SCALE_COOP 		= 0.13
const MINIMAP_PILOT_SCALE_COOP		= 0.13

void function UpdatePlayerMinimapMaterials( entity player )
{
	float titanscale = MINIMAP_TITAN_SCALE
	float pilotscale = MINIMAP_PILOT_SCALE
	//
	//
	//
	//
	//

	player.Minimap_SetClampToEdge( true )
	player.Minimap_SetAlignUpright( false )
	if ( player.IsTitan() )
	{
		//
		//
		//
		//
		//
		//
		//
		//

		player.Minimap_SetObjectScale( titanscale )
		player.Minimap_SetZOrder( MINIMAP_Z_PLAYER )
	}
	else
	{
		//
		//
		//
		//
		//
		//
		//
		//

		player.Minimap_SetObjectScale( pilotscale )
		player.Minimap_SetZOrder( MINIMAP_Z_PLAYER )
	}

	//
	//
	//
}

#if(false)
/*



*/

/*








*/





//





//
//
//
//





//






















#endif //