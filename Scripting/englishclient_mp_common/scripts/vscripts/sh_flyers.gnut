untyped

global function FlyersShared_Init

global function CreateFlyerSequence
//
global function DevFlyerPrintCount
global function GetCirclingFlyers
//

global const FLYER_MODEL = $"mdl/Creatures/flyer/r2_flyer.rmdl"
const FLYER_1000X_MODEL = $"mdl/Creatures/flyer/r2_flyer.rmdl"
const FLYER_500X_MODEL = $"mdl/Creatures/flyer/r2_flyer.rmdl"
const FLYER_MODEL_STATIC = $"mdl/Creatures/flyer/r2_flyer.rmdl"

const PLAYER_CORPSE_FOR_FLYER_MODEL = $"mdl/Humans/pilots/pilot_medium_reaper_m.rmdl"

global int FLYER_WITH_CORPSE_COUNT_TO_SPAWN = 3 //

#if(false)








#elseif(CLIENT)
//
#endif


//
//
//
//

enum flyerState
{
	idle,
	takeOff
	takeOffFast
}

global struct FlyerAnim
{
 	string name
 	string flyer
 	string npc
 	string spectre
 	FlightPath flightPath
 	bool hasAnalysis
}

struct
{
	array<FlyerAnim> flyerPickupAnimations

	int devFlyerCountReal = 0
	int devFlyerCountCheap = 0
	int devFlyerCountStatic = 0

	int flyerCheapMixCount = 0
	array< entity > flyerWithCorpseNodes
} file

void function FlyersShared_Init()
{
	//
	//
	//
	PrecacheModel( FLYER_MODEL_STATIC )
	PrecacheModel( FLYER_MODEL )
	PrecacheModel( FLYER_500X_MODEL )
	PrecacheModel( FLYER_1000X_MODEL )
	PrecacheModel( PLAYER_CORPSE_FOR_FLYER_MODEL  )
	//

	RegisterSignal( "FlyerNewPath" )
	RegisterSignal( "KillFlyer" )

	RegisterSignal( "FlyerStopThink" )
	RegisterSignal( "FlyerDeath" )
	RegisterSignal( "StopPerchedIdle" )
	RegisterSignal( "PickupAborted" )
	RegisterSignal( "EndAddToSequence" )

	//
	#if(CLIENT)
		RegisterSignal( "OnBreak" )
	#endif

	level.circlingFlyers		<- {}

	level.XWING_GROUP_ANIM_VARIATIONS <- []
	level.XWING_GROUP_ANIM_VARIATIONS.append( "a" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "b" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "c" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "d" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "e" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "f" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "g" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "h" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "i" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "j" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "k" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "l" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "m" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "n" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "o" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "p" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "q" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "r" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "s" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "t" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "u" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "v" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "w" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "x" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "y" )
	level.XWING_GROUP_ANIM_VARIATIONS.append( "z" )

	level.XWING_FLYING_ANIMS <- []
	level.XWING_FLYING_ANIMS.append( { anim = "fly2", repeat = 6 } )
	level.XWING_FLYING_ANIMS.append( { anim = "flap", repeat = 3 } )
	level.XWING_FLYING_ANIMS.append( { anim = "glide", repeat = 1 } )

	{
		FlyerAnim flyerAnim
	 	flyerAnim.name = "normalDive"
	 	flyerAnim.flyer = "flyer_PicksUp_Soldier"
	 	flyerAnim.npc = "pt_flyer_PicksUp_Soldier"
	 	flyerAnim.spectre = "pt_flyer_PicksUp_Spectre"
		file.flyerPickupAnimations.append( flyerAnim )
	}
	{
		FlyerAnim flyerAnim
	 	flyerAnim.name = "steepDive"
	 	flyerAnim.flyer = "flyer_PickingUp_Soldier_dive"
	 	flyerAnim.npc = "pt_flyer_pickingup_soldier_dive"
	 	flyerAnim.spectre = "pt_flyer_pickingup_spectre_dive"
	 	flyerAnim.hasAnalysis = true
		file.flyerPickupAnimations.append( flyerAnim )
	}
	{
		FlyerAnim flyerAnim
	 	flyerAnim.name = "intro"
	 	flyerAnim.flyer = "flyer_PicksUp_Soldier_intro"
	 	flyerAnim.npc = "pt_flyer_PicksUp_Soldier_intro"
	 	flyerAnim.spectre = "pt_flyer_PicksUp_Soldier_intro"
		file.flyerPickupAnimations.append( flyerAnim )
	}

	level.FlyerPickupNodes 	<- {}

	level.dropshipAttackAnims <- {}
	level.dropshipAttackAnims[ DROPSHIP_STRAFE ] <- {
														shipAnim = DROPSHIP_FLYER_ATTACK_ANIM
														flyerArray = [ "flyer_dropshipattack_top", "flyer_dropshipattack_right", "flyer_dropshipattack_cockpit" ]
													}
	level.dropshipAttackAnims[ DROPSHIP_VERTICAL ] <- {
														shipAnim = DROPSHIP_FLYER_ATTACK_ANIM_VERTICAL
														flyerArray = [ "flyer_dropshipattack_vertical_top", "flyer_dropshipattack_vertical_right", "flyer_dropshipattack_vertical_cockpit" ]
													}

	#if(false)



//
//




#endif
	#if(CLIENT)
		AddCreateCallback( "script_mover", FlyerCreationCallback )
	#endif
}


/*



*/

/*






































































































































































































*/
#if(CLIENT)
/*
















































































*/
#endif

/*



*/
/*























*/

entity function _CreateProperFlyer( table sequence, entity path, entity ref )
{
	entity flyer
	int flyerType = expect int( sequence.flyerType )

	switch ( flyerType )
	{
		case eFlyerType.Real:
			break
		case eFlyerType.Cheap:
			break
		case eFlyerType.Static:
			break
		case eFlyerType.CheapMix:
			//
			if ( file.flyerCheapMixCount % 2 )
				flyerType = eFlyerType.Static
			else
				flyerType = eFlyerType.Cheap
			file.flyerCheapMixCount++
			break
	}

	flyer = _CreateFlyer( flyerType, path, ref )

	//
	flyer.s.sequence	<- sequence
	flyer.s.flyerType	<- flyerType
	flyer.s.path 		<- path

	level.circlingFlyers[ flyer ] <- flyer

	return flyer
}

entity function _CreateFlyer( int flyerType, entity path, entity ref )
{
	asset modelname	= $""

	switch ( flyerType )
	{
		case eFlyerType.Real:
			modelname =  FLYER_MODEL
			file.devFlyerCountReal++
			break
		case eFlyerType.Cheap:
			modelname =  FLYER_MODEL
			//
			//
			file.devFlyerCountCheap++
			break
		case eFlyerType.Static:
			modelname =  FLYER_MODEL_STATIC
			file.devFlyerCountStatic++
			break
		case eFlyerType.Cheap500x:
			modelname = FLYER_500X_MODEL
			file.devFlyerCountCheap++
			break
		case eFlyerType.Cheap1000x:
			modelname = FLYER_1000X_MODEL
			file.devFlyerCountCheap++
			break
	}

	entity flyer = CreatePropDynamic( modelname, path.GetOrigin(), path.GetAngles() )

	float modelscale = RandomFloatRange( 0.85, 1.1 )
	int r = RandomIntRange( 215, 256 )
	int g = RandomIntRange( 215, 256 )
	int b = RandomIntRange( 215, 256 )


	//
	flyer.kv.fadedist = 14000
	flyer.kv.rendercolor = "" + r + " " + g + " " + b//
	flyer.kv.modelscale = modelscale
	flyer.kv.solid = SOLID_BBOX

	#if(false)

#endif
	//
	//
	//

	//
	thread _Death( flyer )
	thread _FlyerCleanUp( flyer )

	return flyer
}

table function GetCirclingFlyers()
{
	return expect table( level.circlingFlyers )
}

#if(false)


/*



*/













/*



*/

//
//







































//










//




//



//








//


//

//


//

















//
//



/*



*/

//























//

//































/*



*/








//
//











































/*



*/


































//


//

//


//




//

//












































//





//












//




















//


//
//


















//





















//











#endif

void function FlyerCreationCallback( entity ent )
{
	Assert( IsClient() )

	if ( ent.GetModelName() == FLYER_MODEL )
		ent.s.gibDist <- 5120
}


/*



*/
void function _Death( entity flyer )
{
	flyer.EndSignal( "OnDeath" )
	flyer.EndSignal( "OnDestroy" )
	flyer.WaitSignal( "OnBreak" )

	//

	flyer.Signal( "KillFlyer" )
}

void function _FlyerCleanUp( entity flyer )
{
	flyer.EndSignal( "OnDeath" )
	flyer.EndSignal( "OnDestroy" )
	flyer.WaitSignal( "KillFlyer" )

	local sequence = flyer.s.sequence

	//
	delete sequence.pathsInUse[ flyer.s.xanim ]

	//
	delete level.circlingFlyers[ flyer ]

	//
	if ( GetBugReproNum() != 54905 )
	{
		flyer.GetOrigin()
		flyer.GetOrigin()
	}

	if ( flyer.Anim_IsActive() )
		flyer.Anim_Stop()

	if ( flyer.s.path )
		flyer.s.path.Anim_Stop()

	flyer.ClearParent()

	if ( flyer.s.path )
		flyer.s.path.Destroy()

	sequence.numFlyers--
	Assert( sequence.numFlyers >= 0 )

	switch ( sequence.flyerType )
	{
		case eFlyerType.Real:
			file.devFlyerCountReal--
			break
		case eFlyerType.Cheap:
			file.devFlyerCountCheap--
			break
		case eFlyerType.Static:
			file.devFlyerCountStatic--
			break
		case eFlyerType.CheapMix:
			file.flyerCheapMixCount--
			break
	}


	if ( flyer.s.endFunc )
		waitthread flyer.s.endFunc( flyer )

	flyer.Destroy()
}


/*



*/
table function CreateFlyerSequence( vector origin, vector angles )
{
	table sequence
	sequence.num					<- 22
	sequence.groupAnimName			<- null
	sequence.invalidArray			<- []
	sequence.singleAnimName			<- null
	sequence.flyerType				<- null
	sequence.runFunc 				<- null
	sequence.runFuncOptionalVar		<- null
	sequence.runFuncOptionalVar2	<- null
	sequence.endFunc 				<- null
	sequence.origin 				<- origin
	sequence.angles 				<- angles
	sequence.groupAnimMax			<- 22
	sequence.pathsInUse				<- {}
	sequence.ref 					<- CreateRef( origin, angles )
	sequence.numFlyers				<- 0
	sequence.animPaths 				<- eFlyerPathScale.x1
	sequence.startDirection			<- null

	return sequence
}

entity function CreateRef( vector origin, vector angles )
{
	asset modelname = $"mdl/dev/empty_model.rmdl"
	entity ref = CreatePropDynamic( modelname, origin, angles )

	ref.Hide()
	#if(false)

#endif

	return ref
}

void function ShowEnt( entity model )
{
	if ( !IsValid_ThisFrame( model ) )
		return

	model.Show()
}

void function DevFlyerPrintCount()
{
	int total

	while ( 1 )
	{
		total = file.devFlyerCountReal + file.devFlyerCountCheap + file.devFlyerCountStatic
		printl( "Flyers [T]: " + total + ", [R]: " + file.devFlyerCountReal + ", [C]: " + file.devFlyerCountCheap + ", [S]: " + file.devFlyerCountStatic )
		wait 1
	}
}

#if(false)















//












//








//




































































#endif
