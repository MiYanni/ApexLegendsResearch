global function ShStatsInternals_LevelInit

#if CLIENT || UI 
global function ResolveStatEntry
global function GetStat_Bool
global function GetStat_Int
global function GetStat_Float
global function GetStatEntryByIndex
global function IsValidStatEntryRef
global function GetStatEntryByRef
global function StatEntry_GetIndex
global function StatEntry_GetRef
global function StatEntry_GetType
global function DoesStatSatisfyValue

global function RegisterAccumulatedStat_Bool
global function RegisterAccumulatedStat_Int
global function RegisterAccumulatedStat_Float
global function RegisterVariableStat_Int
global function RegisterVariableStat_Bool
global function RegisterExpensiveCalculatedStat_Int
global function RegisterCachedCalculatedStat_Int
global function RegisterStatEnumStruct
#endif

#if(false)

















#endif

#if(false)
//
#endif

const bool STATS_DEBUG_PRINT_SPAM = false


//
//
//
//
//

#if CLIENT || UI 
global enum eStatType
{
	INVALID,
	BOOL,
	INT,
	FLOAT,
}
global enum eStatBehavior
{
	CALCULATED, //
	ACCUMULATED, //
	VARIABLE, //
}
#endif


#if CLIENT || UI 
global typedef StatChangedCallbackType_Bool void functionref( entity player, bool oldValue, bool newValue )
global typedef StatChangedCallbackType_Int void functionref( entity player, int oldValue, int newValue )
global typedef StatChangedCallbackType_Float void functionref( entity player, float oldValue, float newValue )
#endif


#if CLIENT || UI 
global struct StatEntry
{
	int    index
	int    indexWithinType
	string persistenceFullKey
	int    type = eStatType.INVALID
	int    behavior
	bool   shouldCache //

	array<string> enumKeys

	//

	bool functionref( entity player, array<StatEntry> sourceEntries, bool atStart )  calcFunc_Bool
	int functionref( entity player, array<StatEntry> sourceEntries, bool atStart )   calcFunc_Int
	float functionref( entity player, array<StatEntry> sourceEntries, bool atStart ) calcFunc_Float
	array<StatEntry>                                                                 calcSourceEntries

	array<StatEntry> dependents
}
#endif


#if CLIENT || UI 
global struct StatCalcFuncInfo
{
	bool functionref( entity player, array<StatEntry> sourceEntries, bool atStart )  calcFunc_Bool
	int functionref( entity player, array<StatEntry> sourceEntries, bool atStart )   calcFunc_Int
	float functionref( entity player, array<StatEntry> sourceEntries, bool atStart ) calcFunc_Float

	array<StatEntry> sourceEntries
}
#endif


#if CLIENT || UI 
global struct StatTemplateEnumKeyResolver
{
	bool isFinal

	table<string, StatTemplateEnumKeyResolver> children //

	table<string, StatEntry> entries //
}
#endif


#if CLIENT || UI 
global struct StatEnumStruct
{
	StatEnumStruct ornull parentEnumStruct

	string fieldName
	string enumName

	array<string> choices //

	#if(DEV)
		string structName
	#endif
}
#endif


#if CLIENT || UI 
global struct StatTemplate
{
	StatEnumStruct ornull parentEnumStruct

	int  type = eStatType.INVALID //
	int  behavior //
	bool shouldCache = false //

	string fieldName

	int enumKeyCount

	StatTemplateEnumKeyResolver& resolver //

	StatEntry& rootEntry //

	array<StatEntry> allEntries
}
#endif


#if ( CLIENT || UI ) && DEV 
struct StatEnumStruct_Children
{
	array<StatEnumStruct> childEnumStructs
	array<StatTemplate>   childStatTemplates
}
#endif



//
//
//
//
//
struct AdditionalStatsPlayerState
{
	#if CLIENT || UI 
		table<int, bool>  cachedStats_Bool
		table<int, int>   cachedStats_Int
		table<int, float> cachedStats_Float

		table<int, array<StatChangedCallbackType_Bool> >  watchCallbacks_Bool
		table<int, array<StatChangedCallbackType_Int> >   watchCallbacks_Int
		table<int, array<StatChangedCallbackType_Float> > watchCallbacks_Float
	#endif
}

struct FileStruct_LifetimeLevel
{
	#if CLIENT || UI 
		#if(DEV)
			StatEnumStruct_Children                        rootFieldsList //
			table<StatEnumStruct, StatEnumStruct_Children> sesChildrenMap //
		#endif

		//
		array<StatEntry> stats_Bool
		array<StatEntry> stats_Int
		array<StatEntry> stats_Float

		array<StatEntry>         allStats
		table<string, StatEntry> refStatMap

		table<EHI, AdditionalStatsPlayerState> playerStateMap = {}
	#endif

}
FileStruct_LifetimeLevel& fileLevel


//
//
//
//
//

#if CLIENT || UI 
void function ShStatsInternals_LevelInit()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	#if(false)







#endif
}
#endif



//
//
//
//
//

#if CLIENT || UI 
bool function GetStat_Bool( entity player, StatEntry entry, bool atStart = false )
{
	Assert( entry.type == eStatType.BOOL )
	#if CLIENT || UI 
		Assert( IsLobby() || atStart, "Cannot get current stats in client or UI VM during a match (they could be out of date)." )
	#endif

	if ( entry.behavior == eStatBehavior.CALCULATED && !entry.shouldCache )
		return entry.calcFunc_Bool( player, entry.calcSourceEntries, atStart )

	#if(false)

#elseif CLIENT || UI 
		#if(DEV)
			//
			if ( DEV_ShouldIgnorePersistence() )
				return false
		#endif
		return expect bool(player.GetPersistentVar( entry.persistenceFullKey ))
	#endif
}
#endif


#if CLIENT || UI 
int function GetStat_Int( entity player, StatEntry entry, bool atStart = false )
{
	Assert( entry.type == eStatType.INT )
	#if CLIENT || UI 
		Assert( IsLobby() || atStart, "Cannot get current stats in client or UI VM during a match (they could be out of date)." )
	#endif

	if ( entry.behavior == eStatBehavior.CALCULATED && !entry.shouldCache )
		return entry.calcFunc_Int( player, entry.calcSourceEntries, atStart )

	#if(false)

#elseif CLIENT || UI 
		#if(DEV)
			//
			if ( DEV_ShouldIgnorePersistence() )
				return 0
		#endif
		return expect int(player.GetPersistentVar( entry.persistenceFullKey ))
	#endif
}
#endif


#if CLIENT || UI 
float function GetStat_Float( entity player, StatEntry entry, bool atStart = false )
{
	Assert( entry.type == eStatType.FLOAT )
	#if CLIENT || UI 
		Assert( IsLobby() || atStart, "Cannot get current stats in client or UI VM during a match (they could be out of date)." )
	#endif

	if ( entry.behavior == eStatBehavior.CALCULATED && !entry.shouldCache )
		return entry.calcFunc_Float( player, entry.calcSourceEntries, atStart )

	#if(false)

#elseif CLIENT || UI 
		#if(DEV)
			//
			if ( DEV_ShouldIgnorePersistence() )
				return 0.0
		#endif
		return expect float(player.GetPersistentVar( entry.persistenceFullKey ))
	#endif
}
#endif


#if CLIENT || UI 
StatEntry function GetStatEntryByIndex( int index )
{
	return fileLevel.allStats[index]
}
#endif


#if CLIENT || UI 
bool function IsValidStatEntryRef( string ref )
{
	return (ref in fileLevel.refStatMap)
}
#endif


#if CLIENT || UI 
StatEntry function GetStatEntryByRef( string ref )
{
	return fileLevel.refStatMap[ref]
}
#endif


#if CLIENT || UI 
int function StatEntry_GetIndex( StatEntry entry )
{
	return entry.index
}
#endif


#if CLIENT || UI 
string function StatEntry_GetRef( StatEntry entry )
{
	return entry.persistenceFullKey
}
#endif


#if CLIENT || UI 
int function StatEntry_GetType( StatEntry entry )
{
	return entry.type
}
#endif


#if CLIENT || UI 
bool function DoesStatSatisfyValue( entity player, StatEntry entry, float checkValue, bool atStart = false )
{
	if ( entry.type == eStatType.BOOL )
	{
		Assert( checkValue == 0.0 || checkValue == 1.0 )
		bool value    = GetStat_Bool( player, entry, atStart )
		bool wantTrue = (checkValue == 1.0)
		return (value == wantTrue)
	}
	else if ( entry.type == eStatType.INT )
	{
		Assert( float(int(checkValue)) == checkValue )
		int value = GetStat_Int( player, entry, atStart )
		return (value >= int(checkValue))
	}
	else if ( entry.type == eStatType.FLOAT )
	{
		float value = GetStat_Float( player, entry, atStart )
		return value >= checkValue
	}
	unreachable
}
#endif


#if(false)




















#endif


#if(false)




















#endif


#if(false)




















#endif


#if(false)


//




#endif


#if(false)










//
















































#endif


#if(false)









#endif



//
//
//
//
//

#if ( CLIENT || UI ) && DEV 
string function DEV_GetStatTemplateDebugName( StatTemplate template )
{
	//
	//
	//
	//
	//
	//
	//
	//
	return ""
}
#endif


#if(false)




#endif


#if(false)















#endif


#if(false)



























#endif



//
//
//
//
//

#if(false)





//














#endif


#if(false)





//














#endif


#if(false)





//













#endif


#if(false)





//













#endif


#if(false)





//













#endif


#if(false)



































#endif


#if(false)

















//


















#endif


#if CLIENT || UI 
StatEntry function ResolveStatEntry( StatTemplate template, ... )
{
	Assert( template.type != eStatType.INVALID, "StatTemplate was not initialized." )

	int keyArgCount = expect int(vargc)
	Assert( keyArgCount == template.enumKeyCount, "Stat '" + DEV_GetStatTemplateDebugName( template ) + "' requires " + template.enumKeyCount + " enum keys but ResolveStatEntry was called with " + keyArgCount + "." )

	if ( vargc == 0 )
		return template.rootEntry

	StatTemplateEnumKeyResolver resolver = template.resolver
	for ( int resolveDepth = 0; resolveDepth < keyArgCount - 1; resolveDepth++ )
	{
		Assert( !resolver.isFinal )
		string key = expect string(vargv[resolveDepth])
		resolver = resolver.children[key]
	}
	Assert( resolver.isFinal )
	string key = expect string(vargv[keyArgCount - 1])
	return resolver.entries[key]
}
#endif


#if CLIENT || UI 
StatEnumStruct function RegisterStatEnumStruct( StatEnumStruct ornull parentSESOrNull, string fieldName, string enumName, array<string> choices )
{
	StatEnumStruct ses
	ses.parentEnumStruct = parentSESOrNull
	ses.fieldName = fieldName
	ses.enumName = enumName
	ses.choices = choices

	#if(DEV)
		if ( parentSESOrNull == null )
		{
			fileLevel.rootFieldsList.childEnumStructs.append( ses )
		}
		else
		{
			StatEnumStruct parentSES = expect StatEnumStruct(parentSESOrNull)
			StatEnumStruct_Children sesChildren
			if ( parentSES in fileLevel.sesChildrenMap )
				sesChildren = fileLevel.sesChildrenMap[parentSES]
			else
				fileLevel.sesChildrenMap[parentSES] <- sesChildren
			sesChildren.childEnumStructs.append( ses )
		}
	#endif

	return ses
}
#endif


#if CLIENT || UI 
StatTemplate function InternalRegisterStatCommon( StatEnumStruct ornull parentSESOrNull, string fieldName, int type, int behavior, bool shouldCache )
{
	StatTemplate template
	template.fieldName = fieldName
	template.type = type
	template.behavior = behavior
	template.shouldCache = shouldCache
	Assert( !shouldCache || template.behavior == eStatBehavior.CALCULATED )

	if ( parentSESOrNull == null )
	{
		template.rootEntry.persistenceFullKey = "stats." + fieldName

		template.rootEntry.index = fileLevel.allStats.len()
		fileLevel.allStats.append( template.rootEntry )

		fileLevel.refStatMap[template.rootEntry.persistenceFullKey] <- template.rootEntry

		template.rootEntry.type = template.type
		template.rootEntry.behavior = template.behavior
		template.rootEntry.shouldCache = template.shouldCache

		if ( template.type == eStatType.BOOL )
		{
			//
			template.rootEntry.indexWithinType = fileLevel.stats_Bool.len()
			fileLevel.stats_Bool.append( template.rootEntry )
		}
		else if ( template.type == eStatType.INT )
		{
			template.rootEntry.indexWithinType = fileLevel.stats_Int.len()
			fileLevel.stats_Int.append( template.rootEntry )
		}
		else if ( template.type == eStatType.FLOAT )
		{
			template.rootEntry.indexWithinType = fileLevel.stats_Float.len()
			fileLevel.stats_Float.append( template.rootEntry )
		}

		#if(DEV)
			fileLevel.rootFieldsList.childStatTemplates.append( template )
		#endif

		template.allEntries.append( template.rootEntry )
	}
	else
	{
		StatEnumStruct parentSES = expect StatEnumStruct(parentSESOrNull)

		#if(DEV)
			StatEnumStruct_Children sesChildren
			if ( parentSES in fileLevel.sesChildrenMap )
				sesChildren = fileLevel.sesChildrenMap[parentSES]
			else
				fileLevel.sesChildrenMap[parentSES] <- sesChildren
			sesChildren.childStatTemplates.append( template )
		#endif

		array<StatEnumStruct> sesAncestorsReversed = []
		StatEnumStruct ornull ancestorOrNull       = parentSESOrNull
		while ( ancestorOrNull != null )
		{
			StatEnumStruct ancestor = expect StatEnumStruct(ancestorOrNull)
			sesAncestorsReversed.append( ancestor )
			ancestorOrNull = ancestor.parentEnumStruct
		}

		template.enumKeyCount = sesAncestorsReversed.len()
		template.resolver = BuildStatTemplateEnumKeyResolversRecursive( template, 0, sesAncestorsReversed, template, "stats.", [] )
	}

	return template
}
#endif


#if CLIENT || UI 
StatTemplateEnumKeyResolver function BuildStatTemplateEnumKeyResolversRecursive( StatTemplate template, int depth, array<StatEnumStruct> sesAncestorsReversed, StatTemplate stat, string partialKey, array<string> enumKeys )
{
	StatTemplateEnumKeyResolver resolver

	StatEnumStruct ancestor = sesAncestorsReversed[sesAncestorsReversed.len() - 1 - depth]

	if ( depth == sesAncestorsReversed.len() - 1 )
	{
		resolver.isFinal = true
		foreach ( string choice in ancestor.choices )
		{
			array<string> grownEnumKeys = []
			grownEnumKeys.extend( enumKeys )
			grownEnumKeys.append( choice )

			StatEntry entry

			entry.persistenceFullKey = partialKey + ancestor.fieldName + "[" + choice + "]" + "." + stat.fieldName
			entry.enumKeys = grownEnumKeys

			entry.index = fileLevel.allStats.len()
			fileLevel.allStats.append( entry )

			fileLevel.refStatMap[entry.persistenceFullKey] <- entry

			entry.type = template.type
			entry.behavior = template.behavior
			entry.shouldCache = template.shouldCache

			if ( template.type == eStatType.BOOL )
			{
				entry.indexWithinType = fileLevel.stats_Bool.len()
				fileLevel.stats_Bool.append( entry )
			}
			else if ( template.type == eStatType.INT )
			{
				entry.indexWithinType = fileLevel.stats_Int.len()
				fileLevel.stats_Int.append( entry )
			}
			else if ( template.type == eStatType.FLOAT )
			{
				entry.indexWithinType = fileLevel.stats_Float.len()
				fileLevel.stats_Float.append( entry )
			}

			resolver.entries[choice] <- entry

			template.allEntries.append( entry )
		}
	}
	else
	{
		resolver.isFinal = false
		foreach ( string choice in ancestor.choices )
		{
			string grownPartialKey      = partialKey + ancestor.fieldName + "[" + choice + "]."
			array<string> grownEnumKeys = []
			grownEnumKeys.extend( enumKeys )
			grownEnumKeys.append( choice )
			StatTemplateEnumKeyResolver subResolver = BuildStatTemplateEnumKeyResolversRecursive( stat, depth + 1, sesAncestorsReversed, stat, grownPartialKey, grownEnumKeys )
			resolver.children[choice] <- subResolver
		}
	}

	return resolver
}
#endif


#if CLIENT || UI 
StatTemplate function RegisterAccumulatedStat_Bool( StatEnumStruct ornull enumStructOrNull, string fieldName )
{
	return InternalRegisterStatCommon( enumStructOrNull, fieldName, eStatType.BOOL, eStatBehavior.ACCUMULATED, false )
}
#endif


#if CLIENT || UI 
StatTemplate function RegisterAccumulatedStat_Int( StatEnumStruct ornull enumStructOrNull, string fieldName )
{
	return InternalRegisterStatCommon( enumStructOrNull, fieldName, eStatType.INT, eStatBehavior.ACCUMULATED, false )
}
#endif


#if CLIENT || UI 
StatTemplate function RegisterAccumulatedStat_Float( StatEnumStruct ornull enumStructOrNull, string fieldName )
{
	return InternalRegisterStatCommon( enumStructOrNull, fieldName, eStatType.FLOAT, eStatBehavior.ACCUMULATED, false )
}
#endif


#if CLIENT || UI 
StatTemplate function RegisterVariableStat_Int( StatEnumStruct ornull enumStructOrNull, string fieldName )
{
	return InternalRegisterStatCommon( enumStructOrNull, fieldName, eStatType.INT, eStatBehavior.VARIABLE, false )
}
#endif

#if CLIENT || UI 
StatTemplate function RegisterVariableStat_Bool( StatEnumStruct ornull enumStructOrNull, string fieldName )
{
	return InternalRegisterStatCommon( enumStructOrNull, fieldName, eStatType.BOOL, eStatBehavior.VARIABLE, false )
}
#endif

#if CLIENT || UI 
StatTemplate function InternalRegisterCalculatedStatCommon( StatEnumStruct ornull enumStructOrNull, string fieldName, bool shouldCache,
		StatCalcFuncInfo functionref( StatEntry, array<StatTemplate> ) setupFunc, array<StatTemplate> sourceTemplates )
{
	StatTemplate stat = InternalRegisterStatCommon( enumStructOrNull, fieldName, eStatType.INT, eStatBehavior.CALCULATED, shouldCache )

	//
	//

	foreach( StatEntry entry in stat.allEntries )
	{
		StatCalcFuncInfo calcInfo = setupFunc( entry, sourceTemplates )
		entry.calcFunc_Bool = calcInfo.calcFunc_Bool
		entry.calcFunc_Int = calcInfo.calcFunc_Int
		entry.calcFunc_Float = calcInfo.calcFunc_Float
		entry.calcSourceEntries = calcInfo.sourceEntries

		foreach( StatEntry sourceEntry in calcInfo.sourceEntries )
			sourceEntry.dependents.append( entry )
	}

	return stat
}
#endif


#if CLIENT || UI 
StatTemplate function RegisterExpensiveCalculatedStat_Int( StatEnumStruct ornull enumStructOrNull, string fieldName,
		StatCalcFuncInfo functionref( StatEntry, array<StatTemplate> ) setupFunc, array<StatTemplate> sourceTemplates )
{
	return InternalRegisterCalculatedStatCommon( enumStructOrNull, fieldName, false, setupFunc, sourceTemplates )
}
#endif


#if CLIENT || UI 
StatTemplate function RegisterCachedCalculatedStat_Int( StatEnumStruct ornull enumStructOrNull, string fieldName,
		StatCalcFuncInfo functionref( StatEntry, array<StatTemplate> ) setupFunc, array<StatTemplate> sourceTemplates )
{
	return InternalRegisterCalculatedStatCommon( enumStructOrNull, fieldName, true, setupFunc, sourceTemplates )
}
#endif


#if(false)





//









//








//








//



#endif


#if(false)
































#endif


#if(false)
































#endif


#if(false)

























#endif


