global function ClSpectatorHud_Init
global function CreateSpectatorHud
global function UpdateRespawnTime
global function UpdateRespawnStatus
global function UpdateDeathAndSpectatorHUD

global function ShowRoundEndSquadResults
global function IsViewingSquadSummary

global function ServerCallback_DeadHudSetDamageHistory
global function ServerCallback_DeadHudClearDamageHistory

enum eRuiSort
{
	GLAD_CARD = RUI_SORT_GLADCARD
	SQUADSUMMARY_BANNERS
	SQUADSUMMARY_STATS
	SQUADSUMMARY_BORDER
	SPECTATOR_HUD
	DEAD_HUD
}

struct DeadHudDamageHistory
{
	string attackerName			= ""
	asset weaponIcon			= $""
	string weaponDisplayName	= ""
	int damageTaken 			= 163
	int hitsTaken				= 9
	int enemyCount				= 3
	int damageDealt				= 136
	int hitsDealt				= 7
	bool isPopulated			= false	//
}


struct
{
	var spectatorHud = null
	var deadHud = null

	bool summaryValid = false

	bool lobbyReturnRegistered = false
	bool summaryRegistered = false
	bool reportRegistered = false

	bool                             viewingSquadSummary = false
	entity                           squadResultsCamera
	array<var>                       squadResultsGladCardRuis
	array<NestedGladiatorCardHandle> squadResultsGladCardHandles
	array<var>                       squadResultsStatsRuis
	var                              squadResultsBorderRui = null
	entity                           squadResultsBackgroundModel
	bool                             squadResultsApexScreensForcedOff = false

	var    sidePaneRui
	bool   showGladCard = true
	entity currentTarget

	bool isViewingSquadStats = false
	DeadHudDamageHistory				deadHudDamageHistroy
} file

void function ClSpectatorHud_Init()
{
	if ( IsMenuLevel() )
		return

	AddFirstPersonSpectateStartedCallback( UpdateDeathAndSpectatorHUD )
	AddThirdPersonSpectateStartedCallback( UpdateDeathAndSpectatorHUD )
	AddOnSpectatorTargetChangedCallback( SpectatorTargetChanged_UpdateSpectatorHud )
	AddCallback_OnPlayerLifeStateChanged( UpdateDeathAndSpectatorHUDOnLifestateChange )

	CreateSpectatorHud()

	AddCallback_EntitiesDidLoad( EntitiesDidLoad )
	RegisterServerVarChangeCallback( "gameState", GameStateChanged )

	AddCallback_OnPlayerLifeStateChanged( OnPlayerLifeStateChanged )

	RegisterSignal( "UpdateSpectatorHudCount" )
	RegisterSignal( "DisplaySpectatorCardSidePane" )
	RegisterSignal( "ReportPlayerButtonPressed" )

	RegisterButtonPressedCallback( KEY_RSHIFT, TryToggleGladCard )
	RegisterButtonPressedCallback( KEY_LSHIFT, TryToggleGladCard )
	RegisterButtonPressedCallback( BUTTON_Y, TryToggleGladCard )

	RegisterButtonPressedCallback( BUTTON_STICK_RIGHT, ReportPlayerButtonPressed )
	RegisterButtonPressedCallback( KEY_R, ReportPlayerButtonPressed )

	AddCallback_GameStateEnter( eGameState.Epilogue, SetEpilogueFlag )	//

	//
	AddCallback_OnBleedoutEnded( DeadHudClearDamageHistory )

	#if(false)

#endif //
}


void function EntitiesDidLoad()
{
	if ( IsMenuLevel() )
		return

	RuiTrackInt( file.deadHud, "numSpectateTargets", GetLocalClientPlayer(), RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "spectatorTargetCount" ) )

	if ( !IsRoundWinningKillReplayEnabled() )
		//
		return

	AddCallback_KillReplayStarted( RoundWinningKillReplayStart_HideSpectatorHud )
	AddCallback_KillReplayEnded( RoundWinningKillReplayEnd_ShowSpectatorHud )
}

void function CreateSpectatorHud()
{
	file.spectatorHud = CreateFullscreenRui( $"ui/spectator_hud.rpak", eRuiSort.SPECTATOR_HUD )
	file.deadHud = CreateFullscreenRui( $"ui/dead_hud.rpak", eRuiSort.DEAD_HUD )
}


void function UpdateDeathAndSpectatorHUD( entity player, entity currentTarget )
{
	Assert( file.spectatorHud != null )
	Assert( file.deadHud != null )

	RuiTrackInt( file.spectatorHud, "numObserverTargets", player, RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "spectatorTargetCount" ) )
	RuiTrackInt( file.deadHud, "numSpectateTargets", GetLocalClientPlayer(), RUI_TRACK_SCRIPT_NETWORK_VAR_INT, GetNetworkedVariableIndex( "spectatorTargetCount" ) )

	bool playerSpectateTarget = currentTarget != null && currentTarget.IsPlayer()

	file.currentTarget = currentTarget
	UpdateGladCardVisibility()

	array<entity> teamPlayers = GetPlayerArrayOfTeam( player.GetTeam() )
	for ( int index = 0; index < 4; index++ )
	{
		//
		if ( index < teamPlayers.len() && (!playerSpectateTarget || IsEnemyTeam( currentTarget.GetTeam(), player.GetTeam() )) )
		{
			printt( "Setting voice Icon to " + teamPlayers[index].GetPlayerName() )
			RuiSetString( file.deadHud, "playerName" + (index + 1), teamPlayers[index].GetPlayerName() )
			RuiTrackInt( file.deadHud, "playerMic" + (index + 1), teamPlayers[index], RUI_TRACK_MIC_STATUS )
			RuiSetBool( file.deadHud, "playerAvailable" + (index + 1), true )
		}
		else
		{
			printt( "Setting voice Icon to empty" )
			RuiSetString( file.deadHud, "playerName" + (index + 1), "" )
			RuiSetInt( file.deadHud, "playerMic" + (index + 1), -1 )
			RuiSetBool( file.deadHud, "playerAvailable" + (index + 1), false )
		}
	}

	//
	RuiSetString( file.deadHud, "attackerName", file.deadHudDamageHistroy.attackerName )
	RuiSetAsset( file.deadHud, "weaponIcon", file.deadHudDamageHistroy.weaponIcon )
	RuiSetString( file.deadHud, "weaponDisplayName", file.deadHudDamageHistroy.weaponDisplayName )
	RuiSetInt( file.deadHud, "damageTaken", file.deadHudDamageHistroy.damageTaken )
	RuiSetInt( file.deadHud, "hitsTaken", file.deadHudDamageHistroy.hitsTaken )
	RuiSetInt( file.deadHud, "enemyCount", file.deadHudDamageHistroy.enemyCount )
	RuiSetInt( file.deadHud, "damageDealt", file.deadHudDamageHistroy.damageDealt )
	RuiSetInt( file.deadHud, "hitsDealt", file.deadHudDamageHistroy.hitsDealt )

	bool showDeathRecap = ShouldShowDeathRecap( player )

	RuiSetBool( file.deadHud, "showDeathRecap", showDeathRecap )

	if ( !playerSpectateTarget )
	{
		RuiSetBool( file.deadHud, "showReportButton", CanReport() )
		RuiSetBool( file.spectatorHud, "shouldShowPlayerSpectatingText", false )
		RuiSetBool( file.deadHud, "haveSpectateTarget", false )
		RuiSetString( file.deadHud, "spectateName", "" )
		return
	}

	RuiSetBool( file.deadHud, "haveSpectateTarget", true )
	RuiSetBool( file.deadHud, "showReportButton", CanReport() )

	EHI playerEHI = ToEHI( currentTarget )
	string playerName
	//
	//
	//
		playerName = GetPlayerName( playerEHI )

	RuiSetString( file.spectatorHud, "playerName", playerName )
	RuiSetInt( file.spectatorHud, "playerTeam", currentTarget.GetTeam() )
	RuiSetInt( file.spectatorHud, "myTeam", player.GetTeam() )
	RuiSetBool( file.spectatorHud, "shouldShowPlayerSpectatingText", true )

	RuiSetInt( file.spectatorHud, "gameState", GetGameState() )

	RuiSetString( file.deadHud, "spectateName", playerName )
	RuiSetBool( file.deadHud, "spectatingEnemy", IsEnemyTeam( currentTarget.GetTeam(), player.GetTeam() ) )

	#if(false)


#endif //
}


void function UpdateDeathAndSpectatorHUDOnLifestateChange( entity player, int oldLifeState, int newLifeState )
{
	if ( player != GetLocalClientPlayer() )
		return

	UpdateDeathAndSpectatorHUD( player, player.GetObserverTarget() )
	UpdateGladCardVisibility()
}


void function SetSpectatorHudIsViewingSquadStats( bool isViewingSquadStats )
{
	if ( isViewingSquadStats )
		file.summaryValid = true
	UpdateSpectateButtons( true, file.summaryValid )
	RuiSetBool( file.deadHud, "summaryValid", file.summaryValid )
	RuiSetBool( file.spectatorHud, "isViewingSquadStats", isViewingSquadStats )
	RuiSetBool( file.deadHud, "isViewingSquadStats", isViewingSquadStats )

	file.isViewingSquadStats = isViewingSquadStats
}

#if(false)











#endif //

void function SpectatorTargetChanged_UpdateSpectatorHud( entity player, entity previousTarget, entity currentTarget )
{
	UpdateDeathAndSpectatorHUD( player, currentTarget )

	file.currentTarget = currentTarget

	UpdateGladCardVisibility()
	if ( IsValid( currentTarget ) )
		UpdateGamestateRuiTracking( currentTarget )
	else
		UpdateGamestateRuiTracking( player )

	if ( GetGameState() >= eGameState.WinnerDetermined )
		ShowChampionVictoryScreen( GetWinningTeam() )

}


void function DisplaySpectatorCardSidePane( int situation, int playerEHI, asset icon, string titleText )
{
	Signal( clGlobal.levelEnt, "DisplaySpectatorCardSidePane" )
	EndSignal( clGlobal.levelEnt, "DisplaySpectatorCardSidePane" )

	file.sidePaneRui = CreateFullscreenRui( $"ui/spectator_card.rpak", eRuiSort.GLAD_CARD )

	RuiSetImage( file.sidePaneRui, "titleIcon", icon )
	RuiSetString( file.sidePaneRui, "titleText", Localize( titleText ) ) //
	if ( EHIHasValidScriptStruct( playerEHI ) )
		RuiSetString( file.sidePaneRui, "playerName", GetPlayerName( playerEHI ) )

	NestedGladiatorCardHandle nestedGCHandleFront = CreateNestedGladiatorCard( file.sidePaneRui, "cardFrontFace", situation, eGladCardPresentation.FULL_BOX )
	ChangeNestedGladiatorCardOwner( nestedGCHandleFront, playerEHI, null, eGladCardLifestateOverride.ALIVE )

	OnThreadEnd( void function() : ( nestedGCHandleFront ) {
		CleanupNestedGladiatorCard( nestedGCHandleFront )
		RuiDestroyIfAlive( file.sidePaneRui )
		file.sidePaneRui = null
	} )

	WaitForever()
}


void function HideGladCard( bool instant = false )
{
	Signal( clGlobal.levelEnt, "DisplaySpectatorCardSidePane" )
}


void function GameStateChanged()
{
	if ( file.spectatorHud != null )
		RuiSetInt( file.spectatorHud, "gameState", GetGameState() )

	if ( file.deadHud != null )
		RuiSetInt( file.deadHud, "gameState", GetGameState() )

	if ( GetGameState() >= eGameState.WinnerDetermined )
	{
		UpdateGladCardVisibility()
		ShowRoundEndSquadResults( false )
	}
}


void function RoundWinningKillReplayStart_HideSpectatorHud()
//
{
	if ( IsRoundWinningKillReplayEnabled() == false )
		return

	if ( IsReplayRoundWinning() == false )
		return

	Assert( file.spectatorHud != null )

	RuiSetFloat( file.spectatorHud, "roundWinningKillReplayAlpha", 0.0 )
}


void function RoundWinningKillReplayEnd_ShowSpectatorHud()
//
{
	Assert( file.spectatorHud != null )

	if ( IsRoundWinningKillReplayEnabled() == false )
		return

	if ( IsReplayRoundWinning() == false )
		return

	RuiSetFloat( file.spectatorHud, "roundWinningKillReplayAlpha", 1.0 )
}


void function UpdateRespawnStatus( int respawnStatus )
{
	string respawnText
	string respawnHint

	entity clientPlayer = GetLocalClientPlayer()
	bool showDeathRecap = ShouldShowDeathRecap( clientPlayer )

	switch ( respawnStatus )
	{
		case eRespawnStatus.WAITING_FOR_DELIVERY:
			respawnText = "#WAITING_FOR_RESPAWN"
			respawnHint = "#HINT_PING_RESPAWN_BEACON"
			break

		case eRespawnStatus.PICKUP_DESTROYED:
			respawnText = "#STATUS_PICKUP_DESTROYED"
			UpdateSpectateButtons( true, file.summaryValid )
			break

		case eRespawnStatus.SQUAD_ELIMINATED:
			respawnText = "#STATUS_SQUAD_ELIMINATED"
			UpdateSpectateButtons( true, file.summaryValid )
			break

		case eRespawnStatus.WAITING_FOR_DROPPOD:
			respawnText = "#RESPAWNING_IN"
			break

		case eRespawnStatus.WAITING_FOR_PICKUP:
			respawnText = "#STATUS_PICKUP_WAITING"
			respawnHint = "#HINT_PING_GLADIATOR_CARD"
			break

		case eRespawnStatus.NONE:
			respawnText = ""
			showDeathRecap = false
			break
	}

	RuiSetString( file.deadHud, "respawnText", respawnText )
	RuiSetString( file.deadHud, "respawnHint", respawnHint )
	RuiSetInt( file.deadHud, "respawnStatus", respawnStatus )
	RuiSetBool( file.deadHud, "showDeathRecap", showDeathRecap )
}


void function UpdateRespawnTime( float startTime, float endTime )
{
	RuiSetGameTime( file.deadHud, "respawnStartTime", startTime )
	RuiSetGameTime( file.deadHud, "respawnEndTime", endTime )
}


void function UpdateSpectateButtons( bool allowReturn, bool allowSummary )
{
	//
	bool canBindReturn  = allowReturn && (!IsAlive( GetLocalClientPlayer() ) || GetGameState() >= eGameState.WinnerDetermined)
	bool canBindSummary = allowSummary && (!IsAlive( GetLocalClientPlayer() ) || GetGameState() >= eGameState.WinnerDetermined)

	if ( canBindReturn && !file.lobbyReturnRegistered )
	{
		RegisterButtonPressedCallback( BUTTON_B, ReturnToLobby )
		RegisterButtonPressedCallback( KEY_SPACE, ReturnToLobby )
		file.lobbyReturnRegistered = true
	}
	else if ( !canBindReturn && file.lobbyReturnRegistered )
	{
		DeregisterButtonPressedCallback( BUTTON_B, ReturnToLobby )
		DeregisterButtonPressedCallback( KEY_SPACE, ReturnToLobby )
		file.lobbyReturnRegistered = false
	}

	if ( canBindSummary && !file.summaryRegistered )
	{
		RegisterButtonPressedCallback( BUTTON_A, ToggleRoundEndSquadResults )
		RegisterButtonPressedCallback( KEY_TAB, ToggleRoundEndSquadResults )
		file.summaryRegistered = true
	}
	else if ( !canBindSummary && file.summaryRegistered )
	{
		DeregisterButtonPressedCallback( BUTTON_A, ToggleRoundEndSquadResults )
		DeregisterButtonPressedCallback( KEY_TAB, ToggleRoundEndSquadResults )
		file.summaryRegistered = false
	}

/*












*/
}


void function ReturnToLobby( var button )
{
	if ( IsLobby() )
		return

	if ( IsMenuOpen() )
		return

	if ( Time() - LastMenuToggleTime() < (1 / 30.0) )
		return

	if ( IsScoreboardShown() )
		return

	RunUIScript( "OpenLeaveDialogFromSpectate" )
}


void function ToggleRoundEndSquadResults( var button )
{
	if ( IsLobby() )
		return

	if ( IsMenuOpen() )
		return

	if ( Time() - LastMenuToggleTime() < (1 / 30.0) )
		return

	if ( IsScoreboardShown() )
		return

	if ( GetGameState() >= eGameState.WinnerDetermined )
		return

	ShowRoundEndSquadResults( !file.viewingSquadSummary )
}

bool function CanReport()
{
	entity target

	if ( IsSpectating() )
	{
		if ( !IsValid( file.currentTarget ) )
			return false

		target = file.currentTarget
	}
	else
	{
		if ( !IsValid( GetSituationPlayer() ) )
			return false

		if ( GetSituationPlayer() == GetLocalClientPlayer() )
			return false

		target = GetSituationPlayer()
	}

	if ( IsLobby() )
		return false

	if ( IsMenuOpen() )
		return false

	if ( IsScoreboardShown() )
		return false

	if ( file.isViewingSquadStats )
		return false

	return CanReportPlayer( target )
}

void function ReportPlayerButtonPressed( var button )
{
	if ( !CanReport() )
		return

	thread ShowReportDialogAfterDelay( button )
}

void function ShowReportDialogAfterDelay( var button )
{
	Signal( GetLocalClientPlayer(), "ReportPlayerButtonPressed" )
	EndSignal( GetLocalClientPlayer(), "ReportPlayerButtonPressed" )

	if ( !CanReport() )
		return

	float endTime = Time() + 0.5
	while ( ( InputIsButtonDown( BUTTON_STICK_RIGHT ) || InputIsButtonDown( KEY_R ) ) && Time() < endTime )
		WaitFrame()

	if ( Time() < endTime )
		return

	entity reportTarget = IsSpectating() ? file.currentTarget : GetSituationPlayer()
	string friendlyOrEnemy = reportTarget.GetTeam() == GetLocalClientPlayer().GetTeam() ? "friendly" : "enemy"

	RunUIScript( "ClientToUI_ShowReportPlayerDialog", reportTarget.GetPlayerName(), reportTarget.GetHardware(), reportTarget.GetPlatformUID(), friendlyOrEnemy )
}


void function OnPlayerLifeStateChanged( entity player, int oldState, int newState )
{
	if ( player != GetLocalClientPlayer() )
		return

	if ( newState == LIFE_ALIVE )
	{
		UpdateSpectateButtons( false, false )
		ShowRoundEndSquadResults( false )
	}
}


void function ShowRoundEndSquadResults( bool show )
{
	SquadSummaryData squadSummaryData = GetSquadSummaryData()

	entity player = GetLocalClientPlayer()
	if ( !IsValid( player ) )
		return

	if ( IsAlive( player ) && GetGameState() <= eGameState.Playing )
		show = false

	if ( show )
		ClearRoundEndSquadResults( player )
	else
		StopLocal1PDeathSound()

	if ( show == file.viewingSquadSummary )
		return
	file.viewingSquadSummary = show

	SetSpectatorHudIsViewingSquadStats( show )
	UpdateMainHudVisibility( GetLocalViewPlayer() )
	Hud_SetAboveBlur( HudElement( "IngameTextChat" ), true )
	UpdateSpectateButtons( true, true )
	UpdateWaypointRuiVisibility()

	EmitSoundOnEntity( player, "UI_Menu_RoundSummary_Results" )

	Signal( clGlobal.levelEnt, "DisplaySpectatorCardSidePane" )
	Signal( player, "Bleedout_StopBleedoutEffects" )

	UpdateGladCardVisibility()

	if ( show )
	{
		//

		//
		float camera_fov    = 25.0
		bool hasMenuEnts    = GetEntArrayByScriptName( "target_victory_gcards_ref" ).len() > 0
		vector cameraOrigin = <0, 0, 10000>
		vector cameraAngles = <0, 0, 0>
		if ( !IsValid( file.squadResultsCamera ) )
		{
			if ( hasMenuEnts )
			{
				entity gladCardRoomEnt = GetEntByScriptName( "target_victory_gcards_ref" )
				cameraOrigin = gladCardRoomEnt.GetOrigin()
				cameraAngles = gladCardRoomEnt.GetAngles()
			}
			file.squadResultsCamera = CreateClientSidePointCamera( cameraOrigin, cameraAngles, camera_fov )
		}

		if ( !hasMenuEnts )
		{
			file.squadResultsBackgroundModel = CreateClientSidePropDynamic( cameraOrigin - <0, 0, 80>, cameraAngles, SURVIVAL_SQUAD_SUMMARY_MODEL )
		}

		file.squadResultsCamera.SetTargetFOV( camera_fov, true, EASING_CUBIC_INOUT, 0.0 )

		//
		player.SetMenuCameraEntityWithAudio( file.squadResultsCamera )
		file.squadResultsCamera.SetFogEnable( true )
		file.squadResultsCamera.SetTargetFOV( camera_fov, true, EASING_CUBIC_INOUT, 0.0 )

		if ( !file.squadResultsApexScreensForcedOff ) //
		{
			ClApexScreens_DisableAllScreens()
			file.squadResultsApexScreensForcedOff = true
		}

		//
		array<float> offsets = IsOdd( MAX_TEAM_PLAYERS ) ? [0.0, -1.0, 1.0, -2.0, 2.0] : [-0.5, 0.5, 1.5, -1.5]
		int squadKillCount   = 0
		foreach( int i, SquadSummaryPlayerData data in squadSummaryData.playerData )
		{
			//
			var gladCardsRui = RuiCreate( $"ui/round_end_squad_member_gcard.rpak", clGlobal.topoFullScreen, RUI_DRAW_HUD, eRuiSort.SQUADSUMMARY_BANNERS )
			file.squadResultsGladCardRuis.append( gladCardsRui )
			int gladCardDisplaySituation             = eGladCardDisplaySituation.EOG_SCREEN_LOCAL_SQUAD_ANIMATED
			NestedGladiatorCardHandle nestedGCHandle = CreateNestedGladiatorCard( gladCardsRui, "card", gladCardDisplaySituation, eGladCardPresentation.FRONT_CLEAN )
			file.squadResultsGladCardHandles.append( nestedGCHandle )
			ChangeNestedGladiatorCardOwner( nestedGCHandle, data.eHandle, null, eGladCardLifestateOverride.ALIVE )
			RuiSetFloat( gladCardsRui, "offset", offsets[i] )

			//
			var playerStatsRui = CreateFullscreenPostFXRui( $"ui/round_end_squad_member_stats.rpak", eRuiSort.SQUADSUMMARY_STATS )
			file.squadResultsStatsRuis.append( playerStatsRui )
			RuiSetFloat( playerStatsRui, "offset", offsets[i] )

			//
			if ( EHIHasValidScriptStruct( data.eHandle ) )
			{
				RuiSetString( playerStatsRui, "playerName", EHI_GetName( data.eHandle ) )
				if ( IsValid( FromEHI( data.eHandle ) ) )
					RuiTrackInt( playerStatsRui, "micStatus", FromEHI( data.eHandle ), RUI_TRACK_MIC_STATUS )
			}

			if ( UseSoloModePostGamePresentation() )
			{
				//
				RuiSetString( playerStatsRui, "title3", "#SQUADSTAT_KILL" )
				squadKillCount += data.kills
				RuiSetString( playerStatsRui, "value3", string( data.kills ) )

				//
				RuiSetString( playerStatsRui, "title4", "#SQUADSTAT_DAMAGE" )
				RuiSetString( playerStatsRui, "value4", string( data.damageDealt ) )

				//
				RuiSetString( playerStatsRui, "title5", "#SQUADSTAT_SURVIVE" )
				string m = string( data.survivalTime / 60 )
				string s = string ( data.survivalTime % 60 )
				if ( s.len() == 1 )
					s = "0" + s
				RuiSetString( playerStatsRui, "value5", Localize( "#SQUADSTAT_SURVIVE_TIME_FORMAT", m, s ) )
			}
			else
			{
				//
				RuiSetString( playerStatsRui, "title1", "#SQUADSTAT_KILL" )
				squadKillCount += data.kills
				RuiSetString( playerStatsRui, "value1", string( data.kills ) )

				//
				RuiSetString( playerStatsRui, "title2", "#SQUADSTAT_DAMAGE" )
				RuiSetString( playerStatsRui, "value2", string( data.damageDealt ) )

				//
				RuiSetString( playerStatsRui, "title3", "#SQUADSTAT_SURVIVE" )
				string m = string( data.survivalTime / 60 )
				string s = string ( data.survivalTime % 60 )
				if ( s.len() == 1 )
					s = "0" + s
				RuiSetString( playerStatsRui, "value3", Localize( "#SQUADSTAT_SURVIVE_TIME_FORMAT", m, s ) )

				//
				RuiSetString( playerStatsRui, "title4", "#SQUADSTAT_REVIVE" )
				RuiSetString( playerStatsRui, "value4", string( data.revivesGiven ) )

				//
				RuiSetString( playerStatsRui, "title5", "#SQUADSTAT_RESPAWN" )
				RuiSetString( playerStatsRui, "value5", string( data.respawnsGiven ) )
			}
		}

		//
		file.squadResultsBorderRui = CreateFullscreenPostFXRui( $"ui/round_end_squads_border.rpak", eRuiSort.SQUADSUMMARY_BORDER )
		RuiSetInt( file.squadResultsBorderRui, "placementNum", squadSummaryData.squadPlacement )
		RuiSetInt( file.squadResultsBorderRui, "placementOutOf", player.GetPersistentVarAsInt( "lastGameSquads" ) )
		RuiSetInt( file.squadResultsBorderRui, "squadKills", squadKillCount )
		if ( UseSoloModePostGamePresentation() )
		{
			RuiSetString( file.squadResultsBorderRui, "headerText", squadSummaryData.squadPlacement == 1 ? "#SOLO_PLACEMENT_GCARDS_TITLE" : "#SOLO_HEADER_DEFEAT" )
			RuiSetString( file.squadResultsBorderRui, "killsText", "#SOLO_KILLS_COUNT" )
		}
		else
		{
			RuiSetString( file.squadResultsBorderRui, "headerText", squadSummaryData.squadPlacement == 1 ? "#SQUAD_PLACEMENT_GCARDS_TITLE" : "#SQUAD_HEADER_DEFEAT" )
			RuiSetString( file.squadResultsBorderRui, "killsText", "#SQUAD_KILLS_COUNT" )
		}
	}
	else
	{
		ClearRoundEndSquadResults( player )
	}

	UpdateScoreboardVisibility()
}


void function ClearRoundEndSquadResults( entity player )
{
	if ( file.squadResultsBorderRui != null )
		RuiDestroyIfAlive( file.squadResultsBorderRui )

	foreach( var rui in file.squadResultsStatsRuis )
		RuiDestroyIfAlive( rui )
	file.squadResultsStatsRuis.clear()

	foreach( NestedGladiatorCardHandle handle in file.squadResultsGladCardHandles )
		CleanupNestedGladiatorCard( handle )
	file.squadResultsGladCardHandles.clear()

	foreach( var rui in file.squadResultsGladCardRuis )
		RuiDestroyIfAlive( rui )
	file.squadResultsGladCardRuis.clear()

	if ( file.squadResultsApexScreensForcedOff )
	{
		ClApexScreens_EnableAllScreens()
		file.squadResultsApexScreensForcedOff = false
	}

	player.ClearMenuCameraEntity()

	if ( IsValid( file.squadResultsBackgroundModel ) )
		file.squadResultsBackgroundModel.Destroy()
}


bool function IsViewingSquadSummary()
{
	return file.viewingSquadSummary
}


void function TryToggleGladCard( entity player )
{
	if ( !IsSpectating() )
		return

	file.showGladCard = !file.showGladCard

	UpdateGladCardVisibility()
}


void function UpdateGladCardVisibility()
{
	RuiSetBool( file.deadHud, "showingCard", file.showGladCard )

	if ( !IsSpectating() || !file.showGladCard || file.viewingSquadSummary || !IsValid( file.currentTarget ) || !file.currentTarget.IsPlayer() || GetGameState() >= eGameState.WinnerDetermined )
	{
		HideGladCard( true )
		return
	}

	EHI playerEHI = ToEHI( file.currentTarget )

	thread DisplaySpectatorCardSidePane( eGladCardDisplaySituation.SPECTATE_ANIMATED,
		playerEHI, $"", "#HUD_SPECTATE_SPECTATING" )
}

void function SetEpilogueFlag()
{
	RuiSetBool( file.deadHud, "epilogue", true )
}

void function ServerCallback_DeadHudSetDamageHistory( entity attacker, int damageSourceId, int damageTaken, int hitsTaken, int enemyCount, int damageDealt, int hitsDealt )
{
	if ( !GetCurrentPlaylistVarBool( "show_death_recap", true ) )
		return

	string attackerName = ""
	if ( IsValid( attacker ) )
		attackerName = GetAttackerDisplayNamesFromClassname( attacker ).attackerName

	bool isMainWeapon = false
	string damageRef = GetRefFromDamageSourceID( damageSourceId )
	if ( SURVIVAL_Loot_IsRefValid( damageRef ) )
	{
		LootData lootData = SURVIVAL_Loot_GetLootDataByRef( damageRef )
		isMainWeapon = lootData.lootType == eLootType.MAINWEAPON
	}

	asset weaponIcon = isMainWeapon ? GetObitImageFromDamageSourceID( damageSourceId ) : $""
	string weaponDisplayName = GetObitFromDamageSourceID( damageSourceId )

	file.deadHudDamageHistroy.attackerName		= attackerName
	file.deadHudDamageHistroy.weaponIcon		= weaponIcon
	file.deadHudDamageHistroy.weaponDisplayName = weaponDisplayName
	file.deadHudDamageHistroy.damageTaken 		= damageTaken
	file.deadHudDamageHistroy.hitsTaken			= hitsTaken
	file.deadHudDamageHistroy.enemyCount		= enemyCount
	file.deadHudDamageHistroy.damageDealt		= damageDealt
	file.deadHudDamageHistroy.hitsDealt			= hitsDealt
	file.deadHudDamageHistroy.isPopulated		= true

	entity clientPlayer = GetLocalClientPlayer()

	#if(DEV)
	  printt( "\n\n\n************ DEATH RECAP DAMAGE DATA **************" )
	  printt( "attackerName, weaponIcon, weaponDisplayName, damageTaken, hitsTaken, enemyCount, damageDealt, hitsDealt" )
	  printt( attackerName, weaponIcon, weaponDisplayName, damageTaken, hitsTaken, enemyCount, damageDealt, hitsDealt )
	#endif
}

void function ServerCallback_DeadHudClearDamageHistory()
{
	DeadHudClearDamageHistory( GetLocalClientPlayer() )
}

void function DeadHudClearDamageHistory( entity player )
{
	if ( !IsAlive( player ) || player != GetLocalClientPlayer() )
		return

	file.deadHudDamageHistroy.isPopulated = false
}

bool function ShouldShowDeathRecap( entity player )
{
	if ( file.deadHudDamageHistroy.isPopulated == false )
		return false

	if ( GetCurrentPlaylistVarBool( "show_death_recap", true ) == false )
		return false

	if ( IsAlive( player ) )
		return false

	if ( player.IsObserver() && player.GetObserverMode() != OBS_MODE_DEATHCAM )
		return false

	return true
}