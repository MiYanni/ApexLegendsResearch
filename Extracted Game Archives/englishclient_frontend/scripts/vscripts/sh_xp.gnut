global function ShXP_Init
global function GetAccountLevelForXP
global function GetTotalXPToCompleteAccountLevel
global function GetRewardsForAccountLevel
global function GetPlayerAccountLevel
global function GetPlayerAccountDisplayLevel
global function GetAccountDisplayLevel
global function GetAccountDisplayBadge

global function XpEventTypeData_GetAmount
global function XpEventTypeData_GetFrac
global function XpEventTypeData_GetBattlePassFrac
global function XpEventTypeData_BattlePassOnly
global function XpEventTypeData_IsMultiplyer

global function GetPlayerAccountXPProgress
global function GetPlayerAccountXPPreviousProgress

global function GetXPEventValue
global function GetXPEventCount
#if(UI)
global function GetXPEventNameDisplay
global function GetXPEventValueDisplay
global function XpEventTypeData_DisplayEmpty

global function GetImageForReward
global function GetStringForReward
global function InitXPEvents
#endif

global function GetNextAccountLevel

#if(false)




//
#else
global const asset PLAYER_LEVELUP_FX = $"P_levelup_screen"
#endif

global struct XPEventData
{
	string _playlistVarName = ""

	float xpAmount = -1
	float xpFrac = 0.0
	float battlePassFrac = 0.0

	bool battlePassOnly = false
	bool isMultiplyer = false

	string displayString

	int countDisplayType = eNumericDisplayType.INT
	int awardDisplayType = eNumericDisplayType.INT

	bool characterSpecific = false
	bool displayEmpty = false
}

global enum XP_TYPE
{
	//
	SURVIVAL_DURATION,
	KILL,
	DAMAGE_DEALT,
	REVIVE_ALLY,
	RESPAWN_ALLY,
	DOWN,
	KILL_LEADER,
	TOP_THREE,
	WIN_MATCH,
	KILL_CHAMPION_MEMBER,
	BONUS_FRIEND,
	BONUS_FRIEND_BOOST,
	ACCOUNT_BOOST,
	BONUS_FIRST_KILL,
	BONUS_FIRST_KILL_AS,
	BONUS_CHAMPION,
	BONUS_FIRST_GAME,
	BONUS_RESTED_AS,
	TOTAL_MATCH,
	_NUM_TYPES,
}

global struct RewardData
{
	ItemFlavor& item
	int         quantity
}

struct
{
	array<int> totalXPToCompleteLevel
	int        maxAccountLevel
	int        xpForBonusLevels

	XPEventData[XP_TYPE._NUM_TYPES] xpEventTypeData
} file


string[XP_TYPE._NUM_TYPES] xpDisplayNames = ["Unhandled", ...]

void function ShXP_Init()
{
	#if(CLIENT)
		PrecacheParticleSystem( PLAYER_LEVELUP_FX )
	#endif
	//
	var accountXPDataTable = GetDataTable( $"datatable/progression_account.rpak" )
	int numRows            = GetDatatableRowCount( accountXPDataTable )
	file.totalXPToCompleteLevel.resize( numRows )
	int cumulativeXP = 0
	for ( int levelIndex = 0; levelIndex < numRows; levelIndex++ )
	{
		int xpToCompleteLevel = GetDataTableInt( accountXPDataTable, levelIndex, GetDataTableColumnByName( accountXPDataTable, "xpPerLevel" ) )

		SetXPForLevel( levelIndex + 1, cumulativeXP )
		//

		cumulativeXP += xpToCompleteLevel
		file.totalXPToCompleteLevel[levelIndex] = cumulativeXP
		file.xpForBonusLevels = xpToCompleteLevel
	}

	#if(false)



#endif

	InitXPEvents()
}


#if CLIENT || UI 
int function GetPlayerAccountXPProgress( EHI playerEHI )
{
	#if CLIENT || UI 
		Assert( playerEHI == LocalClientEHI() )
	#endif

	#if(DEV)
		if ( DEV_ShouldIgnorePersistence() )
			return 0
	#endif

	return FromEHI( playerEHI ).GetPersistentVarAsInt( "xp" )
}

int function GetPlayerAccountXPPreviousProgress( EHI playerEHI )
{
	#if CLIENT || UI 
		Assert( playerEHI == LocalClientEHI() )
	#endif

	#if(DEV)
		if ( DEV_ShouldIgnorePersistence() )
			return 0
	#endif

	return FromEHI( playerEHI ).GetPersistentVarAsInt( "previousXP" )
}
#endif


#if(false)










#endif

#if(false)


//
















//






#endif

int function GetNextAccountLevel( entity player )
{
	int currentXP    = GetPlayerAccountXPProgress( ToEHI( player ) )
	int currentLevel = GetAccountLevelForXP( currentXP )

	return currentLevel + 1
}


int function GetTotalXPToCompleteAccountLevel( int levelIndex )
{
	Assert( levelIndex >= -1 )
	if ( levelIndex == -1 )
		return 0

	if ( levelIndex < file.totalXPToCompleteLevel.len() )
		return file.totalXPToCompleteLevel[levelIndex]

	int numBonusLevels = 1 + (levelIndex - file.totalXPToCompleteLevel.len())
	return file.totalXPToCompleteLevel[file.totalXPToCompleteLevel.len() - 1] + (numBonusLevels * file.xpForBonusLevels)
}



int function GetAccountLevelForXP( int xp )
{
	Assert( xp >= 0, "XP " + xp + " too low" )
	int levelIndex = 0
	for ( ; levelIndex < file.totalXPToCompleteLevel.len(); levelIndex ++ )
	{
		if ( xp < file.totalXPToCompleteLevel[levelIndex] )
			return levelIndex
	}

	int bonusXP = xp - file.totalXPToCompleteLevel[file.totalXPToCompleteLevel.len() - 1]
	return int( levelIndex + ceil( bonusXP / file.xpForBonusLevels ) )
}


int function GetPlayerAccountLevel( entity player )
{
	return GetAccountLevelForXP( GetPlayerAccountXPProgress( ToEHI( player ) ) )
}


string function GetPlayerAccountDisplayLevel( entity player )
{
	int levelIndex = GetPlayerAccountLevel( player  )

	return string( minint( levelIndex + 1, 100 ) )
}


string function GetAccountDisplayLevel( int levelIndex )
{
	if ( levelIndex > 99 )
		return ""

	return string( levelIndex + 1 )
}

asset function GetAccountDisplayBadge( int levelIndex )
{
	asset badgeImage
	int adjustedLevel = levelIndex + 1
	if ( adjustedLevel < 5 )
		badgeImage = $"rui/gladiator_cards/badges/account_t1"
	else if ( adjustedLevel < 10 )
		badgeImage = $"rui/gladiator_cards/badges/account_t2"
	else if ( adjustedLevel < 15 )
		badgeImage = $"rui/gladiator_cards/badges/account_t3"
	else if ( adjustedLevel < 20 )
		badgeImage = $"rui/gladiator_cards/badges/account_t4"
	else if ( adjustedLevel < 25 )
		badgeImage = $"rui/gladiator_cards/badges/account_t5"
	else if ( adjustedLevel < 30 )
		badgeImage = $"rui/gladiator_cards/badges/account_t6"
	else if ( adjustedLevel < 35 )
		badgeImage = $"rui/gladiator_cards/badges/account_t7"
	else if ( adjustedLevel < 40 )
		badgeImage = $"rui/gladiator_cards/badges/account_t8"
	else if ( adjustedLevel < 45 )
		badgeImage = $"rui/gladiator_cards/badges/account_t9"
	else if ( adjustedLevel < 50 )
		badgeImage = $"rui/gladiator_cards/badges/account_t10"
	else if ( adjustedLevel < 55 )
		badgeImage = $"rui/gladiator_cards/badges/account_t11"
	else if ( adjustedLevel < 60 )
		badgeImage = $"rui/gladiator_cards/badges/account_t12"
	else if ( adjustedLevel < 65 )
		badgeImage = $"rui/gladiator_cards/badges/account_t13"
	else if ( adjustedLevel < 70 )
		badgeImage = $"rui/gladiator_cards/badges/account_t14"
	else if ( adjustedLevel < 75 )
		badgeImage = $"rui/gladiator_cards/badges/account_t15"
	else if ( adjustedLevel < 80 )
		badgeImage = $"rui/gladiator_cards/badges/account_t16"
	else if ( adjustedLevel < 85 )
		badgeImage = $"rui/gladiator_cards/badges/account_t17"
	else if ( adjustedLevel < 90 )
		badgeImage = $"rui/gladiator_cards/badges/account_t18"
	else if ( adjustedLevel < 95 )
		badgeImage = $"rui/gladiator_cards/badges/account_t19"
	else if ( adjustedLevel < 100 )
		badgeImage = $"rui/gladiator_cards/badges/account_t20"
	else
		badgeImage = $"rui/gladiator_cards/badges/account_t21"

	return badgeImage
}


#if(false)































//































#endif //

array<RewardData> function GetRewardsForAccountLevel( int levelIndex )
{
	var accountXPDataTable = GetDataTable( $"datatable/progression_account.rpak" )
	return GetRewardsFromDataTable( accountXPDataTable, levelIndex )
}


array<RewardData> function GetRewardsFromDataTable( var dataTable, int levelIndex )
{
	int numRows      = GetDatatableRowCount( dataTable )
	int row          = minint( levelIndex, numRows - 1 )
	asset itemAsset1 = GetDataTableAsset( dataTable, row, GetDataTableColumnByName( dataTable, "reward1" ) )
	asset itemAsset2 = GetDataTableAsset( dataTable, row, GetDataTableColumnByName( dataTable, "reward2" ) )
	int quantity1    = GetDataTableInt( dataTable, row, GetDataTableColumnByName( dataTable, "reward1qty" ) )
	int quantity2    = GetDataTableInt( dataTable, row, GetDataTableColumnByName( dataTable, "reward2qty" ) )

	array<RewardData> rewards = []

	if ( IsValidItemFlavorSettingsAsset( itemAsset1 ) )
	{
		RewardData reward
		reward.item = GetItemFlavorByAsset( itemAsset1 )
		reward.quantity = quantity1
		rewards.append( reward )
	}
	else if ( itemAsset1 != $"" )
	{
		Warning( "Not awarding item because the settings asset specified is not valid! " + string(itemAsset1) )
	}

	if ( IsValidItemFlavorSettingsAsset( itemAsset2 ) )
	{
		RewardData reward
		reward.item = GetItemFlavorByAsset( itemAsset2 )
		reward.quantity = quantity2
		rewards.append( reward )
	}
	else if ( itemAsset2 != $"" )
	{
		Warning( "Not awarding item because the settings asset specified is not valid! " + string(itemAsset2) )
	}

	return rewards
}


#if(false)












#endif


void function InitXPEvents()
{
	printt( "InitXPEvents" )
	InitXpEventTypeData( XP_TYPE.SURVIVAL_DURATION, "xp_survival_duration", "#EOG_XP_SURVIVED" )
	XpEventTypeData_SetCountDisplay( XP_TYPE.SURVIVAL_DURATION, eNumericDisplayType.TIME_SECONDS_SHORT )
	XpEventTypeData_SetDisplayEmpty( XP_TYPE.SURVIVAL_DURATION, true )

	InitXpEventTypeData( XP_TYPE.KILL, "xp_kill", "#EOG_XP_KILLS" )
	XpEventTypeData_SetDisplayEmpty( XP_TYPE.KILL, true )

	InitXpEventTypeData( XP_TYPE.DAMAGE_DEALT, "xp_damage_dealt", "#EOG_XP_DAMAGE_DONE" )
	XpEventTypeData_SetCountDisplay( XP_TYPE.DAMAGE_DEALT, eNumericDisplayType.SHORT_INT )
	XpEventTypeData_SetDisplayEmpty( XP_TYPE.DAMAGE_DEALT, true )

	InitXpEventTypeData( XP_TYPE.DOWN, "xp_down", "#EOG_XP_DOWN_ENEMY" )
	//

	InitXpEventTypeData( XP_TYPE.RESPAWN_ALLY, "xp_respawn_ally", "#EOG_XP_RESPAWN_ALLY" )
	XpEventTypeData_SetDisplayEmpty( XP_TYPE.RESPAWN_ALLY, true )

	InitXpEventTypeData( XP_TYPE.REVIVE_ALLY, "xp_revive_ally", "#EOG_XP_REVIVE_ALLY" )
	XpEventTypeData_SetDisplayEmpty( XP_TYPE.REVIVE_ALLY, true )

	InitXpEventTypeData( XP_TYPE.BONUS_CHAMPION, "xp_champion", "#EOG_XP_CHAMPION" )

	InitXpEventTypeData( XP_TYPE.KILL_CHAMPION_MEMBER, "xp_kill_champion", "#EOG_XP_KILLED_CHAMPION" )
	XpEventTypeData_SetDisplayEmpty( XP_TYPE.KILL_CHAMPION_MEMBER, true )

	InitXpEventTypeData( XP_TYPE.KILL_LEADER, "xp_kill_leader", "#EOG_XP_KILL_LEADER" )
	XpEventTypeData_SetDisplayEmpty( XP_TYPE.KILL_LEADER, true )

	InitXpEventTypeData( XP_TYPE.BONUS_FIRST_KILL, "xp_first_kill", "#EOG_XP_FIRST_KILL" )

	InitXpEventTypeData( XP_TYPE.BONUS_FIRST_KILL_AS, "xp_first_kill_as", "#EOG_XP_FIRST_KILL_AS" )
	XpEventTypeData_SetCharacterSpecific( XP_TYPE.BONUS_FIRST_KILL_AS, true )

	InitXpEventTypeData( XP_TYPE.BONUS_RESTED_AS, "xp_rested_as", "#EOG_XP_RESTED_AS" )
	XpEventTypeData_SetDisplayEmpty( XP_TYPE.BONUS_RESTED_AS, true )
	XpEventTypeData_SetCharacterSpecific( XP_TYPE.BONUS_RESTED_AS, true )

	InitXpEventTypeData( XP_TYPE.BONUS_FIRST_GAME, "xp_first_game", "#EOG_XP_FIRST_GAME" )

	InitXpEventTypeData( XP_TYPE.BONUS_FRIEND, "xp_friend", "#EOG_XP_PREMADE_SQUAD" )
	XpEventTypeData_SetDisplayEmpty( XP_TYPE.BONUS_FRIEND, true )

	InitXpEventTypeData( XP_TYPE.BONUS_FRIEND_BOOST, "xp_friend_boost", "#EOG_XP_PREMADE_SQUAD", 0.0 )
	XpEventTypeData_SetDisplayEmpty( XP_TYPE.BONUS_FRIEND_BOOST, true )
	XpEventTypeData_SetCountDisplay( XP_TYPE.BONUS_FRIEND_BOOST, eNumericDisplayType.SHORT_INT )

	InitXpEventTypeData( XP_TYPE.WIN_MATCH, "xp_win_match", "#EOG_XP_WON" )

	InitXpEventTypeData( XP_TYPE.TOP_THREE, "xp_top_three", "#EOG_XP_TOP3" )

	InitXpEventTypeData( XP_TYPE.TOTAL_MATCH, "xp_total_match", "#EOG_XP_TOTAL_MATCH" )
}


void function InitXpEventTypeData( int xpType, string playlistVar, string displayString, float defaultFrac = 1.0 )
{
	file.xpEventTypeData[xpType]._playlistVarName = playlistVar
	file.xpEventTypeData[xpType].displayString = displayString
	file.xpEventTypeData[xpType].xpAmount = GetCurrentPlaylistVarFloat( playlistVar + "_amount", 0 )
	file.xpEventTypeData[xpType].xpFrac = GetCurrentPlaylistVarFloat( playlistVar + "_frac", defaultFrac )
	file.xpEventTypeData[xpType].battlePassOnly = GetCurrentPlaylistVarInt( playlistVar + "_bp_only", 0 ) != 0

	Assert( file.xpEventTypeData[xpType].xpAmount > -1 )
}


void function XpEventTypeData_SetDisplayEmpty( int xpType, bool state )
{
	file.xpEventTypeData[xpType].displayEmpty = state
}


void function XpEventTypeData_SetCountDisplay( int xpType, int displayType )
{
	file.xpEventTypeData[xpType].countDisplayType = displayType
}


void function XpEventTypeData_SetCharacterSpecific( int xpType, bool state )
{
	file.xpEventTypeData[xpType].characterSpecific = state
}


float function XpEventTypeData_GetAmount( int xpType )
{
	return file.xpEventTypeData[xpType].xpAmount
}


float function XpEventTypeData_GetFrac( int xpType )
{
	return file.xpEventTypeData[xpType].xpFrac
}


float function XpEventTypeData_GetBattlePassFrac( int xpType )
{
	return file.xpEventTypeData[xpType].battlePassFrac
}


bool function XpEventTypeData_BattlePassOnly( int xpType )
{
	return file.xpEventTypeData[xpType].battlePassOnly
}


bool function XpEventTypeData_IsMultiplyer( int xpType )
{
	return xpType == XP_TYPE.BONUS_FRIEND || xpType == XP_TYPE.BONUS_FRIEND_BOOST
	//
}


int function GetXPEventCount( entity player, int xpType )
{
	return player.GetPersistentVarAsInt( "xp_count[" + xpType + "]" )
}


int function GetXPEventValue( entity player, int xpType )
{
	return player.GetPersistentVarAsInt( "xp_match[" + xpType + "]" )
}

#if(UI)

string function GetXPEventNameDisplay( entity player, int xpType )
{
	int count = XpEventTypeData_BattlePassOnly( xpType ) ? GetBattlePassXPEventCount( player, xpType ) : GetXPEventCount( player, xpType )

	XPEventData eventData = file.xpEventTypeData[xpType]
	if ( eventData.characterSpecific )
	{
		int characterPDefEnumIndex = player.GetPersistentVarAsInt( "characterForXP" ) //
		Assert( characterPDefEnumIndex >= 0 && characterPDefEnumIndex < PersistenceGetEnumCount( "eCharacterFlavor" ) )
		SettingsAssetGUID characterGUID = ConvertItemFlavorGUIDStringToGUID( PersistenceGetEnumItemNameForIndex( "eCharacterFlavor", characterPDefEnumIndex ) )
		string characterName
		if ( !IsValidItemFlavorGUID( characterGUID ) )
		{
			Warning( "Cannot display post-game summary because character \"" + characterGUID + "\" is not registered right now." )
			characterName = characterGUID + " not registered"
		}
		else
		{
			ItemFlavor character = GetItemFlavorByGUID( characterGUID )
			characterName = ItemFlavor_GetLongName( character )
		}

		return Localize( eventData.displayString, Localize( characterName ), GetFormattedIntByType( count, eventData.countDisplayType ) )
	}
	else
	{
		return Localize( eventData.displayString, GetFormattedIntByType( count, eventData.countDisplayType ) )
	}

	unreachable
}


bool function XpEventTypeData_DisplayEmpty( int xpType )
{
	return file.xpEventTypeData[xpType].displayEmpty
}

string function GetXPEventValueDisplay( entity player, int xpType )
{
	int eventValue = GetXPEventValue( player, xpType )
	if ( eventValue == 0 )
		return Localize( "#EOG_XP_NONE", GetXPEventValue( player, xpType ) )
	else
		return Localize( "#EOG_XP_PLUSNUMBER", GetXPEventValue( player, xpType ) )

	unreachable
}

#endif

#if(UI)
asset function GetImageForReward( RewardData reward )
{
	asset icon = $""
	if ( ItemFlavor_GetNetworkIndex_DEPRECATED( reward.item ) > 0 )
	{
		if ( ItemFlavor_GetType( reward.item ) == eItemType.account_currency )
			icon = CurrencyFlavor_GetRewardIcon( reward.item )
		else
			icon = ItemFlavor_GetIcon( reward.item )
	}

	return icon
}
#endif

#if(UI)
string function GetStringForReward( RewardData reward )
{
	if ( reward.quantity > 1 )
		return ShortenNumber( string( reward.quantity ) )

	return ItemFlavor_GetShortName( reward.item )
}
#endif
