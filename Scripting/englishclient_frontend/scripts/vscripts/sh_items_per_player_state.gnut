global function ShItemPerPlayerState_LevelInit

#if(false)

#endif

#if(CLIENT)
global function ServerToClient_OnItemFlavorBecameNew
#endif

#if(UI)
global function Newness_IsItemFlavorNew
global function Newness_IfNecessaryMarkItemFlavorAsNoLongerNewAndInformServer
global function Newness_ReverseQuery_Setup
global function Newness_ReverseQuery_GetNewCount
global function Newness_AddCallbackAndCallNow_OnRerverseQueryUpdated
global function Newness_RemoveCallback_OnRerverseQueryUpdated

global function ClientToUI_OnItemFlavorBecameNew
#endif

#if CLIENT || UI 
global function Newness_TEMP_MarkItemAsNewAndInformServer
#endif

#if UI && DEV 
global function DEV_Newness_ReverseQueryTest
#endif


const int NUM_NEW_ITEM_FLAVORS_TO_PERSIST = 60


typedef OnNewnessReverseQueryUpdatedCallbackType void functionref( int newCount, var optionalArg )
global struct OnNewnessReverseQueryUpdatedCallbackStruct
{
	OnNewnessReverseQueryUpdatedCallbackType cb
	var                                      optionalArg = null
}

global struct Newness_ReverseQuery
{
	bool isSetUp = false

	array<Newness_ReverseQuery> dependentsList

	int newCount

	array<OnNewnessReverseQueryUpdatedCallbackStruct> onChangeCallbackList
}



//
//
//
//
//
struct FileStruct_LifetimeLevel
{
	#if(UI)
		table<ItemFlavor, bool>                         newItemFlavorSet
		table<ItemFlavor, array<Newness_ReverseQuery> > itemFlavorReverseQueryShallowDependentListMap
	#endif
}
FileStruct_LifetimeLevel& fileLevel



//
//
//
//
//
void function ShItemPerPlayerState_LevelInit()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	#if(false)





#endif

	#if(UI)
		AddCallback_OnPersistentDataReady( OnPersistentDataReady )
	#endif

	#if(CLIENT)
		Remote_RegisterClientFunction( "ServerToClient_OnItemFlavorBecameNew", "int", -INT_MAX, INT_MAX )
	#endif
}



//
//
//
//
//
#if(false)




//







//


















//





















#endif


#if(UI)
bool function Newness_IsItemFlavorNew( ItemFlavor flavor )
{
	Assert( IsItemFlavorStructValid( flavor, eValidation.ASSERT ) )

	return (flavor in fileLevel.newItemFlavorSet)
}
#endif


#if(UI)
void function Newness_IfNecessaryMarkItemFlavorAsNoLongerNewAndInformServer( ItemFlavor flavor )
{
	Assert( IsItemFlavorStructValid( flavor, eValidation.ASSERT ) )

	//
	if ( !(flavor in fileLevel.newItemFlavorSet) )
		return

	delete fileLevel.newItemFlavorSet[flavor]

	if ( flavor in fileLevel.itemFlavorReverseQueryShallowDependentListMap )
	{
		array<Newness_ReverseQuery> shallowDependentList = fileLevel.itemFlavorReverseQueryShallowDependentListMap[flavor]
		array<Newness_ReverseQuery> affectedQueriesList  = []
		UpdateReverseQueryDependents( shallowDependentList, -1, affectedQueriesList )

		foreach ( Newness_ReverseQuery affectedQuery in affectedQueriesList )
		{
			foreach ( OnNewnessReverseQueryUpdatedCallbackStruct cbs in affectedQuery.onChangeCallbackList )
				cbs.cb( affectedQuery.newCount, cbs.optionalArg )
		}
	}

	SettingsAssetGUID guid = ItemFlavor_GetGUID( flavor )
	ClientCommand( format( "newness_clear %d", guid ) )
}
#endif


#if CLIENT || UI 
void function Newness_TEMP_MarkItemAsNewAndInformServer( ItemFlavor flavor )
{
	Assert( IsItemFlavorStructValid( flavor, eValidation.ASSERT ) )

	//
	SettingsAssetGUID guid = ItemFlavor_GetGUID( flavor )
	#if(CLIENT)
		GetLocalClientPlayer().ClientCommand( format( "temp_newness_mark %d", guid ) )
	#elseif(UI)
		ClientCommand( format( "temp_newness_mark %d", guid ) )
	#endif
}
#endif


#if(UI)
int function Newness_ReverseQuery_GetNewCount( Newness_ReverseQuery rq )
{
	return rq.newCount
}
#endif


#if(UI)
void function Newness_ReverseQuery_Setup(
		Newness_ReverseQuery rq,
		array<Newness_ReverseQuery> queryDependecies,
		array<ItemFlavor> itemFlavDependencies )
{
	Assert( !rq.isSetUp, "Called Newness_ReverseQuery_Setup twice on 1 Newness_ReverseQuery struct" )
	rq.isSetUp = true
	rq.newCount = 0

	foreach ( Newness_ReverseQuery dependency in queryDependecies )
	{
		dependency.dependentsList.append( rq )
		Assert( dependency.dependentsList.len() < 10, "probably leaking Newness_ReverseQuery structs" )
		rq.newCount += dependency.newCount
	}

	foreach ( ItemFlavor dependency in itemFlavDependencies )
	{
		array<Newness_ReverseQuery> itemFlavorShallowDependentList
		if ( dependency in fileLevel.itemFlavorReverseQueryShallowDependentListMap )
			itemFlavorShallowDependentList = fileLevel.itemFlavorReverseQueryShallowDependentListMap[dependency]
		else
			fileLevel.itemFlavorReverseQueryShallowDependentListMap[dependency] <- itemFlavorShallowDependentList

		itemFlavorShallowDependentList.append( rq )
		//

		if ( dependency in fileLevel.newItemFlavorSet )
			rq.newCount += 1
	}

	foreach ( OnNewnessReverseQueryUpdatedCallbackStruct cbs in rq.onChangeCallbackList )
	{
		cbs.cb( rq.newCount, cbs.optionalArg )
	}
}
#endif


#if(UI)
void function Newness_AddCallbackAndCallNow_OnRerverseQueryUpdated( Newness_ReverseQuery rq, OnNewnessReverseQueryUpdatedCallbackType cb, var optionalArg = null )
{
	#if(DEV)
		int foundIndex = -1
		foreach ( int index, OnNewnessReverseQueryUpdatedCallbackStruct cbs in rq.onChangeCallbackList )
		{
			if ( cbs.cb == cb && cbs.optionalArg == optionalArg )
			{
				foundIndex = index
				break
			}
		}
		Assert( foundIndex == -1, "Tried to add a callback that was already added" )
	#endif
	OnNewnessReverseQueryUpdatedCallbackStruct cbs
	cbs.cb = cb
	cbs.optionalArg = optionalArg
	rq.onChangeCallbackList.append( cbs )
	Assert( rq.onChangeCallbackList.len() < 10, "probably leaking Newness_ReverseQuery callbacks by calling AddCallback but not RemoveCallback" )
	cb( rq.newCount, optionalArg )
}
#endif


#if(UI)
void function Newness_RemoveCallback_OnRerverseQueryUpdated( Newness_ReverseQuery rq, OnNewnessReverseQueryUpdatedCallbackType cb, var optionalArg = null )
{
	int foundIndex = -1
	foreach ( int index, OnNewnessReverseQueryUpdatedCallbackStruct cbs in rq.onChangeCallbackList )
	{
		if ( cbs.cb == cb && cbs.optionalArg == optionalArg )
		{
			foundIndex = index
			break
		}
	}
	Assert( foundIndex != -1, "Tried to remove a callback that was not added" )
	rq.onChangeCallbackList.fastremove( foundIndex )
}
#endif



//
//
//
//
//
#if(false)








//



















#endif


#if(false)


//







//











#endif


#if(UI)
array<Newness_ReverseQuery> function OnItemFlavorBecameNew( ItemFlavor flavor, bool shouldRunCallbacks )
{
	//
	if ( flavor in fileLevel.newItemFlavorSet )
	{
		//
		return []
	}

	fileLevel.newItemFlavorSet[flavor] <- true

	if ( flavor in fileLevel.itemFlavorReverseQueryShallowDependentListMap )
	{
		array<Newness_ReverseQuery> shallowDependentList = fileLevel.itemFlavorReverseQueryShallowDependentListMap[flavor]
		array<Newness_ReverseQuery> affectedQueriesList  = []
		UpdateReverseQueryDependents( shallowDependentList, 1, affectedQueriesList )

		if ( shouldRunCallbacks )
		{
			foreach ( Newness_ReverseQuery affectedQuery in affectedQueriesList )
			{
				foreach ( OnNewnessReverseQueryUpdatedCallbackStruct cbs in affectedQuery.onChangeCallbackList )
					cbs.cb( affectedQuery.newCount, cbs.optionalArg )
			}
		}

		return affectedQueriesList
	}

	return []
}
#endif


#if(UI)
void function UpdateReverseQueryDependents( array<Newness_ReverseQuery> dependentList, int delta, array<Newness_ReverseQuery> affectedQueriesList )
{
	foreach ( Newness_ReverseQuery dependent in dependentList )
	{
		dependent.newCount += delta

		affectedQueriesList.append( dependent )

		UpdateReverseQueryDependents( dependent.dependentsList, delta, affectedQueriesList )
	}
}
#endif


#if(UI)
void function OnPersistentDataReady( entity _unused )
{
	#if(DEV)
		if ( DEV_ShouldIgnorePersistence() )
			return
	#endif

	array<Newness_ReverseQuery> affectedQueriesList      = []
	table<Newness_ReverseQuery, bool> affectedQueriesSet = {}

	int sparseListSize = PersistenceGetArrayCount( "newItemFlavorSparseList" )
	for ( int sparseListSlotIndex = 0; sparseListSlotIndex < sparseListSize; sparseListSlotIndex++ )
	{
		SettingsAssetGUID guid = GetPersistentVarAsInt( "newItemFlavorSparseList[" + sparseListSlotIndex + "]" )
		if ( guid == 0 )
			continue

		if ( !IsValidItemFlavorGUID( guid ) )
		{
			Warning( "Player had invalid item flavor GUID in their persistent sparse newness set: " + guid )
			continue
		}

		ItemFlavor flav                                              = GetItemFlavorByGUID( guid )
		array<Newness_ReverseQuery> affectedQueriesListForThisFlavor = []
		affectedQueriesListForThisFlavor = OnItemFlavorBecameNew( flav, false )
		foreach ( Newness_ReverseQuery affectedQuery in affectedQueriesListForThisFlavor )
		{
			if ( (affectedQuery in affectedQueriesSet) )
				continue

			affectedQueriesList.append( affectedQuery )
			affectedQueriesSet[affectedQuery] <- true
		}
	}

	foreach ( Newness_ReverseQuery affectedQuery in affectedQueriesList )
	{
		foreach ( OnNewnessReverseQueryUpdatedCallbackStruct cbs in affectedQuery.onChangeCallbackList )
			cbs.cb( affectedQuery.newCount, cbs.optionalArg )
	}
}
#endif


#if(CLIENT)
void function ServerToClient_OnItemFlavorBecameNew( int guid )
{
	RunUIScript( "ClientToUI_OnItemFlavorBecameNew", guid )
}
#endif


#if(UI)
void function ClientToUI_OnItemFlavorBecameNew( int guid )
{
	ItemFlavor flavor = GetItemFlavorByGUID( guid )
	OnItemFlavorBecameNew( flavor, true )
}
#endif


#if(false)






#endif


#if UI && DEV 
void function DEV_Newness_ReverseQueryTest()
{
	Newness_ReverseQuery charactersRQ
	Newness_ReverseQuery_Setup( charactersRQ, [], GetAllCharacters() )
	Newness_ReverseQuery weaponSkinsRQ
	Newness_ReverseQuery_Setup( weaponSkinsRQ, [], GetAllItemFlavorsOfType( eItemType.weapon_skin ) )
	Newness_ReverseQuery combinedRQ
	Newness_ReverseQuery_Setup( combinedRQ, [charactersRQ, weaponSkinsRQ], [] )
	Newness_ReverseQuery superCombinedRQ
	Newness_ReverseQuery_Setup( superCombinedRQ, [combinedRQ], [ GetItemFlavorByHumanReadableRef( "character_skin_lifeline_common_05" ) ] )

	Newness_AddCallbackAndCallNow_OnRerverseQueryUpdated( charactersRQ, void function( int newCount, var unused ) {
		printf( "NEWNESS TEST: charactersRQ    = %d", newCount )
	} )
	Newness_AddCallbackAndCallNow_OnRerverseQueryUpdated( weaponSkinsRQ, void function( int newCount, var unused ) {
		printf( "NEWNESS TEST: weaponSkinsRQ   = %d", newCount )
	} )
	Newness_AddCallbackAndCallNow_OnRerverseQueryUpdated( combinedRQ, void function( int newCount, var unused ) {
		printf( "NEWNESS TEST: combinedRQ      = %d", newCount )
	} )
	Newness_AddCallbackAndCallNow_OnRerverseQueryUpdated( superCombinedRQ, void function( int newCount, var unused ) {
		printf( "NEWNESS TEST: superCombinedRQ = %d", newCount )
	} )
}
#endif


