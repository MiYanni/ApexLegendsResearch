global function Sh_RespawnBeacon_Init

global function RespawnBeacons_RegisterNetworking

global function GetRespawnStyle

#if(false)







#endif

#if(CLIENT)
global function ServerCallback_RespawnPodStarted
global function ServerCallback_DisplayWaitingForRespawn
global function ServerCallback_RespawnDNAHint

global function ServerCallback_RespawnBeaconStart
global function ServerCallback_RespawnBeaconStop
#endif

global const string RESPAWN_CHAMBER_TARGETNAME = "respawn_chamber"
global const string RESPAWN_DNA_TARGETNAME = "respawn_dna"
global const string RESPAWN_DROPSHIP_TARGETNAME = "respawn_dropship"

const float RESPAWN_BEACON_HOLO_EFFECT_HEIGHT = 75.0

global const float RESPAWN_DNA_LIFETIME = 90.0
const float RESPAWN_DROP_TIME = 10.0
const asset RESPAWN_BEACON_MODEL = $"mdl/dev/empty_model.rmdl"
global const float RESPAWN_BEACON_RESPAWN_TIME = 5.0

global const string RESPAWN_BEACON_SUCCESS_SOUND = "Survival_RespawnChamber_Activate"
global const string RESPAWN_BEACON_LOOP_SOUND = "Survival_RespawnBeacon_Linking_loop"

const asset RESPAWN_DROPSHIP_MODEL = $"mdl/vehicle/goblin_dropship/goblin_dropship.rmdl"

global const asset RESPAWN_BEACON_EMITTER_FX = $"P_chamber_proj_holo"
global const asset RESPAWN_BEACON_BEAM_FX = $"P_chamber_beam"
global const asset RESPAWN_BEACON_SCAN_FX = $"P_chamber_celebration"

global const asset RESPAWN_BEACON_ICON = $"rui/hud/gametype_icons/survival/dna_station"
global const asset RESPAWN_BEACON_ICON_SMALL = $"rui/hud/gametype_icons/survival/dna_station_small"
const string SOUND_HOLOGRAM_LOOP = "Survival_Emit_RespawnChamber"

const float RESPAWN_CHAMBER_ICON_FADE_DIST_NEAR = 300.0
const float RESPAWN_CHAMBER_ICON_FADE_DIST_FAR = 1000.0

global enum eRespawnStatus
{
	NONE,
	WAITING_FOR_PICKUP,
	WAITING_FOR_DELIVERY,
	WAITING_FOR_DROPPOD,
	PICKUP_DESTROYED,
	SQUAD_ELIMINATED
}

global enum eRespawnStyle
{
	NONE,
	DEPRECATED,
	RESPAWN_CHAMBERS,
}

global struct dropshipAnimData
{
	string idleAnim
	string idlePOVAnim
	string jumpAnim
	string jumpPOVAnim
	string attachment = "origin"
	bool hideProxy = true
	void functionref( entity ) viewConeFunc
	float yawAngle
	string firstPersonJumpOutSound //
}

struct
{
	array<dropshipAnimData> dropshipAnimDataList
	array<entity> allStations

	#if(CLIENT)
		array<var> respawnChamberRuis
		table<entity, int> chamberToBeamFX
	#endif

	#if(false)


#endif
}
file

void function Sh_RespawnBeacon_Init()
{
	#if(false)

#endif

	PrecacheModel( RESPAWN_DROPSHIP_MODEL )
	AddCallback_EntitiesDidLoad( RespawnBeacon_EntitiesdidLoad )

	if ( GetRespawnStyle() == eRespawnStyle.NONE )
		return

	PrecacheModel( RESPAWN_BEACON_MODEL )
	PrecacheParticleSystem( RESPAWN_BEACON_EMITTER_FX )
	PrecacheParticleSystem( RESPAWN_BEACON_BEAM_FX )
	PrecacheParticleSystem( RESPAWN_BEACON_SCAN_FX )


	#if(CLIENT)
		RegisterSignal( "ReviveRuiThread" )
		RegisterSignal( "SpectatorShowRespawnRui" )

		AddCreateCallback( "prop_dynamic", RespawnEntitySpawned )
		AddCreateCallback( "prop_script", RespawnEntitySpawned )

		AddCreateCallback( PLAYER_WAYPOINT_CLASSNAME, PlayerWaypoint_CreateCallback )
		AddDestroyCallback( PLAYER_WAYPOINT_CLASSNAME, PlayerWaypoint_DestroyCallback )

		AddCallback_OnClientScriptInit( OverrideMinimapPackages )

		RegisterButtonPressedCallback( KEY_SPACE, TryPingRespawnItem )
		RegisterButtonPressedCallback( BUTTON_A, TryPingRespawnItem )

		SetMapFeatureItem( 1000, "#RESPAWN_BEACON", "#RESPAWN_BEACON_DESC", RESPAWN_BEACON_ICON )
	#elseif(false)







//







































//






#endif
}

void function RespawnBeacons_RegisterNetworking()
{
	RegisterNetworkedVariable( "respawnDNATimeout", SNDC_PLAYER_GLOBAL, SNVT_TIME, -1 )
	RegisterNetworkedVariable( "respawnStatus", SNDC_PLAYER_GLOBAL, SNVT_INT, 0 )

	#if(CLIENT)
	RegisterNetworkedVariableChangeCallback_int( "respawnStatus", RespawnStatusChanged )
	#endif
}

void function RespawnBeacon_EntitiesdidLoad()
{
	AddDropshipFlightAnalysis( RESPAWN_DROPSHIP_MODEL, "dropship_classic_mp_flyin", AnaylsisFuncDropshipTestJumpout, "dropship_deploy" )
}

#if(CLIENT)
void function OverrideMinimapPackages( entity player )
{
	if ( GetRespawnStyle() == eRespawnStyle.RESPAWN_CHAMBERS )
	{
		RegisterMinimapPackage( "prop_script", 	eMinimapObject_prop_script.RESPAWN_CHAMBER, 		MINIMAP_OBJECT_RUI, 		MinimapPackage_RespawnChamber, 		FULLMAP_OBJECT_RUI, 		MinimapPackage_RespawnChamber )
		RegisterMinimapPackage( "prop_script", 	eMinimapObject_prop_script.RESPAWN_DNA, 			$"ui/minimap_square_respawn_dna_pickup.rpak", MinimapPackage_RespawnDNA, 		$"ui/in_world_minimap_respawn_dna.rpak", 		MinimapPackage_RespawnDNA )
	}
}

void function RespawnStatusChanged( entity player, int old, int new, bool actuallyChanged )
{
	if ( player == GetLocalClientPlayer() )
		UpdateRespawnStatus( new )

	if ( new == eRespawnStatus.WAITING_FOR_DROPPOD )
		FlashGameWindow()

	entity viewPlayer = GetLocalViewPlayer()

	if ( !IsValid( viewPlayer ) )
		viewPlayer = GetLocalClientPlayer()

	if ( !IsValid( viewPlayer ) )
		return

	bool waitingToBeRespawned = TeammatesWaitingToBeRespawned( viewPlayer.GetTeam() )

	foreach ( rui in file.respawnChamberRuis )
	{
		UpdateRespawnChamberRuis( rui, waitingToBeRespawned )
	}

	ArrayRemoveInvalid( file.allStations )

	int fxId = GetParticleSystemIndex( RESPAWN_BEACON_BEAM_FX )

	foreach ( ent in file.allStations )
	{
		if ( waitingToBeRespawned )
		{
			if ( !EffectDoesExist( file.chamberToBeamFX[ ent ] ) )
			{
				file.chamberToBeamFX[ ent ] = StartParticleEffectOnEntityWithPos( ent, fxId, FX_PATTACH_POINT_FOLLOW_NOROTATE, ent.LookupAttachment( "FX_EMITTER" ), <0,0,0>, <0,0,0> )
			}
		}
		else
		{
			if ( EffectDoesExist( file.chamberToBeamFX[ ent ] ) )
			{
				EffectStop( file.chamberToBeamFX[ ent ], true, true )
			}

			file.chamberToBeamFX[ ent ] = -1
		}
	}
}

void function UpdateRespawnChamberRuis( var rui, bool waitingToBeRespawned )
{
	if ( waitingToBeRespawned )
	{
		RuiSetFloat( rui, "distanceFade", RESPAWN_CHAMBER_ICON_FADE_DIST_FAR )
		RuiSetBool( rui, "pinToEdge", true )
		RuiSetBool( rui, "showClampArrow", true )
	}
	else
	{
		RuiSetFloat( rui, "distanceFade", RESPAWN_CHAMBER_ICON_FADE_DIST_NEAR )
		RuiSetBool( rui, "pinToEdge", false )
		RuiSetBool( rui, "showClampArrow", false )
	}
}
#endif

void function RespawnEntitySpawned( entity ent )
{
	switch ( ent.GetTargetName() )
	{
		case RESPAWN_CHAMBER_TARGETNAME:
#if(CLIENT)
			AddEntityCallback_GetUseEntOverrideText( ent, RespawnChamber_TextOverride )
			var rui = AddOverheadIcon( ent, RESPAWN_BEACON_ICON, false, $"ui/overhead_icon_respawn_beacon.rpak" )
			RuiSetFloat2( rui, "iconSize", <80,80,0> )
			RuiSetFloat( rui, "distanceFade", RESPAWN_CHAMBER_ICON_FADE_DIST_NEAR )
			RuiSetBool( rui, "adsFade", true )
			RuiSetString( rui, "hint", "#RESPAWN_ALLCAPS" )

			thread ManageRespawnChamberData( ent, rui )

			if ( GetCurrentPlaylistVarBool( "enable_radar_on_respawn_beacons", true ) )
				thread AddRadarToRespawnStation( ent )
#endif

#if(false)









#endif

			file.allStations.append( ent )

			SetCallback_CanUseEntityCallback( ent, IsNotBusy )
			AddCallback_OnUseEntity( ent, RespawnChamberOnUse )
			break

#if(false)





#endif
			break
	}

}

#if(false)




















//










































































































#endif

/*

*/

bool function IsNotBusy( entity player, entity ent )
{
	if ( Bleedout_IsBleedingOut( player ) )
		return false

	if ( player.ContextAction_IsActive() )
		return false

	if ( !SURVIVAL_PlayerAllowedToPickup( player ) )
		return false

	if ( ent.e.isBusy )
		return false

	return true
}

#if(CLIENT)
void function ManageRespawnChamberData( entity ent, var rui )
{
	file.chamberToBeamFX[ ent ] <- -1
	file.respawnChamberRuis.append( rui )
	ent.EndSignal( "OnDestroy" )

	UpdateRespawnChamberRuis( rui, TeammatesWaitingToBeRespawned( GetLocalViewPlayer().GetTeam() ) )

	OnThreadEnd(
		function() : ( ent, rui )
		{
			if ( EffectDoesExist( file.chamberToBeamFX[ ent ] ) )
				EffectStop( file.chamberToBeamFX[ ent ], true, true )

			delete file.chamberToBeamFX[ ent ]

			file.respawnChamberRuis.fastremovebyvalue( rui )
		}
	)

	WaitForever()
}

void function AddRadarToRespawnStation( entity ent )
{
	vector fwd = AnglesToForward( ent.GetAngles() )
	vector up = AnglesToUp( ent.GetAngles() )
	vector rgt = AnglesToRight( ent.GetAngles() )
	vector offset = up*100
	vector angles = AnglesCompose( ent.GetAngles(), <0,0,-10> )

	ent.EndSignal( "OnDestroy" )

	entity fxHolder = CreateClientsideScriptMover( $"mdl/dev/empty_model.rmdl", ent.GetOrigin() + up*RESPAWN_BEACON_HOLO_EFFECT_HEIGHT, <-90,0,0> )

	array<int> fx
	fx.append( StartParticleEffectOnEntity( fxHolder, GetParticleSystemIndex( RESPAWN_BEACON_EMITTER_FX ), FX_PATTACH_ABSORIGIN_FOLLOW, -1 ) )
	EmitSoundOnEntity( fxHolder, SOUND_HOLOGRAM_LOOP )

	OnThreadEnd(
		function() : ( fx, fxHolder )
		{
			//
			foreach ( effect in fx )
			{
				EffectStop( effect, false, true )
			}
			fxHolder.Destroy()
		}
	)

	WaitForever()
}

void function MinimapPackage_RespawnDNA( entity ent, var rui )
{
	RuiSetImage( rui, "defaultIcon", $"" )
	RuiSetImage( rui, "clampedDefaultIcon", $"" )
	RuiSetBool( rui, "useTeamColor", false )
	RuiSetFloat2( rui, "iconScale", <1.0,60.0/120.0,0.0> * 2.0 )

	thread RespawnDNA_SetCharacterIcon( ent, rui, "defaultIcon" )
}

void function RespawnDNA_SetCharacterIcon( entity ent, var rui, string argName )
{
	ent.EndSignal( "OnDestroy" )

	entity owner = ent.GetOwner()
	if ( !IsValid( owner ) )
		return

	owner.EndSignal( "OnDestroy" )

	ItemFlavor character = LoadoutSlot_WaitForItemFlavor( ToEHI( owner ), Loadout_CharacterClass() )

	asset setFile = CharacterClass_GetSetFile( character )
	asset icon = GetGlobalSettingsAsset( setFile, "unitframe_icon" )

	RuiSetImage( rui, argName, icon )
}

void function MinimapPackage_RespawnChamber( entity ent, var rui )
{
	RuiSetImage( rui, "defaultIcon", RESPAWN_BEACON_ICON )
	RuiSetImage( rui, "smallIcon", RESPAWN_BEACON_ICON_SMALL )
	RuiSetBool( rui, "hasSmallIcon", true )
	RuiSetImage( rui, "clampedDefaultIcon", $"" )
	RuiSetBool( rui, "useTeamColor", false )
}

string function RespawnChamber_TextOverride( entity ent )
{
	entity player = GetLocalViewPlayer()
	int team = player.GetTeam()
	if ( GetPlayerArrayOfTeam( team ).len() == GetPlayerArrayOfTeam_Alive( team ).len() ||
			!TeammatesWaitingToBeRespawned( team ) )
	{
		//
		//
		return "#HINT_RESPAWN_NEED"
	}

	return "#HINT_RESPAWN_USE"
}

string function RespawnDNA_TextOverride( entity ent )
{
	if ( GetLocalViewPlayer().GetTeam() == ent.GetTeam() )
		return Localize( "#HINT_PICKUP_DNA_USE", ent.GetOwner().GetPlayerName() )

	return "#HINT_DESTROY_DNA_USE"
}
#endif


void function RespawnChamberOnUse( entity pickup, entity player, int pickupFlags )
{
	if ( !(pickupFlags & USE_INPUT_LONG ) )
		return

	if ( !TeammatesWaitingToBeRespawned( player.GetTeam() ) )
		return

	#if(CLIENT)
	HidePlayerHint( "#RESPAWN_AT_BEACONS_HINT" )
		#endif

	ExtendedUseSettings settings
	settings.successSound = RESPAWN_BEACON_SUCCESS_SOUND
	#if(CLIENT)
		settings.loopSound = RESPAWN_BEACON_LOOP_SOUND
		settings.displayRui = $"ui/health_use_progress.rpak"
		settings.displayRuiFunc = DisplayRuiForRespawnChamber
		settings.icon = $""
		settings.hint = "#HINT_RESPAWNING"
		settings.icon = RESPAWN_BEACON_ICON
	#elseif(false)






#endif
	settings.duration = RESPAWN_BEACON_RESPAWN_TIME
	settings.useInputFlag = IN_USE_LONG

	thread ExtendedUse( pickup, player, settings )
}

#if(CLIENT)
void function DisplayRuiForRespawnChamber( entity ent, entity player, var rui, ExtendedUseSettings settings )
{
	DisplayRuiForRespawnChamber_Internal( rui, settings.icon, Time(), Time() + settings.duration, settings.hint )
}

void function DisplayRuiForRespawnChamber_Internal( var rui, asset icon, float startTime, float endTime, string hint )
{
	RuiSetBool( rui, "isVisible", true )
	RuiSetImage( rui, "icon", icon )
	RuiSetGameTime( rui, "startTime", startTime )
	RuiSetGameTime( rui, "endTime", endTime )
	RuiSetString( rui, "hintKeyboardMouse", hint )
	RuiSetString( rui, "hintController", hint )
}
#endif

#if(false)













//
//




















#endif

/*

*/

bool function TeammatesWaitingToBeRespawned( int team )
{
	foreach ( player in GetPlayerArrayOfTeam( team ) )
	{
		if ( !IsAlive( player ) )
		{
			if ( player.GetPlayerNetInt( "respawnStatus" ) == eRespawnStatus.WAITING_FOR_DELIVERY )
				return true
		}
	}

	return false
}

#if(CLIENT)
string function RespawnBeacon_TextOverride( entity ent )
{
	entity player = GetLocalViewPlayer()
	entity owner = ent.GetOwner()

	if ( !IsValid( owner ) )
		return ""

	if ( !owner.IsPlayer() )
		return ""

	if ( ent.GetTeam() == player.GetTeam() )
		return Localize( "%use% Respawn " + owner.GetPlayerName() )

	return Localize( "%use% Destroy Respawn Beacon" )
}
#endif

int function GetRespawnStyle()
{
	return GetCurrentPlaylistVarInt( "survival_respawn_style", eRespawnStyle.RESPAWN_CHAMBERS )
}

#if(false)






#endif


#if(CLIENT)
void function ServerCallback_DisplayWaitingForRespawn( entity ent, float startTime, float endTime )
{
	thread DisplayWaitingForRespawnThread( ent, startTime, endTime )
}

void function DisplayWaitingForRespawnThread( entity ent, float startTime, float endTime )
{
	clGlobal.levelEnt.Signal( "ReviveRuiThread" )
	clGlobal.levelEnt.EndSignal( "SquadEliminated" )
	clGlobal.levelEnt.EndSignal( "ReviveRuiThread" )

	if ( !IsValid( ent ) )
		return

	ent.SetDoDestroyCallback( true )
	ent.EndSignal( "OnDestroy" )

	if ( Time() > endTime )
		return

	UpdateRespawnTime( startTime, endTime )

	OnThreadEnd(
		function() : ()
		{
			UpdateRespawnTime( RUI_BADGAMETIME, RUI_BADGAMETIME )
		}
	)

	wait endTime - Time()
}

void function DisplayWaitingForStationThread( int state )
{
	/*

























*/
}

void function ServerCallback_RespawnPodStarted( float endTime )
{
	thread ReviveRuiThread( endTime )
}

void function ReviveRuiThread( float endTime )
{
	clGlobal.levelEnt.Signal( "ReviveRuiThread" )
	clGlobal.levelEnt.EndSignal( "SquadEliminated" )

	UpdateRespawnTime( Time(), endTime )

	Chroma_RespawningInDropship()

	OnThreadEnd(
		function() : ()
		{
			UpdateRespawnTime( RUI_BADGAMETIME, RUI_BADGAMETIME )
			Chroma_RespawnComplete()
		}
	)

	wait ( endTime - Time() )
}

void function ServerCallback_RespawnDNAHint()
{
	AddPlayerHint( 10.0, 1.0, $"", "#RESPAWN_AT_BEACONS_HINT" )
}
#endif

#if(false)


























//
//
//
//
//
//
//









//





































































































//


//









































//






































//














































#endif


bool function AnaylsisFuncDropshipTestJumpout( FlightPath flightPath, vector origin, float yaw )
{
	vector angles = <0,yaw,0>
	vector forward = AnglesToForward( angles )
	vector right = AnglesToRight( angles )

	if ( !IsLegalFlightPath( flightPath, origin, forward, right, true ) )
		return false

	if ( !CanDeploy( flightPath, origin, angles, forward, right ) )
		return false

	return true
}

bool function CanDeploy( FlightPath flightPath, vector origin, vector angles, vector forward, vector right )
{
	Point deployPoint = GetPreviewPoint( flightPath )
	vector deployOrigin = GetOriginFromPoint( deployPoint, origin, forward, right )
	vector deployAngles = GetAnglesFromPoint( deployPoint, angles )

	//
	deployAngles.x = 0
	deployAngles.z = 0

	vector deployFwd = AnglesToForward( deployAngles )

	deployOrigin = deployOrigin - deployFwd*150 //

	TraceResults results = TraceHull( deployOrigin, deployOrigin - <0,0,1000>, <-300,-300,-300>, <300,300,300>, null, flightPath.traceMask, TRACE_COLLISION_GROUP_NONE )
	//
	//
	//

	if ( results.startSolid )
		return false

	if ( results.fraction < 1 )
		return false

	return true
}
#if(CLIENT)
void function TryPingRespawnItem( entity player )
{
	if ( !IsSpectating() )
		return

	entity viewPlayer = GetLocalViewPlayer()

	if ( player.GetPlayerNetInt( "respawnStatus" ) == eRespawnStatus.WAITING_FOR_PICKUP ||
		player.GetPlayerNetInt( "respawnStatus" ) == eRespawnStatus.WAITING_FOR_DELIVERY )
	{
		vector org = viewPlayer.GetOrigin()
		player.ClientCommand( "PingNearestRespawn " + org.x + " " + org.y + " " + org.z )
	}
}
#endif

#if(false)












































#endif

#if(CLIENT)
void function PlayerWaypoint_CreateCallback( entity wp )
{
	int wpType = wp.GetWaypointType()

	int pingType = Waypoint_GetPingTypeForWaypoint( wp )

	entity pingedEnt = GetPingedEntForLocWaypoint( wp )

	if ( WaypointOwnerIsMuted( wp ) )
		return

	if ( pingType == ePingType.RESPAWN_STATION )
	{
		if ( IsValid( pingedEnt ) )
		{
			if( pingedEnt.GetTargetName() == RESPAWN_CHAMBER_TARGETNAME )
			{
				var rui = pingedEnt.e.overheadRui
				if ( rui != null )
				{
					RuiSetBool( rui, "isVisible", false )
				}
			}
		}
	}

	if ( pingType == ePingType.RESPAWN_CARD )
	{
		if ( IsValid( pingedEnt ) && pingedEnt.GetNetworkedClassName() == PLAYER_WAYPOINT_CLASSNAME )
		{
			var rui = pingedEnt.wp.ruiHud
			if ( rui != null )
			{
				RuiSetGameTime( rui, "startPingTime", Time() )
			}
		}
	}
}

void function PlayerWaypoint_DestroyCallback( entity wp )
{
	int wpType = wp.GetWaypointType()

	int pingType = Waypoint_GetPingTypeForWaypoint( wp )

	entity pingedEnt = GetPingedEntForLocWaypoint( wp )

	if ( pingType == ePingType.RESPAWN_STATION )
	{
		if ( IsValid( pingedEnt ) )
		{
			if( pingedEnt.GetTargetName() == RESPAWN_DNA_TARGETNAME )
			{
				var rui = pingedEnt.e.overheadRui
				if ( rui != null )
				{
					RuiSetBool( rui, "isVisible", true )
				}
			}
		}
	}
}

void function ServerCallback_RespawnBeaconStart( float startTime, float endTime )
{
	if ( IsSpectating() )
	{
		thread SpectatorShowRespawnRui( startTime, endTime )
	}
}

void function SpectatorShowRespawnRui( float startTime, float endTime )
{
	entity player = GetLocalViewPlayer()

	if ( !IsValid( player ) )
		return

	if ( Time() > endTime )
		return

	player.EndSignal( "OnDeath" )
	clGlobal.levelEnt.EndSignal( "SpectatorShowRespawnRui" )

	var rui = CreateFullscreenRui( $"ui/health_use_progress.rpak" )
	DisplayRuiForRespawnChamber_Internal( rui, RESPAWN_BEACON_ICON, startTime, endTime, "#HINT_RESPAWNING" )

	EmitSoundOnEntity( player, RESPAWN_BEACON_LOOP_SOUND )

	OnThreadEnd(
		function() : ( rui , player )
		{
			if ( IsValid( player ) )
			{
				StopSoundOnEntity( player, RESPAWN_BEACON_LOOP_SOUND )
			}

			RuiDestroy( rui )
		}
	)

	float waitTime = endTime - Time()
	wait waitTime
	EmitSoundOnEntity( player, RESPAWN_BEACON_SUCCESS_SOUND )
}

void function ServerCallback_RespawnBeaconStop()
{
	if ( IsSpectating() )
		clGlobal.levelEnt.Signal( "SpectatorShowRespawnRui" )
}
#endif