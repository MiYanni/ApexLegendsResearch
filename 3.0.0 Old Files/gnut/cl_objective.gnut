untyped

global const OBJECTIVE_HINT_FADE_IN_TIME 	= 1.0
global const OBJECTIVE_HINT_TYPE_TIME 		= 0.2
global const OBJECTIVE_HINT_ONSCREEN_TIME 	= 9.0
global const OBJECTIVE_HINT_FADE_OUT_TIME 	= 0.5

global function ClObjective_Init

global function RegisterObjective
global function MainHud_InitObjective
global function ClientCodeCallback_ObjectiveChanged
global function CreateClientObjectiveTable
global function AddObjective
global function AddObjectiveWithAutoText
global function AddObjectiveWithObjectiveFunction
global function AddObjectiveWithAutoTextAndObjectiveFunction
global function HasActiveObjective

global function AddObjectiveChangedCallback

global function SetObjectiveFunction

global function SetObjectiveWorldIcon

int convIndex //Note that objectiveIndex 0 is reserved by code to mean no objective active!

//Split this out into _objective_shared, _objective and cl_objective once QA gets a chance to hammer at it.
void function ClObjective_Init()
{
	level.indexToObj <- {}
	level.objectives <- {}
	level.objectiveChangedCallbacks <- []

	RegisterSignal( "ObjectiveChanged" )
}

void function RegisterObjective( string objectiveName )
{
	convIndex++
	level.indexToObj[ convIndex ] <- objectiveName
	level.objectives[ objectiveName ] <- null
}

//This gets called, once per frame, if any of ObjectiveEndTime, ObjectiveEntity, or ObjectiveIndex change
void function ClientCodeCallback_ObjectiveChanged( entity player )
{
	if ( !IsValid( player ) )
		return

	if ( IsWatchingReplay() ) //Don't get updates for objectives while replay is happening. Not ideal, but script can't tell the difference when this callback happens due to objectives changing in the past while watching a replay versus objectives changing now.
		return

	if ( player != GetLocalClientPlayer() ) //At the end of kill replay sometimes it looks like ClientCodeCallback_ObjectiveChanged( LocalViewPlayer ) is still called on the LocalClientPlayer
		return

	player.Signal( "ObjectiveChanged" )

	//In here: Let ObjectiveTextThink update the text from within the while loop. Objective Hud elements exist in the Pilot/TitanHud as well as the ClientHud.

	local playerClientHudVGUI = player.cv.clientHud.s.mainVGUI

	//First signal the clientmain hud
	Signal( playerClientHudVGUI, "ObjectiveChanged" )

	//then signal the pilot/titanhud vgui
	entity cockpit = player.GetCockpit()

	if ( IsValid( cockpit ) )
	{
		local cockpitVGUI = cockpit.e.mainVGUI

		if ( IsValid( cockpitVGUI ) )
			Signal( cockpitVGUI, "ObjectiveChanged" )

		foreach ( callbackFunc in level.objectiveChangedCallbacks )
		{
			callbackFunc( cockpit, player, player.GetObjectiveIndex() )
		}
	}

	RunObjectiveFunc( player ) //Only run this function once when the objective changes, as opposed to letting ObjectiveTextThink handle it (which would result in the objective function getting run multiple times )
}

void function AddObjectiveChangedCallback( callbackFunc )
{
	Assert( "objectiveChangedCallbacks" in level )
	AssertParameters( callbackFunc, 3, "cockpit, player, objectiveIndex" )

	level.objectiveChangedCallbacks.append( callbackFunc )
}

table function CreateClientObjectiveTable( string objectiveTitleText, string objectiveDescriptiveText, bool objectiveIsAutoText = false, objectiveFunc = null )
{
	table Table
	Table.objectiveTitleText <- objectiveTitleText
	Table.objectiveDescriptiveText <- objectiveDescriptiveText
	Table.objectiveIsAutoText <- objectiveIsAutoText

	if ( objectiveFunc )
		Table.objectiveFunc <- objectiveFunc
	else
		Table.objectiveFunc <- null

	Table.objectiveWorldIcon <- null

	return Table
}

void function SetObjectiveFunction( string objectiveName, objectiveFunc )
{
	Assert( objectiveName in level.objectives, "Objective " + objectiveName + " does not exist! Check to see if it was registered before" )
	Assert( level.objectives[ objectiveName ] != null, " Objective " + objectiveName + " doesn't have an objectiveTable associated with it" )

	level.objectives[ objectiveName ].objectiveFunc = objectiveFunc
}

void function SetObjectiveWorldIcon( string objectiveName, objectiveWorldIcon )
{
	Assert( objectiveName in level.objectives, "Objective " + objectiveName + " does not exist! Check to see if it was registered before" )
	Assert( level.objectives[ objectiveName ] != null, " Objective " + objectiveName + " doesn't have an objectiveTable associated with it" )

	level.objectives[ objectiveName ].objectiveWorldIcon = objectiveWorldIcon
}

void function AddObjective( string objectiveName, string objectiveTitleText, string objectiveDescriptiveText )
{
	AddObjective_Internal( objectiveName, objectiveTitleText, objectiveDescriptiveText )
}

void function AddObjectiveWithAutoText( string objectiveName, string objectiveTitleText, string objectiveDescriptiveText )
{
	AddObjective_Internal( objectiveName, objectiveTitleText, objectiveDescriptiveText, true )
}

void function AddObjectiveWithObjectiveFunction( string objectiveName, string objectiveTitleText, string objectiveDescriptiveText, objectiveFunction )
{
	AddObjective_Internal( objectiveName, objectiveTitleText, objectiveDescriptiveText, false, objectiveFunction )
}

void function AddObjectiveWithAutoTextAndObjectiveFunction( string objectiveName, string objectiveTitleText, string objectiveDescriptiveText, objectiveFunction )
{
	AddObjective_Internal( objectiveName, objectiveTitleText, objectiveDescriptiveText, true, objectiveFunction )
}

void function AddObjective_Internal( string objectiveName, string objectiveTitleText, string objectiveDescriptiveText, bool isAutoText = false, objectiveFunction = null )
{
	Assert( objectiveName in level.objectives, "Objective " + objectiveName + " does not exist! Check to see if it was registered before" )
	Assert( level.objectives[ objectiveName ] == null, " Objective " + objectiveName + " already has an objectiveTable associated with it" )

	table objectiveTable = CreateClientObjectiveTable( objectiveTitleText, objectiveDescriptiveText, isAutoText, objectiveFunction )

	level.objectives[ objectiveName ] = objectiveTable
}

void function ObjectiveTextThink( vgui )
{
	//printt( "ObjectiveTexThink with vgui: " + vgui + " and player: " )
	vgui.EndSignal( "OnDestroy" )

	while ( true )
	{
		WaitSignal( vgui, "ObjectiveChanged" )
		UpdateObjectiveText( vgui, GetLocalClientPlayer() ) //Get Local Client Player again since player might have been destroyed due to replays
	}
}

void function UpdateObjectiveText( vgui, entity player )
{
	int objectiveIndex = player.GetObjectiveIndex()

	if ( objectiveIndex == 0 ) //ObjIndex 0 means no objective
	{
		//printt( "Returning from UpdateObjectiveText because null objIndex" )
		DeactivateObjectiveHud( vgui, player )
		//ShowGameProgressScoreboard_ForPlayer( player )
		return
	}

	float objectiveTimer = player.GetObjectiveEndTime()

	//HideGameProgressScoreboard_ForPlayer( player )
	ActivateObjectiveHud( vgui, objectiveIndex, objectiveTimer )
}

void function DeactivateObjectiveHud( vgui, entity player )
{
}

void function DelayedDeactivateObjectiveHud( vgui, float delay = OBJECTIVE_HINT_ONSCREEN_TIME )
{
	vgui.EndSignal( "OnDestroy" )
	wait delay
	DeactivateObjectiveHud( vgui, null )
}

void function ActivateObjectiveHud( vgui, int objectiveIndex, float objectiveTimer )
{
	local objectiveName = level.indexToObj[ objectiveIndex ]
	local objectiveTable = level.objectives[ objectiveName ]
	string objectiveTitleText = expect string( objectiveTable.objectiveTitleText )
	local objectiveDescriptiveText = objectiveTable.objectiveDescriptiveText
	local objectiveIsAutoText = objectiveTable.objectiveIsAutoText

	ClGameState_SetInfoStatusText( objectiveTitleText )
}

void function RunObjectiveFunc( entity player )
{
	int objectiveIndex = player.GetObjectiveIndex()

	if ( objectiveIndex == 0 ) //ObjIndex 0 means no objective
		return

	local objectiveName = level.indexToObj[ objectiveIndex ]
	local objectiveTable = level.objectives[ objectiveName ]

	entity objectiveEntity = player.GetObjectiveEntity()
	local objectiveFunction = objectiveTable.objectiveFunc

	if ( objectiveFunction != null && IsValid( objectiveEntity ) )
	{
		thread objectiveFunction( objectiveEntity )
	}
}

void function MainHud_InitObjective( vgui, entity player )
{
	if ( player != GetLocalClientPlayer() )
		return

	UpdateObjectiveText( vgui, player )
	thread ObjectiveTextThink( vgui )
}

int function HasActiveObjective( entity player )
{
	return player.GetObjectiveIndex()
}
