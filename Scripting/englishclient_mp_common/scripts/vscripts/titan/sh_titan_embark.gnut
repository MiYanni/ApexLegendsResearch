untyped

global function TitanEmbark_Init

global function TitanCanStand
global function TitanIsCurrentlyEmbarkableForPlayer
global function PlayerCanEmbarkTitan
global function PlayerCanImmediatelyEmbarkTitan
global function FindBestEmbark
global function GenerateEmbarkActionTable
global function FindEmbarkActionForCriteria
global function GetRandomEmbarkAction
//
global function IsPlayerDisembarking

#if(false)








//
//
//





//
//


//
#endif

#if(DEV)
	global function SetEmbarkDebugPrint
#endif

const SKIP_AHEAD_TIME = 2.0

const EMBARK_FADE_TIME = 0.2

struct
{
	asset cockpitLightFX = $"xo_cockpit_dlight"
	bool embarkDebugPrint = false
	vector smallDisembarkFailSafeTeleportVector = <400,400,200>
	vector largeDisembarkFailSafeTeleportVector = <600,600,600>
	bool functionref( entity, entity ) customTitanIsEmbarkableForPlayer = null
} file

void function TitanEmbark_Init()
{
	if ( reloadingScripts )
		return

	level.pilotDisembarkBounds <- {}
	table end
	end.up <- 50.363811
	end.forward <- 110.146927
	end.right <- 13.045869
	end.yaw <- -8.381051

	table start
	start.up <- 156.750015
	start.forward <- -13.429688
	start.right <- -11.374998
	start.yaw <- 0.409042

	RefreshTitanEmbarkActions()

	level.pilotDisembarkBounds.end <- end
	level.pilotDisembarkBounds.start <- start

	RegisterSignal( "OnComplete" )
	RegisterSignal( "startembark" ) //

	RegisterSignal( "DisembarkingTitan" )
	RegisterSignal( "player_embarks_titan" )

	#if(false)
//





//
//
//
//










//
//
//
//
#endif
}

void function OverrideCockpitLightFX( asset fx )
{
	file.cockpitLightFX = fx
}

void function AddEmbarkAnims( string titan, string titanSubClass, bool thirdPersonOnly = false )
{
	//
	array<string> Array =
	[
		"kneel_front",
		"kneel_behind",
		"kneel_right",
		"kneel_left",
		"kneel_airgrab",

		"stand_front",
		"stand_right",
		"stand_left",
		"stand_behind",
		"stand_airgrab",

		"above_right",
		"above_left",
		"kneel_above_right",
		"kneel_above_left",
	]


	//
	foreach ( item in Array )
	{
		array<string> suffixes = [ "", "_fast" ]
		foreach ( suffix in suffixes )
		{
			//
			string thirdPersonAlias = "pt_mount_" + item + suffix
			string firstPersonAlias = "ptpov_mount_" + item + suffix
			string thirdPersonAnim = "pt_mount_" + titanSubClass + "_" + item + suffix
			string firstPersonAnim = "ptpov_mount_" + titanSubClass + "_" + item + suffix

			if ( thirdPersonOnly )
				firstPersonAnim = ""

			AddAnimAlias( titanSubClass, thirdPersonAlias, thirdPersonAnim )
			AddAnimAlias( titanSubClass, firstPersonAlias, firstPersonAnim )
		}
	}
}

void function AddEmbarkAudio( string titanSubClass )
{
	//
	array<string> Array =
	[
		"Kneeling_Front",
		"Kneeling_Behind",
		"Kneeling_Right",
		"Kneeling_Left",
		"Kneeling_AboveRight",
		"Kneeling_AboveLeft",

		"Standing_Front",
		"Standing_Behind",
		"Standing_Airgrab",
		"Standing_AboveRight",
		"Standing_AboveLeft"
	]

	//
	foreach ( item in Array )
	{
		//
		string thirdPersonAlias = "Embark_" + item + "_3P"
		string firstPersonAlias = "Embark_" + item + "_1P"
		string thirdPersonAnim = titanSubClass + "_Embark_" + item + "_3P"
		string firstPersonAnim = titanSubClass + "_Embark_" + item + "_1P"

		AddAudioAlias( titanSubClass, thirdPersonAlias, thirdPersonAnim )
		AddAudioAlias( titanSubClass, firstPersonAlias, firstPersonAnim )
	}
}

void function RefreshTitanEmbarkActions()
{
	if ( "titanEmbarkActions" in level )
	{
		delete level.titanEmbarkActions
		delete level.titanEmbarkFarthestDistance
	}

	int groundDist = 260

	level.titanEmbarkActions <- []
	level.titanEmbarkFarthestDistance <- 0

	{
		table action

		action =
		{
			direction = <1,0,0>
			distance = groundDist
			embark = "front"
			minDot = 0.4
			priority = 1 //
			titanCanStandRequired = false
			//
			useAnimatedRefAttachment = true
			alignFrontEnabled = true
			canSkipAhead = true

			animSet =
			{
				firstPersonKneelingAlias = "ptpov_mount_kneel_front"
				thirdPersonKneelingAlias = "pt_mount_kneel_front"
				firstPersonStandingAlias = "ptpov_mount_stand_front"
				thirdPersonStandingAlias = "pt_mount_stand_front"
				titanKneelingAnim = "at_mount_kneel_front"
				titanStandingAnim = "at_mount_stand_front"
			}

			audioSet =
			{
				firstPersonKneelingAudioAlias = "Embark_Kneeling_Front_1P"
				thirdPersonKneelingAudioAlias = "Embark_Kneeling_Front_3P"
				firstPersonStandingAudioAlias = "Embark_Standing_Front_1P"
				thirdPersonStandingAudioAlias = "Embark_Standing_Front_3P"
			}
		}
		level.titanEmbarkActions.append( action )

		action =
		{
			direction = <1,0,0>
			distance = groundDist
			embark = "front"
			minDot = -1
			priority = 2 //
			titanCanStandRequired = false
			//
			useAnimatedRefAttachment = true
			alignFrontEnabled = true
			canSkipAhead = true

			animSet =
			{
				firstPersonKneelingAlias = "ptpov_mount_kneel_front"
				thirdPersonKneelingAlias = "pt_mount_kneel_front"
				firstPersonStandingAlias = "ptpov_mount_stand_front"
				thirdPersonStandingAlias = "pt_mount_stand_front"
				titanKneelingAnim = "at_mount_kneel_front"
				titanStandingAnim = "at_mount_stand_front"
			}

			audioSet =
			{
				firstPersonKneelingAudioAlias = "Embark_Kneeling_Front_1P"
				thirdPersonKneelingAudioAlias = "Embark_Kneeling_Front_3P"
				firstPersonStandingAudioAlias = "Embark_Standing_Front_1P"
				thirdPersonStandingAudioAlias = "Embark_Standing_Front_3P"
			}
		}
		level.titanEmbarkActions.append( action )

		action =
		{
			direction = <0,1,0>
			distance = groundDist
			embark = "left"
			minDot = 0.4
			priority = 1 //
			titanCanStandRequired = true
			useAnimatedRefAttachment = true
			alignFrontEnabled = true
			canSkipAhead = true
			//

			animSet =
			{
				firstPersonKneelingAlias = "ptpov_mount_kneel_left"
				thirdPersonKneelingAlias = "pt_mount_kneel_left"
				firstPersonStandingAlias = "ptpov_mount_stand_front"
				thirdPersonStandingAlias = "pt_mount_stand_left"
				titanKneelingAnim = "at_mount_kneel_left"
				titanStandingAnim = "at_mount_stand_left"
			}

			audioSet =
			{
				firstPersonKneelingAudioAlias = "Embark_Kneeling_Left_1P"
				thirdPersonKneelingAudioAlias = "Embark_Kneeling_Left_3P"
				firstPersonStandingAudioAlias = "Embark_Standing_Front_1P"
				thirdPersonStandingAudioAlias = "Embark_Standing_Front_3P"
			}
		}
		level.titanEmbarkActions.append( action )

		action =
		{
			direction = <0,-1,0>
			distance = groundDist
			embark = "right"
			minDot = 0.4
			priority = 1 //
			titanCanStandRequired = true
			useAnimatedRefAttachment = true
			alignFrontEnabled = true
			canSkipAhead = true
			//
			animSet =
			{
				firstPersonKneelingAlias = "ptpov_mount_kneel_right"
				thirdPersonKneelingAlias = "pt_mount_kneel_right"
				firstPersonStandingAlias = "ptpov_mount_stand_front"
				thirdPersonStandingAlias = "pt_mount_stand_right"
				titanKneelingAnim = "at_mount_kneel_right"
				titanStandingAnim = "at_mount_stand_right"
			}

			audioSet =
			{
				firstPersonKneelingAudioAlias = "Embark_Kneeling_Right_1P"
				thirdPersonKneelingAudioAlias = "Embark_Kneeling_Right_3P"
				firstPersonStandingAudioAlias = "Embark_Standing_Front_1P"
				thirdPersonStandingAudioAlias = "Embark_Standing_Front_3P"
			}
		}
		level.titanEmbarkActions.append( action )


		action =
		{
			direction = <-1,0,0>
			distance = groundDist
			embark = "behind"
			minDot = 0.4
			priority = 1 //
			titanCanStandRequired = true
			useAnimatedRefAttachment = true
			canSkipAhead = false
			//

			animSet =
			{
				firstPersonKneelingAlias = "ptpov_mount_kneel_behind"
				thirdPersonKneelingAlias = "pt_mount_kneel_behind"
				firstPersonStandingAlias = "ptpov_mount_stand_behind"
				thirdPersonStandingAlias = "pt_mount_stand_behind"
				titanKneelingAnim = "at_mount_kneel_behind"
				titanStandingAnim = "at_mount_stand_behind"
			}

			audioSet =
			{
				firstPersonKneelingAudioAlias = "Embark_Kneeling_Behind_1P"
				thirdPersonKneelingAudioAlias = "Embark_Kneeling_Behind_3P"
				firstPersonStandingAudioAlias = "Embark_Standing_Behind_1P"
				thirdPersonStandingAudioAlias = "Embark_Standing_Behind_3P"
			}
		}
		level.titanEmbarkActions.append( action )

		action =
		{
			direction = <0,0,1> //
			distance = 350
			embark = "above_close"
			minDot = 0.88
			canSkipAhead = false
			priority = 0 //

			titanCanStandRequired = true
			useAnimatedRefAttachment = true
			//

			animSets =
			{
				right =
				{
			 		direction = <0,-1,0> //
					firstPersonKneelingAlias = "ptpov_mount_kneel_above_right"
					thirdPersonKneelingAlias = "pt_mount_kneel_above_right"
					firstPersonStandingAlias = "ptpov_mount_above_right"
					thirdPersonStandingAlias = "pt_mount_above_right"
					titanKneelingAnim = "at_mount_kneel_above"
					titanStandingAnim = "at_mount_above_right"

					audioSet =   //
					{
						firstPersonKneelingAudioAlias = "Embark_Kneeling_AboveRight_1P"
						thirdPersonKneelingAudioAlias = "Embark_Kneeling_AboveRight_3P"
						firstPersonStandingAudioAlias = "Embark_Standing_AboveRight_1P"
						thirdPersonStandingAudioAlias = "Embark_Standing_AboveRight_3P"
					}
				}

				left =
				{
			 		direction = <0,1,0> //
					firstPersonKneelingAlias = "ptpov_mount_kneel_above_left"
					thirdPersonKneelingAlias = "pt_mount_kneel_above_left"
					firstPersonStandingAlias = "ptpov_mount_above_left"
					thirdPersonStandingAlias = "pt_mount_above_left"
					titanKneelingAnim = "at_mount_kneel_above"
					titanStandingAnim = "at_mount_above_left"

					audioSet = //
					{
						firstPersonKneelingAudioAlias = "Embark_Kneeling_AboveLeft_1P"
						thirdPersonKneelingAudioAlias = "Embark_Kneeling_AboveLeft_3P"
						firstPersonStandingAudioAlias = "Embark_Standing_AboveLeft_1P"
						thirdPersonStandingAudioAlias = "Embark_Standing_AboveLeft_3P"
					}
				}
			}
		}
		level.titanEmbarkActions.append( action )

		action =
		{
			direction = <0,0,1>
			distance = 275
			embark = "above_grab"
			minDot = 0.3
			titanCanStandRequired = true
			//
			useAnimatedRefAttachment = true
			//
			canSkipAhead = true

			alignFrontEnabled = true

			priority = 0 //

			animSet =
			{
				firstPersonKneelingAlias = "ptpov_mount_kneel_airgrab"
				thirdPersonKneelingAlias = "pt_mount_kneel_airgrab"
				titanKneelingAnim = "at_mount_kneel_airgrab"

				firstPersonStandingAlias = "ptpov_mount_stand_airgrab"
				thirdPersonStandingAlias = "pt_mount_stand_airgrab"
				titanStandingAnim = "at_mount_stand_airgrab"
			}

			audioSet =
			{
				firstPersonKneelingAudioAlias = "Embark_Kneeling_Front_1P"
				thirdPersonKneelingAudioAlias = "Embark_Kneeling_Front_3P"
				firstPersonStandingAudioAlias = "Embark_Standing_Front_1P"
				thirdPersonStandingAudioAlias = "Embark_Standing_Front_3P"
			}
		}
		level.titanEmbarkActions.append( action )
	}

	array<string> autoParms = [	"lungeCheck", "alignFrontEnabled" ]

	foreach ( action in level.titanEmbarkActions )
	{
		if ( action.distance > level.titanEmbarkFarthestDistance )
		{
			level.titanEmbarkFarthestDistance = action.distance
		}

		foreach ( parm in autoParms )
		{
			if ( !( parm in action ) )
				action[ parm ] <- false
		}
	}
}

#if(false)











/*









*/












#endif //


void function EmbarkLine( entity player, entity titan )
{
	player.EndSignal( "startembark" )
	int ref = player.LookupAttachment( "ref" )
	int hijack = titan.LookupAttachment( "hijack" )
	vector origin
	for ( ;; )
	{
		origin = titan.GetAttachmentOrigin( hijack )
		DebugDrawLine( player.GetOrigin(), origin, 255, 0, 0, true, 0.15 )

		origin = player.GetAttachmentOrigin( ref )
		DebugDrawLine( player.GetOrigin(), origin, 0, 255, 0, true, 0.15 )
		WaitFrame()
	}
}


#if(false)
































//
//
//
//


















//


















//







//






//














//











//






















//


//







































































//

























































//
//






//
//






//
//







//











//




















//













//











//




























//




































//













































































//
//


#endif //

void function DelayedDisableEmbarkPlayerHud( entity player, FirstPersonSequenceStruct sequence )
{
	player.EndSignal( "OnDeath" )

	float duration = player.GetSequenceDuration( sequence.thirdPersonAnim )
	wait duration - 1.0
	player.SetCinematicEventFlags( player.GetCinematicEventFlags() | CE_FLAG_EMBARK )
}

#if(false)




















































//


//







//




















//








//


//




















//



//



//
//
//
//
//
//
//
//
//
//
//
//

//
//
//
//
//
//
//
//
//

//
//
//
//
//
//
//
//
//
//
//
#endif //

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

#if(false)
//
//
//
//

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//











//


















































































//






//













//




























//
//


















































//





































//
//
//












//







#endif //

bool function IsPlayerDisembarking( entity player )
{
	return player.p.isDisembarking
}

bool function PlayerCanEmbarkIntoTitan( entity player, entity titan ) //
{
	if ( player.IsNoclipping() )
		return false

	if ( !TitanIsCurrentlyEmbarkableForPlayer( player, titan ) )
		return false

	return FindBestEmbark( player, titan ) != null
}

void function SetCustomTitanIsEmbarkableForPlayerFunc( bool functionref( entity, entity ) func )
{
	file.customTitanIsEmbarkableForPlayer = func
}

bool function TitanIsCurrentlyEmbarkableForPlayer( entity player, entity titan ) //
{
	if ( !CanEmbark( player ) )
		return false

	if ( player.Anim_IsActive() )
		return false

	if ( !player.IsHuman() )
		return false

	if ( player.ContextAction_IsActive() )
		return false

	if ( !titan.IsEntAlive() )
		return false

	if ( titan.ContextAction_IsActive() )
		return false

	if ( titan.IsPlayer() )
		return false

	if ( !titan.IsInterruptable() )
		return false

	if ( IsValid( titan.GetParent() ) )
		return false

	if ( !HasSoul( titan ) )
		return false

	if ( GetDoomedState( titan ) && !PROTO_AlternateDoomedState() )
		return false

	entity soul = titan.GetTitanSoul()
	if ( soul.IsEjecting() )
		return false

	#if(false)
//





#endif

	if ( "disembarkTime" in titan.s )
	{
		if ( Time() - titan.s.disembarkTime < 1.65 )
			return false
	}

	if ( Bleedout_IsBleedingOut( player ) )
		return false

	#if(false)


#endif

	return true
}

function FindEmbarkActionForCriteria( table criteria )
{
	local embarkAction
	foreach ( option in level.titanEmbarkActions )
	{
		bool failed = false
		foreach ( key, value in criteria )
		{
			if ( value != option[key] )
			{
				failed = true
				break
			}
		}

		if ( !failed )
		{
			embarkAction = expect table( option )
			break
		}
	}

	return embarkAction
}

table function GetRandomEmbarkAction()
{
	return expect table( level.titanEmbarkActions[ RandomInt( level.titanEmbarkActions.len() ) ] )
}

function FindBestEmbark( entity player, entity titan, bool doDistCheck = true )
{
	//
	//
	vector playerPos = player.GetOrigin()
	vector titanPos = titan.GetOrigin()

	vector relTitanToPlayerDir = CalculateTitanToPlayerDir( titan, player )

	local bestAction = null
	float bestDot = -2
	float dist = 0

	if ( doDistCheck )
	{
		dist = Distance( playerPos, titanPos )
		if ( dist > level.titanEmbarkFarthestDistance )
			return null
	}
	//
	//

	for ( int i = 0; i < 3; i++ )
	{
		bestAction = GetBestEmbarkAction( i, player, titan, dist, relTitanToPlayerDir )
		if ( bestAction != null )
			break
	}

	if ( bestAction == null )
		return null

	return GenerateEmbarkActionTable( player, titan, expect table( bestAction ), relTitanToPlayerDir )
}

vector function CalculateTitanToPlayerDir( entity titan, entity player )
{
	vector playerPos = player.GetOrigin()
	vector titanPos = titan.GetOrigin()

	vector absTitanToPlayerDir
	if ( playerPos == titanPos )
	{
		absTitanToPlayerDir = <1,0,0>
	}
	else
	{
		vector angles = player.EyeAngles()
		vector forward = AnglesToForward( angles )

		absTitanToPlayerDir = ( playerPos - titanPos )


		absTitanToPlayerDir.Norm()

//
//
//
//
	}

	vector titanAngles = titan.GetAngles()
	titanAngles.x = 0
	if ( titan.GetTitanSoul().GetStance() >= STANCE_STANDING )
		titanAngles = AnglesCompose( titanAngles, <0,-30,0> )

	vector relTitanToPlayerDir = CalcRelativeVector( titanAngles, absTitanToPlayerDir )
	return relTitanToPlayerDir
}

table function GenerateEmbarkActionTable( entity player, entity titan, table bestAction, var relTitanToPlayerDir = null )
{
	bool useFastAnims = player.IsPlayer() && PlayerHasFastEmbark( player )

	if ( relTitanToPlayerDir == null )
 		relTitanToPlayerDir = CalculateTitanToPlayerDir( titan, player )

	expect vector( relTitanToPlayerDir )

	table Table
	Table.action <- bestAction

	if ( "animSet" in bestAction )
	{
		Table.animSet <- bestAction.animSet
		Table.audioSet <- bestAction.audioSet
	}
	else
	{
		local bestAnimSet
		local bestAudioSet
		float bestDot = -2
		Assert( "animSets" in bestAction, "Table has no animSet and no animSets!" )
		foreach ( animSet in bestAction.animSets )
		{
			float dot = relTitanToPlayerDir.Dot( animSet.direction )

			if ( dot > bestDot )
			{
				bestAnimSet = animSet
				bestAudioSet = animSet.audioSet
				bestDot = dot
			}
		}

		Table.animSet <- bestAnimSet
		Table.audioSet <- bestAudioSet
	}

	if ( useFastAnims )
	{
		Table.animSet = clone Table.animSet

		foreach ( string idx, item in Table.animSet )
		{
			if ( IsString( item ) )
				Table.animSet[ idx ] = item + "_fast"
		}
	}

	return Table
}

function GetBestEmbarkAction( int priority, entity player, entity titan, float dist, vector relTitanToPlayerDir )
{
	local bestAction = null
	float bestDot = -2

	foreach ( action in level.titanEmbarkActions )
	{
		if ( action.priority != priority )
			continue

		if ( dist > action.distance )
		{
			//
				//
			continue
		}

		if ( action.lungeCheck )
		{
			if ( player.IsNPC() )
				continue

			if ( player.Lunge_IsActive() != action.lungeCheck )
				continue
		}

		float dot = relTitanToPlayerDir.Dot( action.direction )

		if ( dot < action.minDot )
		{
			//
				//
			continue
		}

		if ( expect bool( action.titanCanStandRequired ) && !TitanCanStand( titan ) )
		{
			//
				//
			continue
		}

		if ( dot > bestDot )
		{
			//
				//
			bestAction = action
			bestDot = dot
		}
	}

	return bestAction
}

function FindBestEmbarkForNpcAnim( entity npc, entity titan )
{
	bool doDistCheck = false
	return FindBestEmbark( npc, titan, doDistCheck )
}

bool function TitanCanStand( entity titan )
{
	#if(false)








//

//

//
//




#else
		return titan.GetCanStand() != 0
	#endif
}

bool function PlayerCanEmbarkTitan( entity player, entity titan ) //
{
	PerfStart( PerfIndexClient.PlayerCanEmbarkTitan1 )
	if ( !TitanIsCurrentlyEmbarkableForPlayer( player, titan ) )
	{
		PerfEnd( PerfIndexClient.PlayerCanEmbarkTitan1 )
		return false
	}
	PerfEnd( PerfIndexClient.PlayerCanEmbarkTitan1 )

	PerfStart( PerfIndexClient.FindBestEmbark )
	bool res = FindBestEmbark( player, titan ) != null
	PerfEnd( PerfIndexClient.FindBestEmbark )

	return res
}

bool function PlayerCanImmediatelyEmbarkTitan( entity player, entity titan ) //
{
	if ( "embarkingPlayer" in titan.s )
		return false

	if ( player.IsNoclipping() )
		return false

	if ( !IsAlive( player ) || !IsAlive( titan ) )
		return false

	return FindBestEmbark( player, titan ) != null
}

#if(false)














//





















//



//




//



#endif //

#if(DEV)
void function SetEmbarkDebugPrint( bool value )
{
	file.embarkDebugPrint = value
}
#endif //

bool function PlayerHasFastEmbark( entity player )
{
	return false
}