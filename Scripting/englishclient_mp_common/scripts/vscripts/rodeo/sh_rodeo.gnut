//
//
//
//
//


global function ShRodeo_Init

global function RodeoState_GetIsPlayerRodeoing
global function RodeoState_GetIsPlayerRodeoingVehicle
global function RodeoState_GetPlayerCurrentRodeoVehicle
global function RodeoState_GetPlayersRodeingVehicle
global function RodeoState_GetIsVehicleBeingRodeoed
global function RodeoState_GetRiderInSpot
global function RodeoState_CheckSpotsAreAvailable
global function RodeoState_IsRiderBusy
global function RodeoState_GetRiderCurrentSpot
global function RodeoState_GetRiderCurrentTransition
global function RodeoState_GetRiderTimeSinceRodeo
global function RodeoState_IsRiderAllowedToRodeo

global function Rodeo_RegisterVehicle
global function Rodeo_IsRodeoVehicle
#if(false)






#endif

global function RodeoUtil_GetVehicleRodeoStateEnt
global function RodeoUtil_GetVehicleEntFromStateEnt

global function RodeoVehicleFlavor_AddSpot
global function RodeoVehicleFlavor_AddTransition

global function AddCallback_CanRiderRodeoVehicle
global function AddCallback_OnRodeoStarting
global function AddCallback_OnRodeoEnded

global function CodeCallback_IsValidRodeoTarget
global function CodeCallback_CanPlayerRodeo
global function CodeCallback_OnRodeoAttach
global function CodeCallback_TitanRiderEntVarChanged
#if(false)


#endif
#if(CLIENT)
global function ClientCodeCallback_TitanRodeoedUpdated
global function ClientCodeCallback_RodeoHitTimeChanged
#endif

//
//
//
//
//
//
//
//
//
//

//
//
//
//
//
//
//
//
//

//
//
//
//
//

//

//
//
//
//
//
//

//
//
//
//
//

/**/
global const int RODEO_SENTINEL_TRANSITION_NONE = -1
global const int RODEO_SENTINEL_INVALID_SPOT = -99
global const int RODEO_SENTINEL_BEGIN_SPOT_ATTACH = -1
global const int RODEO_SENTINEL_END_SPOT_DETACH = -1

global enum eCanRiderRodeoVehicleResult
{
	USE_DEFAULT_BEHAVIOUR,
	ALLOW,
	DISALLOW,
}

//
//
//
//
//
global struct RodeoSpotFlavor
{
	int    index = -1
	string thirdPersonIdleAnim = ""
	string firstPersonIdleAnim = ""
	string attachPoint = "ref"
	//
	bool   viewConeEnabled = true
	float  viewConeYawMin = 0
	float  viewConeYawMax = 0
	float  viewConePitchMin = 0
	float  viewConePitchMax = 0
	bool   disableWeapons = false

	//

	void functionref( entity rider, entity vehicle ) onRiderArrivedAtRodeoSpotFunc

	bool idleIsError = false
}

global struct RodeoTransitionFlavor
{
	int index = -1

	int        beginSpotIndex = RODEO_SENTINEL_BEGIN_SPOT_ATTACH //
	array<int> transientSpotIndexList //
	int        endSpotIndex = RODEO_SENTINEL_END_SPOT_DETACH //

	bool                                                     doBasicAnim = true
	void functionref( entity rider, entity vehicleStateEnt ) execFunc //

	//
	string ornull attachment
	//
	string ornull thirdPersonAnim
	string ornull firstPersonAnim
	string ornull worldSound
	string ornull cockpitSound
}

global struct RodeoVehicleFlavor
{
	bool functionref( entity rider, entity vehicle ) isValidRodeoTarget
	int functionref( entity rider, entity vehicle )  getAttachTransition //
	void functionref( entity rider, entity vehicle ) onRodeoStartingFunc
	#if(false)

//

#endif
	void functionref( entity rider, entity vehicle ) onRodeoFinishingFunc

	table<int, RodeoSpotFlavor>       spotMap
	table<int, RodeoTransitionFlavor> transitionMap
	int                               jumpOffKey = IN_JUMP
}

struct RodeoVehicleState
{
	RodeoVehicleFlavor& flavor
	entity              stateEnt
}

struct RodeoRiderState
{
	entity rider
	entity vehicleStateEnt = null //
	float  prevRodeoTime = -9999.0

	#if(false)
//











#endif
}


//
//
//
//
//
struct
{
	bool PROTO_IsRodeoEvenUsed = false

	array<int functionref( entity rider, entity vehicle )>  canRiderRodeoVehicleCallbacks
	array<void functionref( entity rider, entity vehicle )> onRodeoStartingCallbacks
	array<void functionref( entity rider, entity vehicle )> onRodeoEndedCallbacks

	table<entity, RodeoVehicleState>                        vehicleStateMap
	table<entity, RodeoRiderState>                          riderStateMap
} file


//
//
//
//
//
void function ShRodeo_Init()
{
	RegisterSignal( "RodeoStarting" )
	#if(false)





//
#endif
	RegisterSignal( "RodeoEnded" ) //

	RegisterSignal( "RodeoRiderAttached" )
	RegisterSignal( "RodeoRiderDetached" )

	RegisterSignal( "PlayerStopsRequestingRodeo" )

	#if(false)

//

#endif

	#if(CLIENT)
		AddCreateCallback( "player", OnPlayerCreated )
		AddDestroyCallback( "player", OnPlayerDestroyed )
		AddCallback_OnPlayerLifeStateChanged( OnPlayerLifestateChanged )
	#endif
}


//
//
//
//
//
void function Rodeo_RegisterVehicle( entity vehicle, RodeoVehicleFlavor flavor )
{
	RodeoVehicleState vehicleState
	vehicleState.stateEnt = RodeoUtil_GetVehicleRodeoStateEnt( vehicle )
	vehicleState.flavor = flavor

	Assert( !(vehicleState.stateEnt in file.vehicleStateMap), "Vehicle has already been registered: " + vehicle )

	file.vehicleStateMap[ vehicleState.stateEnt ] <- vehicleState

	#if(false)

#endif

	AddEntityDestroyedCallback( vehicleState.stateEnt, OnRodeoVehicleStateEntDestroyed )

	file.PROTO_IsRodeoEvenUsed = true
	#if(CLIENT)
		OnPlayerLifestateChanged( GetLocalClientPlayer(), LIFE_INVALID, LIFE_ALIVE )
	#endif
}


bool function Rodeo_IsRodeoVehicle( entity vehicle )
{
	return (RodeoUtil_GetVehicleRodeoStateEnt( vehicle ) in file.vehicleStateMap)
}


bool function RodeoState_GetIsPlayerRodeoing( entity player )
{
	return GetRiderCurrentVehicle( player ) != null
}


bool function RodeoState_GetIsPlayerRodeoingVehicle( entity player, entity vehicle )
{
	return GetRiderCurrentVehicle( player ) == vehicle
}


entity function RodeoState_GetPlayerCurrentRodeoVehicle( entity player )
{
	return GetRiderCurrentVehicle( player )
}


array<entity> function RodeoState_GetPlayersRodeingVehicle( entity vehicle, int allegiance = eAllegiance.IRRELEVANT )
{
	array<entity> riderList = []
	for ( int spotIndex = 0; spotIndex < vehicle.GetNumRodeoSlots(); spotIndex++ )
	{
		entity rider = vehicle.GetRodeoRider( spotIndex )
		if ( IsValid( rider ) && AllegianceCheck( allegiance, vehicle, rider ) )
			riderList.append( rider )
	}
	return riderList
}


bool function RodeoState_GetIsVehicleBeingRodeoed( entity vehicle, int allegiance = eAllegiance.IRRELEVANT )
{
	for ( int spotIndex = 0; spotIndex < vehicle.GetNumRodeoSlots(); spotIndex++ )
	{
		entity rider = vehicle.GetRodeoRider( spotIndex )
		if ( IsValid( rider ) && AllegianceCheck( allegiance, vehicle, rider ) )
			return true
	}
	return false
}


entity function RodeoState_GetRiderInSpot( entity vehicle, int spotIndex )
{
	return vehicle.GetRodeoRider( spotIndex )
}


bool function RodeoState_CheckSpotsAreAvailable( entity vehicle, ... )
{
	for ( int argI = 0; argI < vargc; argI++ )
	{
		int spotIndex = expect int( vargv[argI] )
		if ( vehicle.GetRodeoRider( spotIndex ) != null )
		{
			return false
		}
	}
	return true
}


bool function RodeoState_IsRiderBusy( entity rider )
{
	RodeoRiderState riderState = GetRodeoRiderState( rider )
	Assert( riderState.vehicleStateEnt != null )
	#if(false)

#else
		Assert( false, "nyi" )
		unreachable
	#endif
}


int function RodeoState_GetRiderCurrentSpot( entity rider )
{
	RodeoRiderState riderState = GetRodeoRiderState( rider )
	Assert( riderState.vehicleStateEnt != null )
	#if(false)

#else
		Assert( false, "nyi" )
		unreachable
	#endif
}


int function RodeoState_GetRiderCurrentTransition( entity rider )
{
	RodeoRiderState riderState = GetRodeoRiderState( rider )
	Assert( riderState.vehicleStateEnt != null )
	#if(false)

#else
		Assert( false, "nyi" )
		unreachable
	#endif
}


float function RodeoState_GetRiderTimeSinceRodeo( entity rider )
{
	if ( RodeoState_GetIsPlayerRodeoing( rider ) )
		return 0.0

	RodeoRiderState riderState = GetRodeoRiderState( rider )
	return Time() - riderState.prevRodeoTime
}


bool function RodeoState_IsRiderAllowedToRodeo( entity rider )
{
	RodeoRiderState riderState = GetRodeoRiderState( rider )

	#if(false)

#else
		return true //
	#endif
}


entity function RodeoUtil_GetVehicleRodeoStateEnt( entity vehicle )
{
	return vehicle.IsTitan() ? vehicle.GetTitanSoul() : vehicle
}


entity function RodeoUtil_GetVehicleEntFromStateEnt( entity vehicleStateEnt )
{
	return IsSoul( vehicleStateEnt ) ? vehicleStateEnt.GetTitan() : vehicleStateEnt
}


#if(false)


//



#endif

#if(false)







#endif

#if(false)


//



//

//



#endif

#if(false)







//







#endif

#if(false)







//
//

#endif

#if(false)




//
//



#endif

void function AddCallback_CanRiderRodeoVehicle( int functionref( entity rider, entity vehicle ) callbackFunc )
{
	file.canRiderRodeoVehicleCallbacks.append( callbackFunc )
}


void function AddCallback_OnRodeoStarting( void functionref( entity rider, entity vehicle ) callbackFunc )
{
	file.onRodeoStartingCallbacks.append( callbackFunc )
}


void function AddCallback_OnRodeoEnded( void functionref( entity rider, entity vehicle ) callbackFunc )
{
	file.onRodeoEndedCallbacks.append( callbackFunc )
}


//
//
//
//
//
void function OnPlayerCreated( entity player )
{
	RodeoRiderState riderState
	riderState.rider = player

	file.riderStateMap[player] <- riderState

	#if(false)
//




#endif
}


void function OnPlayerDestroyed( entity player )
{
	if ( player in file.riderStateMap )
		delete file.riderStateMap[player]
}

bool function CodeCallback_CanPlayerRodeo( entity player )
{
	vector playerVelocity = player.GetVelocity();
	float playerSpeedSqr = LengthSqr( playerVelocity );
	if ( playerSpeedSqr > 1000.0 * 1000.0 )
	{
		float playerSpeed = sqrt( playerSpeedSqr );
		vector playerVelocityDir = playerVelocity / playerSpeed;
		if ( playerVelocityDir.z > 0.5 )
		{
			return false;
		}
	}

	return true
}

bool function CodeCallback_IsValidRodeoTarget( entity rider, entity vehicle )
{
	if ( !CanRiderRodeoTarget( rider, vehicle ) )
		return false

	RodeoVehicleState vehicleState = GetRodeoVehicleState( vehicle )

	int transitionIndex = vehicleState.flavor.getAttachTransition( rider, vehicle )
	//
	if ( transitionIndex == RODEO_SENTINEL_TRANSITION_NONE )
		return false

	if ( vehicleState.flavor.isValidRodeoTarget != null )
	{
		return vehicleState.flavor.isValidRodeoTarget( rider, vehicle )
	}
	else
	{
		if ( vehicle.GetScriptName() == "hoverbike_rodeo_proxy" )
			return rider.IsInputCommandHeld( IN_USE_LONG )

		//
		#if(false)


#else

			//
			if ( !rider.IsInputCommandHeld( IN_USE_LONG ) )
				return false
		#endif
	}

	return true
}


var function CodeCallback_OnRodeoAttach( entity rider, entity vehicle )
{
	#if(CLIENT)
		Assert( rider == GetLocalViewPlayer() ) //
	#endif

	//
	//

	RodeoVehicleState vehicleState = GetRodeoVehicleState( vehicle )
	//

	if ( vehicleState.flavor.isValidRodeoTarget != null )
	{
		Assert( vehicleState.flavor.isValidRodeoTarget( rider, vehicle ) )
	}

	int transitionIndex = vehicleState.flavor.getAttachTransition( rider, vehicle )
	//
	if ( transitionIndex == RODEO_SENTINEL_TRANSITION_NONE )
		return null

	RodeoTransitionFlavor transitionFlavor = vehicleState.flavor.transitionMap[transitionIndex]
	Assert( transitionFlavor.beginSpotIndex == RODEO_SENTINEL_BEGIN_SPOT_ATTACH )

	RodeoRiderState riderState = GetRodeoRiderState( rider )
	#if(false)

#endif

	return {
		attachment = transitionFlavor.attachment,
		firstPersonAnim = transitionFlavor.firstPersonAnim,
		thirdPersonAnim = transitionFlavor.thirdPersonAnim,
		rodeoSlot = transitionFlavor.endSpotIndex,
	}
}


void function RodeoInternal_OnVehicleRiderChanged( entity vehicleStateEnt, int spotIndex, entity oldRider, entity newRider )
{
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
}


void function CodeCallback_TitanRiderEntVarChanged( entity soul, int rodeoSlotIndex, entity oldRider, entity newRider )
{
	//
	//

	if ( oldRider == null && newRider == null )
	{
		return //
	}
	if ( soul ==  null )
	{
		return //
	}

	RodeoInternal_OnVehicleRiderChanged( soul, rodeoSlotIndex, oldRider, newRider )
}


//
//
//
//
//
#if(false)

















#endif


//
//
//
//
//
#if(CLIENT)
void function RodeoInternal_OnRiderVehicleRodeoedChanged( entity rider, entity vehicleStateEnt )
{
	RodeoRiderState riderState = GetRodeoRiderState( rider )

	if ( vehicleStateEnt != null )
	{
		//
		//
		entity vehicle                 = RodeoUtil_GetVehicleEntFromStateEnt( vehicleStateEnt )
		RodeoVehicleState vehicleState = GetRodeoVehicleState( vehicle )

		riderState.vehicleStateEnt = vehicleStateEnt
		rider.Signal( "RodeoStarting" )

		if ( vehicleState.flavor.onRodeoStartingFunc != null )
		{
			vehicleState.flavor.onRodeoStartingFunc( rider, vehicle )
		}
		foreach( callbackFunc in file.onRodeoStartingCallbacks )
		{
			callbackFunc( rider, vehicle )
		}
	}
	else
	{
		//
		//

		entity vehicle = null
		if ( IsValid( riderState.vehicleStateEnt ) )
		{
			vehicle = RodeoUtil_GetVehicleEntFromStateEnt( riderState.vehicleStateEnt )

			RodeoVehicleState vehicleState = GetRodeoVehicleState( vehicle ) //
			if ( vehicleState.flavor.onRodeoFinishingFunc != null )
			{
				vehicleState.flavor.onRodeoFinishingFunc( rider, vehicle )
			}
		}

		foreach( callbackFunc in file.onRodeoEndedCallbacks )
		{
			callbackFunc( riderState.rider, vehicle )
		}

		riderState.vehicleStateEnt = null
		riderState.prevRodeoTime = Time()
		rider.Signal( "RodeoEnded" )
	}

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
}

void function ClientCodeCallback_TitanRodeoedUpdated( entity player )
{
	printt( "ClientCodeCallback_TitanRodeoedUpdated", player, player.GetTitanSoulBeingRodeoed() )
	RodeoInternal_OnRiderVehicleRodeoedChanged( player, player.GetTitanSoulBeingRodeoed() )
}

void function ClientCodeCallback_RodeoHitTimeChanged( entity soul )
{
	//
}
#endif


//
//
//
//
//
entity function GetRiderCurrentVehicle( entity rider )
{
	entity vehicleStateEnt = rider.GetTitanSoulBeingRodeoed()
	if ( !IsValid( vehicleStateEnt ) )
		return null

	return RodeoUtil_GetVehicleEntFromStateEnt( vehicleStateEnt )
}

#if(false)










//


#endif

entity function GetRodeoRider( entity vehicle, int spotIndex )
{
	if ( vehicle.IsPlayer() || vehicle.IsNPC() )
	{
		return vehicle.GetRodeoRider( spotIndex )
	}

	Assert( false, "NYI - vehicle is not CBaseCombatCharacter" )
	unreachable
}

#if(false)










#endif

bool function CanRiderRodeoTarget( entity rider, entity vehicle )
//
{
	//

	if ( IsPlayerDisembarking( rider ) )
		return false

	if ( rider.ContextAction_IsActive() )
		return false

	if ( rider.GetWeaponDisableFlags() == WEAPON_DISABLE_FLAGS_ALL )
		return false

	//
	if ( rider.IsPhaseShifted() != vehicle.IsPhaseShifted() )
		return false

	#if(false)
//






#endif

	if ( vehicle.GetScriptName() == "hoverbike_rodeo_proxy" )
		return true //

	bool doDefaultChecks = true
	foreach( callbackFunc in file.canRiderRodeoVehicleCallbacks )
	{
		int result = callbackFunc( rider, vehicle )

		if ( result == eCanRiderRodeoVehicleResult.DISALLOW )
			return false


		if ( result == eCanRiderRodeoVehicleResult.ALLOW )
			doDefaultChecks = false
	}

	if ( doDefaultChecks )
	{
		if ( rider.GetTeam() != vehicle.GetTeam() )
			return false
	}

	//
	//
	//
	//
	//
	//
	//
	//

	//
	return true
}


RodeoVehicleState function GetRodeoVehicleState( entity vehicle )
{
	Assert( IsValid( vehicle ) )
	entity vehicleStateEnt = RodeoUtil_GetVehicleRodeoStateEnt( vehicle )
	Assert( IsValid( vehicleStateEnt ) )
	Assert( vehicleStateEnt in file.vehicleStateMap )
	return file.vehicleStateMap[vehicleStateEnt]
	//
}


RodeoRiderState function GetRodeoRiderState( entity rider )
{
	Assert( rider in file.riderStateMap )
	return file.riderStateMap[rider]
}


RodeoSpotFlavor function RodeoVehicleFlavor_AddSpot( RodeoVehicleFlavor vehicleFlavor, int index )
{
	Assert( index >= 0 )
	Assert( !(index in vehicleFlavor.spotMap) )

	RodeoSpotFlavor spotFlavor
	spotFlavor.index = index
	vehicleFlavor.spotMap[index] <- spotFlavor

	return spotFlavor
}


RodeoTransitionFlavor function RodeoVehicleFlavor_AddTransition( RodeoVehicleFlavor vehicleFlavor, int index, int beginSpotIndex, int endSpotIndex )
{
	Assert( index >= 0 )
	Assert( !(index in vehicleFlavor.transitionMap) )

	RodeoTransitionFlavor transitionFlavor
	transitionFlavor.index = index
	Assert( beginSpotIndex == RODEO_SENTINEL_BEGIN_SPOT_ATTACH || beginSpotIndex in vehicleFlavor.spotMap )
	transitionFlavor.beginSpotIndex = beginSpotIndex
	Assert( endSpotIndex == RODEO_SENTINEL_END_SPOT_DETACH || endSpotIndex in vehicleFlavor.spotMap )
	transitionFlavor.endSpotIndex = endSpotIndex
	vehicleFlavor.transitionMap[index] <- transitionFlavor

	return transitionFlavor
}


void function OnRodeoVehicleStateEntDestroyed( entity vehicle )
{
	entity vehicleStateEnt = RodeoUtil_GetVehicleRodeoStateEnt( vehicle )
	//
	delete file.vehicleStateMap[ vehicleStateEnt ]
}

#if(false)












//








//




//
//

















//














//







//







//






//














//
//





//
//




//

//
//
//
//















//











//


//



//


//


//



//

//


//





















//











//




//



//





















//






//








//






//













//












//





//
























//

//
//
//
//
//
//
//
//
//
//
//



//
//







//




//
//






















//

//
//


//


















































//







//










//
//
//
//
//
//
//
//
//
#endif


//
//
//
//
//
entity function PROTO_FindRodeoRequestTarget( entity player )
{
	float velFrac    = GraphCapped( Length( player.GetVelocity() ), 175.0, 400.0, 0.0, 1.0 )
	float coneHeight = GraphCapped( velFrac, 0.0, 1.0, 450.0, 450.0 )
	float coneAngle  = GraphCapped( velFrac, 0.0, 1.0, 15.0, 22.0 )
	if ( coneHeight * coneAngle > 10000.0 )
	{
		Warning( "Rodeo request target cone too large (" + coneHeight + ", " + coneAngle + ")" )
		coneHeight = 9999.0 / coneAngle
	}

	array<VisibleEntityInCone> potentialEntities = FindVisibleEntitiesInCone(
		player.EyePosition(), player.GetViewForward(), coneHeight, coneAngle,
		[player], TRACE_MASK_SHOT, VIS_CONE_ENTS_TEST_HITBOXES | VIS_CONE_ENTS_IGNORE_VORTEX, player
	)
	entity targetVehicle                         = null
	foreach( VisibleEntityInCone potentialEntity in potentialEntities )
	{
		if ( potentialEntity.ent.GetScriptName() != "hoverbike_rodeo_proxy" )
		{
			if ( !potentialEntity.ent.IsTitan() )
				continue

			if ( !potentialEntity.ent.IsPlayer() )
				//
				continue
		}

		if ( !CanRiderRodeoTarget( player, potentialEntity.ent ) )
			continue

		//
		//

		targetVehicle = potentialEntity.ent
		break
	}
	return targetVehicle
}

#if(CLIENT)
void function OnPlayerLifestateChanged( entity player, int oldLifeState, int newLifeState )
{
	if ( player != GetLocalViewPlayer() )
		return

	if ( !file.PROTO_IsRodeoEvenUsed )
		return

	if ( oldLifeState != LIFE_ALIVE && newLifeState == LIFE_ALIVE )
	{
		thread PROTO_OfferRodeoRequestPrompt( player )
	}
}

void function PROTO_OfferRodeoRequestPrompt( entity player )
{
	player.EndSignal( "OnDeath" )

	//
	//
	//
	//

	bool isRequestingPromptShown = false
	bool isUsePromptShown        = false
	while( true )
	{
		wait 0.29

		//
		//

		if ( !RodeoState_IsRiderAllowedToRodeo( player ) )
			return

		bool isRodeoing = RodeoState_GetIsPlayerRodeoing( player )
		bool isTitan    = player.IsTitan()

		entity targetVehicle            = PROTO_FindRodeoRequestTarget( player )
		bool shouldShowRequestingPrompt = (!isRodeoing && !isTitan && targetVehicle != null && player.IsInputCommandHeld( IN_USE ))
		bool shouldShowUsePrompt        = (!isRodeoing && !isTitan && targetVehicle != null && !shouldShowRequestingPrompt)

		if ( shouldShowRequestingPrompt )
		{
			//

			if ( !isRequestingPromptShown )
			{
				if ( targetVehicle.IsTitan() )
				{
					AddPlayerHint( 9999.0, 0.1, $"rui/hud/common/rodeo_icon_friendly", "  Rodeoing friendly titan..." ) //
				}
				isRequestingPromptShown = true
			}
		}
		else if ( isRequestingPromptShown )
		{
			//

			HidePlayerHint( "  Rodeoing friendly titan..." ) //
			isRequestingPromptShown = false
		}

		//
		//

		if ( shouldShowUsePrompt )
		{
			if ( !isUsePromptShown )
			{
				if ( targetVehicle.IsTitan() )
				{
					AddPlayerHint( 9999.0, 0.2, $"rui/hud/common/rodeo_icon_friendly", "  %&use_long% to rodeo friendly titan" ) //
				}
				else
				{
					AddPlayerHint( 9999.0, 0.2, $"rui/hud/common/rodeo_icon_friendly", "  %&use_long% to ride" ) //
				}
				isUsePromptShown = true
			}
		}
		else if ( isUsePromptShown )
		{
			//
			HidePlayerHint( "  %&use_long% to rodeo friendly titan" ) //
			HidePlayerHint( "  %&use_long% to ride" ) //
			isUsePromptShown = false
		}

		if ( isRodeoing )
			player.WaitSignal( "RodeoEnded" )

		//
		//

		wait 0.29
	}
}
#endif
#if(false)


//



//






//
































//













//




//
































//



//
//











#endif


