untyped

global function TitanShared_Init
global function CodeCallback_PlayerInTitanCockpit
global function Titan_CreatePhysicsModelsFromParentedModels
global function TemporarilyNonSolidPlayer

#if(false)









#endif

global const TITAN_EJECT_SCREECH	= "titan_eject_screech"
global const TITAN_DECAY_LIMIT		= 0.35 //

global const TITAN_NUCLEAR_CORE_FX_3P = $"P_xo_exp_nuke_3P_alt"
global const TITAN_NUCLEAR_CORE_FX_1P = $"P_xo_exp_nuke_1P_alt"
global const TITAN_NUCLEAR_CORE_NUKE_FX = $"P_xo_nuke_warn_flare"


global enum eCockpitState
{
	Disabled = 0
	Enabled = 1
	NULL = 3
	Open = 5
	Close = 7
	Eject = 9
}

struct
{
	float titanVOEjectNotifyDist = 2000 * 2000
} file


void function TitanShared_Init()
{
	level._titanCrushables <- {}

	RegisterSignal( "TitanBeingEntered" )
	RegisterSignal( "TitanEntered" )
	RegisterSignal( "TitanExit" )
	RegisterSignal( "TitanExitComplete" )
	RegisterSignal( "TitanDecay" )
	RegisterSignal( "TitanEjectionStarted" )
	RegisterSignal( "EjectLand" )
	RegisterSignal( "EjectAttempt" )
	RegisterSignal( "TempAirControl" )

	#if(false)




#endif

	#if(false)







#endif
}

#if(false)











#endif

//
void function Titan_CreatePhysicsModelsFromParentedModels( entity parentedModel, entity soul )
{
	if ( !IsValid( parentedModel ) )
		return

	//
	parentedModel.NotSolid()

/*




















*/

	//
	parentedModel.Hide()
	parentedModel.Kill_Deprecated_UseDestroyInstead()
}

function CodeCallback_PlayerInTitanCockpit( titan, player )
{
	expect entity( titan )
	expect entity( player )

	//
	ClearRecentDamageHistory( player )

	#if(false)
//
//
//
//









#elseif(CLIENT)
		Signal( player, "TitanEntered" )
	#endif
}

#if(false)















































//















#endif //

/*







*/

#if(false)

//








//



//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
































#endif //

bool function ShouldCalloutEjection( entity player, vector titanOrigin, entity titan )
{
	if ( DistanceSqr( titanOrigin, titan.GetOrigin() ) < file.titanVOEjectNotifyDist )
		return true

/*






*/

	return false
}

void function TemporarilyNonSolidPlayer( entity rider )
{
	rider.EndSignal( "OnDeath" )

	OnThreadEnd(
		function () : ( rider )
		{
			if ( IsValid( rider ) )
			{
				rider.Solid()
			}
		}
	)

	rider.NotSolid()
	wait 1.5
}

#if(false)







//


















//










//

















#endif //

void function ClearNuclearBlueSunEffect( table e )
{
	foreach ( fx in e.nukeFX )
	{
		if ( IsValid( fx ) )
			fx.Kill_Deprecated_UseDestroyInstead()
	}
	e.nukeFX.clear()
	e.needToClearNukeFX = false
}

#if(false)













//


//


//





//







//







//

























//





//





































//
//
//
//
//
//
//
//


















#endif //

void function ClearEjectInvulnerability( entity player )
{
	if ( !IsValid( player ) )
		return

	player.EndSignal( "OnDeath" )

	OnThreadEnd(
		function () : (player)
		{
			if ( IsValid( player ) )
				player.ClearInvulnerable()
		}
	)

	wait 0.35
}

void function EjectFlightTracker( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "EjectLand" )
	player.EndSignal( "RodeoStarting" )

	OnThreadEnd(
		function () : (player)
		{
			player.p.pilotEjecting = false
		}
	)

	player.p.pilotEjecting = true

	wait 0.1
	for ( ;; )
	{
		if ( player.IsOnGround() )
			player.Signal( "EjectLand" )

		wait 0.1
	}
}

#if(false)























//











#endif //

void function LookAtEachOther( entity rider, entity player )
{
	rider.EndSignal( "OnDeath" )
	player.EndSignal( "OnDeath" )

	float endTime = Time() + 0.45

	for ( ;; )
	{
		vector org1 = rider.GetOrigin()
		vector org2 = player.GetOrigin()
		vector vec1 = org2 - org1
		vector angles1 = VectorToAngles( vec1 )
		vector vec2 = org1 - org2
		vector angles2 = VectorToAngles( vec2 )

		angles1.x = 0
		angles2.x = 0
		if ( rider.GetParent() == null )
			rider.SetAngles( angles1 )
		if ( player.GetParent() == null )
			player.SetAngles( angles2 )

		if ( Time() >= endTime )
			return

		WaitFrame()
	}
}

#if(false)




















#endif
