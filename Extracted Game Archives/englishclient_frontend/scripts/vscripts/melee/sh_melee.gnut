//
//
//
//

#if CLIENT || UI 
global function MeleeShared_Init

global function Loadout_MeleeSkin
global function MeleeSkin_GetMainWeaponClassname
global function MeleeSkin_GetOffhandWeaponClassname
global function MeleeSkin_GetMenuModel
global function MeleeSkin_GetCharacterFlavor
global function MeleeSkin_GetSortOrdinal
//
//
#endif


#if(CLIENT)
global function DoesWeaponTriggerMeleeAttack
global function DoesWeaponClassTriggerMeleeAttack
global function IsWeaponClassMelee
global function SetObjectCanBeMeleed
global function GetPlayerMeleeAttackWeapon
global function AttackerCanStartMelee
global function IsValidMeleeAttackTarget
#endif

#if(CLIENT)
global function CodeCallback_OnMeleePressed
global function CodeCallback_OnMeleeStartActivity
global function CodeCallback_OnMeleeHeld
global function CodeCallback_OnMeleeReleased
global function CodeCallback_IsValidMeleeAttackTarget
global function CodeCallback_OnMeleeAttackAnimEvent
#endif

#if(false)


#elseif(CLIENT)
global function ClientCodeCallback_ShowMeleePrompt
#endif


//
//
//
//
//
const float MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_ENEMY = 1.0
const float MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_NOT_ENEMY = 0.5

const float MELEE_KNOCKBACK_SCALE = 350.0
const float MELEE_KNOCKBACK_DURATION = 0.25

//
//
//
//



//
//
//
//
//
struct FileStruct_LifetimeLevel
{
	table<ItemFlavor, LoadoutEntry> characterMeleeSkinLoadoutEntryMap

	table<ItemFlavor, ItemFlavor> meleeSkinCharacterMap

	table<ItemFlavor, int> cosmeticFlavorSortOrdinalMap
}
FileStruct_LifetimeLevel& fileLevel



//
//
//
//
//
#if CLIENT || UI 
void function MeleeShared_Init()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	AddCallback_OnItemFlavorRegistered( eItemType.character, OnItemFlavorRegistered_Character )
}
#endif


#if CLIENT || UI 
void function OnItemFlavorRegistered_Character( ItemFlavor characterClass )
{
	array<ItemFlavor> meleeSkinList = RegisterReferencedItemFlavorsFromArray( characterClass, "meleeSkins", "flavor" )
	foreach( ItemFlavor meleeSkin in meleeSkinList )
	{
		fileLevel.meleeSkinCharacterMap[meleeSkin] <- characterClass
		#if(CLIENT)
			//
			//
			PrecacheWeapon( MeleeSkin_GetMainWeaponClassname( meleeSkin ) )
			PrecacheWeapon( MeleeSkin_GetOffhandWeaponClassname( meleeSkin ) )
		#endif
	}

	MakeItemFlavorSet( meleeSkinList, fileLevel.cosmeticFlavorSortOrdinalMap )

	LoadoutEntry entry = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, "character_meleeskin_for_" + ItemFlavor_GetGUIDString( characterClass ) )
	entry.pdefSectionKey = "character " + ItemFlavor_GetGUIDString( characterClass )
	entry.DEV_category = "character_meleeskins"
	entry.DEV_name = ItemFlavor_GetHumanReadableRef( characterClass ) + " Melee Skin"
	entry.defaultItemFlavor = meleeSkinList[0]
	entry.validItemFlavorList = meleeSkinList
	entry.isSlotLocked = bool function( EHI playerEHI ) {
		return !IsLobby()
	}
	entry.isActiveConditions = { [Loadout_CharacterClass()] = { [characterClass] = true, }, }
	entry.networkTo = eLoadoutNetworking.PLAYER_EXCLUSIVE
	fileLevel.characterMeleeSkinLoadoutEntryMap[characterClass] <- entry

	#if(false)



#endif
}

int function MeleeSkin_GetSortOrdinal( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin )

	return fileLevel.cosmeticFlavorSortOrdinalMap[flavor]
}

#endif



//
//
//
//
//
#if CLIENT || UI 
LoadoutEntry function Loadout_MeleeSkin( ItemFlavor character )
{
	Assert( ItemFlavor_GetType( character ) == eItemType.character )

	return fileLevel.characterMeleeSkinLoadoutEntryMap[character]
}
#endif


//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


#if CLIENT || UI 
string function MeleeSkin_GetMainWeaponClassname( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeSkin ), "mainWeaponClassname" )
}
#endif


#if CLIENT || UI 
string function MeleeSkin_GetOffhandWeaponClassname( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeSkin ), "offhandWeaponClassname" )
}
#endif


#if CLIENT || UI 
asset function MeleeSkin_GetMenuModel( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	string mainWeaponClassname = MeleeSkin_GetMainWeaponClassname( meleeSkin )
	return GetWeaponInfoFileKeyFieldAsset_Global( mainWeaponClassname, "viewmodel" )
}
#endif


#if CLIENT || UI 
ItemFlavor function MeleeSkin_GetCharacterFlavor( ItemFlavor character )
{
	Assert( ItemFlavor_GetType( character ) == eItemType.melee_skin )

	return fileLevel.meleeSkinCharacterMap[character]
}
#endif


#if(CLIENT)
bool function DoesWeaponTriggerMeleeAttack( entity weapon )
{
	return (weapon.IsWeaponMelee() || weapon.GetWeaponSettingBool( eWeaponVar.attack_button_presses_melee ))
}
#endif


#if(CLIENT)
bool function DoesWeaponClassTriggerMeleeAttack( string weaponName )
{
	return (IsWeaponClassMelee( weaponName ) || GetWeaponInfoFileKeyField_GlobalBool( weaponName, "attack_button_presses_melee" ))
}
#endif


#if(CLIENT)
bool function IsWeaponClassMelee( string weaponName )
{
	//
	int fireMode = expect int(GetWeaponInfoFileKeyField_Global( weaponName, "fire_mode" ))
	return (fireMode == eWeaponFireMode.offhandMelee || fireMode == eWeaponFireMode.offhandMeleeHybrid)
}
#endif


#if(CLIENT)
void function SetObjectCanBeMeleed( entity ent, bool value )
{
	Assert( !ent.IsPlayer(), ent + " should not be a player. This is for non-player, non-NPC entities." )
	Assert( !ent.IsNPC(), ent + " should not be an NPC. This is for non-player, non-NPC entities." )

	ent.e.canBeMeleed = value
}
#endif


#if(CLIENT)
entity function GetPlayerMeleeAttackWeapon( entity player )
{
	entity meleeAttackWeapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand ) //
	if ( !IsValid( meleeAttackWeapon ) || !meleeAttackWeapon.IsWeaponMelee() )
	{
		meleeAttackWeapon = player.GetOffhandWeapon( OFFHAND_MELEE ) //

		if ( !IsValid( meleeAttackWeapon ) )
			return null
	}

	Assert( meleeAttackWeapon.IsWeaponMelee() )

	return meleeAttackWeapon
}
#endif


#if(CLIENT)
bool function IsValidMeleeAttackTarget( entity attacker, entity inputWeaponOrNull, entity attackWeapon, entity target )
{
	Assert( attacker != target )

	if ( target.IsBreakableGlass() )
		return true //

	if ( !IsAlive( target ) )
		return false

	if ( IsFriendlyTeam( attacker.GetTeam(), target.GetTeam() ) )
		return false

	if ( !attacker.DoesShareRealms( target ) )
		return false

	if ( IsValid( attackWeapon ) && !attackWeapon.GetMeleeCanHitHumanSized() && IsHumanSized( target ) )
		return false

	if ( target.IsPlayer() || target.IsNPC() )
	{
		//
		if ( target.ContextAction_IsMeleeExecutionTarget() )
			return false
	}
	else
	{
		if ( !target.e.canBeMeleed )
			return false
	}

	return true
}
#endif



//
//
//
//
//
#if(CLIENT)
entity function GetMeleeAttackLungeTarget( entity attacker, entity meleeAttackWeapon )
{
	return PlayerMelee_LungeConeTrace( attacker, meleeAttackWeapon, SHARED_CB_IS_VALID_MELEE_ATTACK_TARGET )
}
#endif


#if(CLIENT)
bool function AttackerCanStartMelee( entity attacker, entity inputWeaponOrNull, entity attackWeapon )
{
	Assert( attacker.IsPlayer() )

	if ( !IsAlive( attacker ) )
		return false

	if ( attacker.PlayerMelee_GetState() != PLAYER_MELEE_STATE_NONE )
		return false

	if ( attacker.IsWeaponSlotDisabled( eActiveInventorySlot.mainHand ) ) //
		return false

	//
	//

	if ( attacker.Lunge_IsActive() )
		return false

	if ( IsValid( inputWeaponOrNull ) && !GetCurrentPlaylistVarBool( "quick_melee_enabled", true )
			&& inputWeaponOrNull == attacker.GetOffhandWeapon( OFFHAND_MELEE ) )
		return false

	return true
}
#endif


#if(CLIENT)
bool function CodeCallback_IsValidMeleeAttackTarget( entity attacker, entity target )
{
	entity meleeInputWeapon  = null //
	entity meleeAttackWeapon = GetPlayerMeleeAttackWeapon( attacker )

	if ( !IsValidMeleeAttackTarget( attacker, meleeInputWeapon, meleeAttackWeapon, target ) )
		return false

	return true
}
#endif


#if(CLIENT)
void function CodeCallback_OnMeleePressed( entity attacker, entity meleeInputWeapon )
{
	attacker.p.TEMP_lastMeleeInputWeapon = meleeInputWeapon

	entity meleeAttackWeapon = GetPlayerMeleeAttackWeapon( attacker )

	if ( !AttackerCanStartMelee( attacker, meleeInputWeapon, meleeAttackWeapon ) )
		return

	attacker.PlayerMelee_StartAttack( PLAYER_MELEE_STATE_HUMAN_KICK_ATTACK )

	//
	//
	{
		entity lungeTarget = GetMeleeAttackLungeTarget( attacker, meleeAttackWeapon )

		vector eyeTraceHitPos
		if ( !IsValid( lungeTarget ) )
		{
			TraceResults eyeTrace = TraceLine(
				attacker.EyePosition(), attacker.EyePosition() + 150.0 * attacker.GetViewVector(),
				[ attacker ], TRACE_MASK_NPCWORLDSTATIC, TRACE_COLLISION_GROUP_NONE
			)
			lungeTarget = eyeTrace.hitEnt
			eyeTraceHitPos = eyeTrace.endPos
		}

		if ( IsValid( lungeTarget ) && IsDoor( lungeTarget ) && GetCurrentPlaylistVarBool( "blockable_door_can_be_hurt_by_special_kick", true ) )
		{
			meleeAttackWeapon.AddMod( "proto_door_kick" )

			attacker.Lunge_SetTargetPosition( <eyeTraceHitPos.x, eyeTraceHitPos.y, lungeTarget.GetWorldSpaceCenter().z - 52 > ) //
 			attacker.Lunge_SetSmoothTime( 0.7 )
			attacker.Lunge_EnableFlying()
		}
		else if ( meleeAttackWeapon.HasMod( "proto_door_kick" ) )
		{
			meleeAttackWeapon.RemoveMod( "proto_door_kick" )
		}
	}

	#if(false)

#endif

	attacker.SetSelectedOffhand( eActiveInventorySlot.mainHand, meleeAttackWeapon )
}
#endif


#if(CLIENT)
void function CodeCallback_OnMeleeStartActivity( entity attacker, entity meleeAttackWeapon )
{
	if ( GetBugReproNum() == 53982 )
		Assert( attacker.PlayerMelee_IsAttackActive() )
	else if ( !attacker.PlayerMelee_IsAttackActive() )
		return //

	const float STUN_EFFECT_CUTOFF = 0.05
	float movestunEffect = StatusEffect_GetSeverity( attacker, eStatusEffect.move_slow )
	bool movestunBlocked = (movestunEffect > STUN_EFFECT_CUTOFF)
	if ( !movestunBlocked )
	{
		entity lungeTarget = GetMeleeAttackLungeTarget( attacker, meleeAttackWeapon )

		if ( IsValid( lungeTarget ) )
		{
			bool lungeStartWasSuccessful = attacker.Lunge_SetTargetEntity( lungeTarget )

			if ( lungeStartWasSuccessful && attacker.IsOnGround() )
				attacker.Lunge_LockPitch( true )
		}
	}
}
#endif


#if(CLIENT)
void function CodeCallback_OnMeleeHeld( entity player, entity weapon )
{
	//
}
#endif


#if(CLIENT)
void function CodeCallback_OnMeleeReleased( entity player, entity weapon )
{
	//
}
#endif


#if(CLIENT)
void function CodeCallback_OnMeleeAttackAnimEvent( entity attacker, entity meleeAttackWeapon )
{
	Assert( IsValid( attacker ) )

	if ( !attacker.PlayerMelee_IsAttackActive() )
		return //

	Assert( attacker.PlayerMelee_GetState() == PLAYER_MELEE_STATE_HUMAN_KICK_ATTACK )
	Assert( !attacker.PlayerMelee_GetAttackHitEntity() )

	#if(false)

#endif

	float attackRange = meleeAttackWeapon.GetMeleeAttackRange()

	//
	table legacyTraceResults = PlayerMelee_AttackTrace( attacker, attackRange, (bool function( entity attacker, entity target ) : (meleeAttackWeapon) {
		return IsValidMeleeAttackTarget( attacker, null, meleeAttackWeapon, target )
	}) )

	entity target         = expect entity(legacyTraceResults.ent)
	vector endPosition    = expect vector(legacyTraceResults.position)
	int surfaceProp       = expect int(legacyTraceResults.surfaceProp)
	int staticPropID      = expect int(legacyTraceResults.staticPropID)
	int impactEffectFlags = expect int(legacyTraceResults.impactEffectFlags)
	int codeDamageType    = expect int(legacyTraceResults.damageType)
	vector startPosition  = expect vector(legacyTraceResults.startPosition)
	vector hitNormal      = Normalize( startPosition - endPosition )
	int meleeAttackWeaponImpactTableIndex = meleeAttackWeapon.GetImpactTableIndex()

	#if(false)




#endif

	if ( IsValid( target ) )
	{
		//
		//

		//
		if ( !attacker.PlayerMelee_IsAttackActive() )
			return

		//
		attacker.PlayerMelee_SetAttackHitEntity( target )
		if ( !target.IsWorld() )
			attacker.PlayerMelee_SetAttackRecoveryShouldBeQuick( true )

		//
		if ( target.IsBreakableGlass() )
		{
			#if(false)

#endif //
		}
		else
		{
			//
			bool targetIsEnemy  = IsEnemyTeam( attacker.GetTeam(), target.GetTeam() )
			float severityScale = (targetIsEnemy ? MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_ENEMY : MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_NOT_ENEMY)
			meleeAttackWeapon.DoMeleeHitConfirmation( severityScale )

			//
			#if(false)











//
//
//
//

//
//









#endif
		}
	}
	else
	{
		//
		//
		//
		//

		vector impactEffectTraceBegin = meleeAttackWeapon.GetAttackPosition()
		vector impactEffectTraceEnd = impactEffectTraceBegin + (attackRange * meleeAttackWeapon.GetAttackDirection())
		TraceResults impactEffectTraceResult = TraceLineHighDetail( impactEffectTraceBegin, impactEffectTraceEnd, attacker, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE )
		if ( impactEffectTraceResult.hitEnt )
		{
			target = impactEffectTraceResult.hitEnt
			startPosition = impactEffectTraceBegin
			endPosition = impactEffectTraceResult.endPos
			hitNormal = impactEffectTraceResult.surfaceNormal
			surfaceProp = impactEffectTraceResult.surfaceProp
			staticPropID = impactEffectTraceResult.staticPropID
			#if(false)

#endif
		}
	}

	//
	//
	//
	//

	if ( IsValid( target ) )
	{
		attacker.DispatchImpactEffects( target, startPosition, endPosition, hitNormal, surfaceProp, staticPropID, codeDamageType, meleeAttackWeaponImpactTableIndex, attacker, impactEffectFlags )
	}

	#if(false)
//










#endif

	//
	if ( IsValid( target ) )
	{
		vector lookDirection    = attacker.GetViewForward()
		vector pushBackVelocity = lookDirection * MELEE_KNOCKBACK_SCALE

		if ( target.IsPlayer() || target.IsNPC() || target.IsPlayerDecoy() )
		{
			vector targetDirection = target.GetWorldSpaceCenter() - attacker.GetWorldSpaceCenter()
			if ( DotProduct( lookDirection, targetDirection ) < 0 )
			{
				pushBackVelocity = -pushBackVelocity
			}
		}

		if ( target.IsPlayer() )
		{
			target.KnockBack( pushBackVelocity, MELEE_KNOCKBACK_DURATION )
		}
		else if ( !IsWorldSpawn( target ) && target.e.canBeMeleed )
		{
			#if(false)


#endif
		}

		//
		attacker.PlayerMelee_EndAttack()

		vector attackerKnockBackVelocity = -pushBackVelocity
		attackerKnockBackVelocity.z = 0.0
		attacker.KnockBack( attackerKnockBackVelocity * 0.5, 0.25 )
	}
}
#endif


#if(false)




#endif


#if(false)




#endif


#if(CLIENT)
bool function ClientCodeCallback_ShowMeleePrompt( entity player )
{
	return false
}
#endif



//
//
//
//
//
#if(false)





#endif //


