//

#if(UI)
global function ShLoadouts_VMInit
#endif

#if CLIENT || UI 
global function ShLoadouts_LevelInit_Begin
global function ShLoadouts_LevelInit_Finish
global function ShLoadouts_OnPlayerEHICreated
#endif
#if(UI)
global function ShLoadouts_LevelShutdown
#endif

//
//

global function RegisterLoadoutSlot

global function LoadoutSlot_IsReady
global function LoadoutSlot_GetItemFlavor
global function LoadoutSlot_GetInteger
global function LoadoutSlot_WaitForItemFlavor
//
//
//
global function LoadoutSlot_GetRawStorageContents

global function AddCallback_ItemFlavorLoadoutSlotDidChange_AnyPlayer
global function AddCallback_IntegerLoadoutSlotDidChange_AnyPlayer
global function RemoveCallback_ItemFlavorLoadoutSlotDidChange_AnyPlayer
global function RemoveCallback_IntegerLoadoutSlotDidChange_AnyPlayer
global function AddCallback_ItemFlavorLoadoutSlotDidChange_SpecificPlayer
global function RemoveCallback_ItemFlavorLoadoutSlotDidChange_SpecificPlayer
#if(false)


#elseif CLIENT || UI 
global function RequestSetItemFlavorLoadoutSlot
#if(DEV)
global function DEV_RequestSetItemFlavorLoadoutSlot
#endif
#endif
global function IsItemFlavorValidForLoadoutSlot
global function GetValidItemFlavorsForLoadoutSlot
global function IsItemFlavorUnlockedForLoadoutSlot
global function GetUnlockedItemFlavorsForLoadoutSlot
global function GetRandomGoodItemFlavorForLoadoutSlot
global function GetDefaultItemFlavorForLoadoutSlot

global function GetAllLoadoutSlots
global function IsLoadoutSlotActive

#if(DEV)
global function DEV_GetValidItemFlavorsForLoadoutSlotForDev
#endif

//
//

#if(false)

#endif

#if(CLIENT)
global function ServerToClient_LoadoutSlotDidChange
#endif

#if(UI)
global function ClientToUI_RefreshLoadoutSlot
global function GetLoadoutItemsSortedForMenu
#endif

//
//
//


const bool LOADOUT_NETVAR_DEBUG_PRINTS = false



//
//
//
//
//

global typedef LoadoutEntry_IsSlotLocked bool functionref( EHI playerEHI )
#if(false)

#endif
global typedef ItemFlavorLoadoutEntry_IsItemFlavorUnlockedFuncType bool functionref( EHI playerEHI, ItemFlavor itemFlavor )
global typedef ItemFlavorLoadoutSlotDidChangeFuncType void functionref( EHI playerEHI, ItemFlavor flavor )
global typedef IntegerLoadoutSlotDidChangeFuncType void functionref( EHI playerEHI, int value )

global enum eLoadoutNetworking
{
	SERVER_ONLY, //
	PLAYER_EXCLUSIVE, //
	PLAYER_GLOBAL, //
}

global enum eLoadoutEntryType
{
	ITEM_FLAVOR,
	INTEGER,
}

global struct LoadoutEntry
{
	int    _____INTERNAL_entryIndex = -1
	string id = ""
	int    type = -1

	string pdefSectionKey = "! general"
	int    stryderCharDataArrayIndex = ePlayerStryderCharDataArraySlots.INVALID //

	int                                            networkTo = eLoadoutNetworking.PLAYER_EXCLUSIVE
	string ornull                                  networkVarName = ""
	LoadoutEntry_IsSlotLocked                      isSlotLocked = null //
	table<LoadoutEntry, table<ItemFlavor, bool> >  isActiveConditions = {}
	#if(false)
//
#endif
	string DEV_category = "Other"
	string DEV_name = "?"
	int    _____INTERNAL_nvIndex

	//
	ItemFlavor&                                         defaultItemFlavor //
	array<ItemFlavor>                                   validItemFlavorList = []
	array<ItemFlavor>                                   validItemFlavorList_CopyForRandomizing
	ItemFlavorLoadoutEntry_IsItemFlavorUnlockedFuncType isItemFlavorUnlocked = null //
	array<ItemFlavorLoadoutSlotDidChangeFuncType>       changeCallbacks_ItemFlavor = []
	table<ItemFlavor, array<LoadoutEntry> >             _____INTERNAL_dependentsByItemFlav = {}
	table<ItemFlavor, int>                              _____INTERNAL_itemFlavorNetworkIndexMap = {}
	table<SettingsAssetGUID, int>                       _____INTERNAL_itemFlavorGUIDNetworkIndexMap = {}
	table<int, ItemFlavor>                              _____INTERNAL_networkIndexItemFlavorMap = {}
	#if(DEV)
		array<ItemFlavor>      _____INTERNAL_DEV_validItemFlavorsForDev = []
	#endif

	//
	int                                        defaultInteger = INT_MIN
	int                                        minInteger = 0
	int                                        maxInteger = 0
	array<IntegerLoadoutSlotDidChangeFuncType> changeCallbacks_Integer = []

	//
	//
}



//
//
//
//
//
const int SLOT_CONTENTS_SENTINEL_INVALID = -9999
const int SLOT_CONTENTS_SENTINEL_NOTREADY = 0
const int SLOT_CONTENTS_FIRST_VALID_ITEM = 2

const int PERSISTENT_DATA_INVALID_SENTINEL = 0

struct LoadoutNetworkVarInfo
{
	int                    nvIndex
	string                 fullNetworkVarName
	int                    type = -1
	array<LoadoutEntry>    usedByEntries = []

	//
	array<ItemFlavor>      possibleItemFlavorList = [] //
	table<ItemFlavor, int> itemFlavorNetworkIndexMap = {}
}

struct FileStruct_LifetimeLevel
{
	bool                         isInitialized = false
	array<LoadoutEntry>          loadoutSlotEntries = []

	#if CLIENT || UI //
		table<string, LoadoutNetworkVarInfo> networkVars = {}
	#endif

	#if(UI)
		table<ItemFlavor, bool> TEMP_filteredItems
	#endif
}
FileStruct_LifetimeLevel& fileLevel



//
//
//
//
//

#if UI && DEV 
bool DEV_resendAllCacheData = false //
#endif

#if(UI)
void function ShLoadouts_VMInit()
{
	#if UI && DEV 
		if ( IsFullyConnected() )
			DEV_resendAllCacheData = true
	#endif
}
#endif


void function ShLoadouts_LevelInit_Begin()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	#if(false)
//








#endif
}


void function ShLoadouts_LevelInit_Finish()
{
	#if(CLIENT)
		Remote_RegisterClientFunction( "ServerToClient_LoadoutSlotDidChange", "int", 0, INT_MAX, "int", 0, fileLevel.loadoutSlotEntries.len() )
	#endif

	foreach( LoadoutEntry entry in fileLevel.loadoutSlotEntries )
	{
		if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
		{
			Assert( entry.validItemFlavorList.len() > 0, "Entry " + entry.id + " had an empty validItemFlavorList" )
			Assert( IsItemFlavorStructValid( entry.defaultItemFlavor ), "entry.defaultValue must have a valid value." )
			//
		}
		else if ( entry.type == eLoadoutEntryType.INTEGER )
		{
			Assert( !IsItemFlavorStructValid( entry.defaultItemFlavor ) )
			Assert( entry.validItemFlavorList.len() == 0 )
			Assert( entry.isItemFlavorUnlocked == null )
			Assert( entry.minInteger >= 0 )
			Assert( entry.maxInteger <= INT_MAX )
			Assert( entry.maxInteger > entry.minInteger )
			Assert( entry.defaultInteger >= entry.minInteger && entry.defaultInteger <= entry.maxInteger )
		}

		RegisterSignal( "Loadout_" + entry.id + "_Ready" )

		if ( entry.networkTo == eLoadoutNetworking.PLAYER_GLOBAL )
		{
			#if(CLIENT)
				int desiredNetworkVarType = (entry.type == eLoadoutEntryType.INTEGER ? SNVT_BIG_INT : SNVT_UNSIGNED_INT)
			#endif

			Assert( entry.networkVarName != "", "LoadoutEntry.networkVarName must be provided if networkTo is set." )
			LoadoutNetworkVarInfo nvInfo
			string fullNetworkVarName = "Loadout_" + expect string(entry.networkVarName)
			entry.networkVarName = fullNetworkVarName
			if ( fullNetworkVarName in fileLevel.networkVars )
			{
				nvInfo = fileLevel.networkVars[fullNetworkVarName]
				#if(CLIENT)
					Assert( nvInfo.type == desiredNetworkVarType )
				#endif
			}
			else
			{
				nvInfo.nvIndex = fileLevel.networkVars.len()
				nvInfo.fullNetworkVarName = fullNetworkVarName
				fileLevel.networkVars[fullNetworkVarName] <- nvInfo
				#if(CLIENT)
					nvInfo.type = desiredNetworkVarType
					RegisterNetworkedVariable(
						nvInfo.fullNetworkVarName, SNDC_PLAYER_GLOBAL,
						nvInfo.type, SLOT_CONTENTS_SENTINEL_NOTREADY
					)
				#endif

				#if(CLIENT)
					RegisterNetworkedVariableChangeCallback_int( fullNetworkVarName, void function( entity player, int old, int new, bool actuallyChanged ) : ( nvInfo )
					{
						EHI playerEHI         = ToEHI( player )
						EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )

						#if(false)



#endif

						new = player.GetPlayerNetInt( nvInfo.fullNetworkVarName ) //

						if ( !ehiss.isConnected )
							return

						if ( new == ehiss.netVarsLastSeenValuesMap[nvInfo.nvIndex] )
							return

						ehiss.netVarsLastSeenValuesMap[nvInfo.nvIndex] = new

						#if(DEV)
							LoadoutEntry ornull found = null
						#endif
						foreach( LoadoutEntry entry in nvInfo.usedByEntries )
						{
							if ( IsLoadoutSlotCurrentlyNetworked( playerEHI, entry ) )
							{
								#if(DEV)
									Assert( found == null, "Attempted to network two loadout slots using the same network variable name at the same time"
											+ " (slot 1: \"" + expect LoadoutEntry(found).id + "\", slot 2: \"" + entry.id + "\")." )
									if ( found != null )
										continue
									found = entry
								#endif
								HandleLoadoutSlotNetworkVarChanged( playerEHI, entry, old, new, actuallyChanged )
								#if(!DEV)
									break
								#endif
							}
						}
					} )
				#endif
			}
			//
			//
			//
			//
			//
			//
			//

			entry._____INTERNAL_nvIndex = nvInfo.nvIndex

			nvInfo.usedByEntries.append( entry )

			if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
			{
				foreach ( int arrayIndex, ItemFlavor itemFlavor in entry.validItemFlavorList )
				{
					//

					int networkIndex
					if ( itemFlavor in nvInfo.itemFlavorNetworkIndexMap )
					{
						networkIndex = nvInfo.itemFlavorNetworkIndexMap[itemFlavor]
					}
					else
					{
						networkIndex = SLOT_CONTENTS_FIRST_VALID_ITEM + arrayIndex
						Assert( networkIndex < 1000, "Too many possible items in loadout slot: " + entry.id )
						nvInfo.possibleItemFlavorList.append( itemFlavor )
						nvInfo.itemFlavorNetworkIndexMap[itemFlavor] <- networkIndex
					}
					entry._____INTERNAL_itemFlavorNetworkIndexMap[itemFlavor] <- networkIndex
					entry._____INTERNAL_itemFlavorGUIDNetworkIndexMap[ItemFlavor_GetGUID( itemFlavor )] <- networkIndex
					entry._____INTERNAL_networkIndexItemFlavorMap[networkIndex] <- itemFlavor
				}
			}
		}
		else
		{
			if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
			{
				foreach ( int arrayIndex, ItemFlavor itemFlavor in entry.validItemFlavorList )
				{
					//

					int fakeNetworkIndex = SLOT_CONTENTS_FIRST_VALID_ITEM + arrayIndex
					entry._____INTERNAL_itemFlavorNetworkIndexMap[itemFlavor] <- fakeNetworkIndex
					entry._____INTERNAL_itemFlavorGUIDNetworkIndexMap[ItemFlavor_GetGUID( itemFlavor )] <- fakeNetworkIndex
					entry._____INTERNAL_networkIndexItemFlavorMap[fakeNetworkIndex] <- itemFlavor
				}

				if ( entry.networkTo == eLoadoutNetworking.PLAYER_EXCLUSIVE )
				{
					Assert( entry.networkVarName == "", "LoadoutEntry.networkVarName should only be provided if networkTo is PLAYER_GLOBAL." )
				}
				else if ( entry.networkTo == eLoadoutNetworking.SERVER_ONLY )
				{
					Assert( entry.networkVarName == "", "LoadoutEntry.networkVarName should only be provided if networkTo is PLAYER_GLOBAL." )
					//
				}
				else Assert( false, "Invalid networkTo setting on loadout slot \"" + entry.id + "\": " + entry.networkTo )
			}
		}

		if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
		{
			Assert( entry.validItemFlavorList.len() > 0, "No item flavors are registered that are valid for loadout slot '" + entry.id + "'" )
			entry.validItemFlavorList_CopyForRandomizing = clone entry.validItemFlavorList
			#if(DEV)
				entry._____INTERNAL_DEV_validItemFlavorsForDev = clone entry.validItemFlavorList
				//
			#endif
		}

		foreach( LoadoutEntry dependencyEntry, table<ItemFlavor, bool> flavorSet in entry.isActiveConditions )
		{
			Assert( dependencyEntry.type == eLoadoutEntryType.ITEM_FLAVOR )

			foreach( ItemFlavor flavor, bool unused in flavorSet )
			{
				array<LoadoutEntry> dependentsForFlavor
				if ( flavor in dependencyEntry._____INTERNAL_dependentsByItemFlav )
					dependentsForFlavor = dependencyEntry._____INTERNAL_dependentsByItemFlav[flavor]
				else
					dependencyEntry._____INTERNAL_dependentsByItemFlav[flavor] <- dependentsForFlavor

				dependentsForFlavor.append( entry )
			}
		}
	}

	#if(DEV)
		if ( DEV_ShouldIgnorePersistence() )
			Warning( "loadouts_ignore_persistence (ConVar) is enabled" )
	#endif

	fileLevel.isInitialized = true

	//
	//
	//
	//
}


#if(UI)
void function ShLoadouts_LevelShutdown()
{
	fileLevel.isInitialized = false
}
#endif



//
//
//
//
//
LoadoutEntry function RegisterLoadoutSlot( int type, string id )
{
	Assert( !fileLevel.isInitialized, "Cannot call RegisterLoadoutSlot after initialization has finished." )
	Assert( type == eLoadoutEntryType.ITEM_FLAVOR || type == eLoadoutEntryType.INTEGER )

	#if(DEV)
		foreach( LoadoutEntry otherEntry in fileLevel.loadoutSlotEntries )
			Assert( id != otherEntry.id, "Found loadout slots with the same id: " + id )
	#endif

	LoadoutEntry entry
	entry._____INTERNAL_entryIndex = fileLevel.loadoutSlotEntries.len()
	entry.id = id
	entry.type = type
	fileLevel.loadoutSlotEntries.append( entry )

	return entry
}


//
bool function LoadoutSlot_IsReady( EHI playerEHI, LoadoutEntry entry )
{
	//
	//
	//
	//

	int slotContentsIndex = GetLoadoutSlotContentsIndexInternal( playerEHI, entry )
	return slotContentsIndex != SLOT_CONTENTS_SENTINEL_NOTREADY
}


ItemFlavor function LoadoutSlot_GetItemFlavor( EHI playerEHI, LoadoutEntry entry )
{
	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	int slotContentsIndex = GetLoadoutSlotContentsIndexInternal( playerEHI, entry )
	Assert( slotContentsIndex != SLOT_CONTENTS_SENTINEL_NOTREADY, "LoadoutSlot_GetItemFlavor used on a loadout slot that was not ready." )

	return ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )
}


int function LoadoutSlot_GetInteger( EHI playerEHI, LoadoutEntry entry )
{
	Assert( entry.type == eLoadoutEntryType.INTEGER )

	int slotContentsIndex = GetLoadoutSlotContentsIndexInternal( playerEHI, entry )
	Assert( slotContentsIndex != SLOT_CONTENTS_SENTINEL_NOTREADY, "LoadoutSlot_GetItemFlavor used on a loadout slot that was not ready." )

	return entry.minInteger + (slotContentsIndex - SLOT_CONTENTS_FIRST_VALID_ITEM)
}


ItemFlavor function LoadoutSlot_WaitForItemFlavor( EHI playerEHI, LoadoutEntry entry )
{
	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	int slotContentsIndex
	while ( true )
	{
		#if(false)
//
//
//
#else
			//
			//
			//
		#endif
		slotContentsIndex = GetLoadoutSlotContentsIndexInternal( playerEHI, entry )
		if ( slotContentsIndex != SLOT_CONTENTS_SENTINEL_NOTREADY )
			break

		WaitSignal( WaitForEHISignalDummy( playerEHI ), "Loadout_" + entry.id + "_Ready" )
	}

	return ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )
}


//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


int function LoadoutSlot_GetRawStorageContents( EHI playerEHI, LoadoutEntry entry )
{
	int slotContentsIndex = GetLoadoutSlotContentsIndexInternal( playerEHI, entry )
	Assert( slotContentsIndex != SLOT_CONTENTS_SENTINEL_NOTREADY, "LoadoutSlot_GetRawStorageContents used on a loadout slot that was not ready." )

	if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
	{
		ItemFlavor flav = ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )
		return ItemFlavor_GetGUID( flav )
	}

	return slotContentsIndex //
}


void function AddCallback_ItemFlavorLoadoutSlotDidChange_AnyPlayer( LoadoutEntry entry, ItemFlavorLoadoutSlotDidChangeFuncType callback, bool shouldCheckRegistered = true )
{
	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	if ( shouldCheckRegistered )
		Assert( !entry.changeCallbacks_ItemFlavor.contains( callback ), "Tried to add a callback that was already added" )
	else if ( entry.changeCallbacks_ItemFlavor.contains( callback ) )
		return

	entry.changeCallbacks_ItemFlavor.append( callback )
}


void function AddCallback_IntegerLoadoutSlotDidChange_AnyPlayer( LoadoutEntry entry, IntegerLoadoutSlotDidChangeFuncType callback )
{
	Assert( entry.type == eLoadoutEntryType.INTEGER )
	Assert( !entry.changeCallbacks_Integer.contains( callback ), "Tried to add a callback that was already added" )

	entry.changeCallbacks_Integer.append( callback )
}


void function RemoveCallback_ItemFlavorLoadoutSlotDidChange_AnyPlayer( LoadoutEntry entry, ItemFlavorLoadoutSlotDidChangeFuncType callback, bool shouldCheckRegistered = true )
{
	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	if ( shouldCheckRegistered )
		Assert( entry.changeCallbacks_ItemFlavor.contains( callback ), "Tried to remove a callback that was not added" )
	else if ( !entry.changeCallbacks_ItemFlavor.contains( callback ) )
		return

	entry.changeCallbacks_ItemFlavor.fastremovebyvalue( callback )
}


void function RemoveCallback_IntegerLoadoutSlotDidChange_AnyPlayer( LoadoutEntry entry, IntegerLoadoutSlotDidChangeFuncType callback )
{
	Assert( entry.type == eLoadoutEntryType.INTEGER )
	Assert( entry.changeCallbacks_Integer.contains( callback ), "Tried to remove a callback that was not added" )

	entry.changeCallbacks_Integer.fastremovebyvalue( callback )
}


void function AddCallback_ItemFlavorLoadoutSlotDidChange_SpecificPlayer( EHI playerEHI, LoadoutEntry entry, ItemFlavorLoadoutSlotDidChangeFuncType callback, bool shouldCheckRegistered = true )
{
	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )

	array<ItemFlavorLoadoutSlotDidChangeFuncType> changeCallbacks
	if ( entry._____INTERNAL_entryIndex in ehiss.itemFlavorLoadoutSlotChangedCallbacksMap )
		changeCallbacks = ehiss.itemFlavorLoadoutSlotChangedCallbacksMap[entry._____INTERNAL_entryIndex]
	else
		ehiss.itemFlavorLoadoutSlotChangedCallbacksMap[entry._____INTERNAL_entryIndex] <- changeCallbacks

	if ( shouldCheckRegistered )
		Assert( !changeCallbacks.contains( callback ), "Tried to add a callback that was already added" )
	else if ( changeCallbacks.contains( callback ) )
		return

	changeCallbacks.append( callback )
}


void function RemoveCallback_ItemFlavorLoadoutSlotDidChange_SpecificPlayer( EHI playerEHI, LoadoutEntry entry, ItemFlavorLoadoutSlotDidChangeFuncType callback, bool shouldCheckRegistered = true )
{
	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )

	array<ItemFlavorLoadoutSlotDidChangeFuncType> changeCallbacks
	if ( entry._____INTERNAL_entryIndex in ehiss.itemFlavorLoadoutSlotChangedCallbacksMap )
		changeCallbacks = ehiss.itemFlavorLoadoutSlotChangedCallbacksMap[entry._____INTERNAL_entryIndex]
	else
		ehiss.itemFlavorLoadoutSlotChangedCallbacksMap[entry._____INTERNAL_entryIndex] <- changeCallbacks

	if ( shouldCheckRegistered )
		Assert( changeCallbacks.contains( callback ), "Tried to remove a callback that was not added" )
	else if ( !changeCallbacks.contains( callback ) )
		return

	changeCallbacks.fastremovebyvalue( callback )
}


//
//
//
//


#if(false)






#endif


#if(false)









#endif


#if CLIENT || UI 
void function RequestSetItemFlavorLoadoutSlot( EHI playerEHI, LoadoutEntry entry, ItemFlavor itemFlavor )
{
	Assert( playerEHI == LocalClientEHI(), "Tried to use RequestSetLoadoutSlot on a different player" )

	//

	int seqNum            = 0 //
	int slotContentsIndex = ConvertItemFlavorToLoadoutSlotContentsIndex( entry, itemFlavor )

	string commandString = ("loadouts_set"
			+ " " + seqNum
			+ " " + entry._____INTERNAL_entryIndex
			+ " " + slotContentsIndex)

	#if(CLIENT)
		GetLocalClientPlayer().ClientCommand( commandString )
	#elseif(UI)
		ClientCommand( commandString ) //
	#endif
}
#endif


#if ( CLIENT || UI ) && DEV 
void function DEV_RequestSetItemFlavorLoadoutSlot( EHI playerEHI, LoadoutEntry entry, ItemFlavor itemFlavor )
{
	Assert( playerEHI == LocalClientEHI(), "Tried to use DEV_RequestSetLoadoutSlot on a different player" )

	string commandString = "loadouts_devset " + entry.id + " " + ItemFlavor_GetHumanReadableRef( itemFlavor )

	#if(CLIENT)
		GetLocalClientPlayer().ClientCommand( commandString )
	#elseif(UI)
		ClientCommand( commandString )
	#endif
}
#endif


bool function IsItemFlavorValidForLoadoutSlot( EHI playerEHI, LoadoutEntry entry, ItemFlavor itemFlavor )
{
	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	//
	return (itemFlavor in entry._____INTERNAL_itemFlavorNetworkIndexMap)
}


array<ItemFlavor> function GetValidItemFlavorsForLoadoutSlot( EHI playerEHI, LoadoutEntry entry )
{
	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	Assert( fileLevel.isInitialized )
	return entry.validItemFlavorList
}


#if(DEV)
array<ItemFlavor> function DEV_GetValidItemFlavorsForLoadoutSlotForDev( EHI playerEHI, LoadoutEntry entry )
{
	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	Assert( fileLevel.isInitialized )
	return entry._____INTERNAL_DEV_validItemFlavorsForDev
}
#endif


string function DEV_DescribeLoadoutSlot( LoadoutEntry entry, int slotContentsIndex, bool doId = true )
{
	string out = ""
	if ( doId )
	{
		out += entry.id
		out += ", "
	}
	if ( slotContentsIndex == SLOT_CONTENTS_SENTINEL_NOTREADY )
	{
		out += "~~not ready"
	}
	else if ( slotContentsIndex == SLOT_CONTENTS_SENTINEL_INVALID || slotContentsIndex < 0 )
	{
		out += format( "~~invalid:%d~~", slotContentsIndex )
	}
	else if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
	{
		ItemFlavor flav = ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )
		out += DEV_DescItemFlavor( flav )
	}
	else if ( entry.type == eLoadoutEntryType.INTEGER )
	{
		out += string(entry.minInteger + (slotContentsIndex - SLOT_CONTENTS_FIRST_VALID_ITEM))
	}
	return out
}


bool function IsItemFlavorUnlockedForLoadoutSlot( EHI playerEHI, LoadoutEntry entry, ItemFlavor itemFlavor, bool shouldIgnoreGRX = false )
{
	#if CLIENT || UI 
		Assert( playerEHI == EHI_null || playerEHI == LocalClientEHI() )
	#endif

	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	if ( !ItemFlavor_IsAvailableInPlaylist( itemFlavor ) )
		return false

	if ( entry.isItemFlavorUnlocked != null && !entry.isItemFlavorUnlocked( playerEHI, itemFlavor ) )
		return false

	#if(false)


#endif
	//

	if ( playerEHI == EHI_null )
		return true

	#if(DEV)
		//
		if ( GetConVarBool( "loadouts_ignore_grx" ) )
			return true
	#endif

	if ( shouldIgnoreGRX )
	{
		return true
	}
	else
	{
		entity player = FromEHI( playerEHI )

		if ( IsLobby() && !ItemFlavor_IsActiveForEdition( itemFlavor, GRX_GetPlayerEdition( player ) ) )
			return false

		return GRX_IsItemOwnedByPlayer_AllowOutOfDateData( itemFlavor, player )
	}

	return true
}


array<ItemFlavor> function GetUnlockedItemFlavorsForLoadoutSlot( EHI playerEHI, LoadoutEntry entry )
{
	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	array<ItemFlavor> flavors = []

	foreach( ItemFlavor validItemFlavor in entry.validItemFlavorList )
	{
		if ( IsItemFlavorUnlockedForLoadoutSlot( playerEHI, entry, validItemFlavor ) )
			flavors.append( validItemFlavor )
	}

	return flavors
}


ItemFlavor function GetRandomGoodItemFlavorForLoadoutSlot( EHI playerEHI, LoadoutEntry entry, bool shouldIgnoreGRX = false )
{
	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	entry.validItemFlavorList_CopyForRandomizing.randomize()
	foreach ( ItemFlavor flav in entry.validItemFlavorList_CopyForRandomizing )
	{
		if ( IsItemFlavorUnlockedForLoadoutSlot( playerEHI, entry, flav, shouldIgnoreGRX ) )
			return flav
	}

	Assert( false, "Could not find a random unlocked item flavor for loadout slot: " + entry.id )
	unreachable
}


array<LoadoutEntry> function GetAllLoadoutSlots()
{
	return fileLevel.loadoutSlotEntries
}



//
//
//
//
//
#if(false)


//





























#endif


#if(false)




#endif


#if CLIENT || UI 
void function ShLoadouts_OnPlayerEHICreated( EHI player, bool thisCallIsHappeningBecauseTheUIVMReset = false )
{
	EHIScriptStruct ehiss = GetEHIScriptStruct( player )

	#if(false)

#endif

	#if(CLIENT)
		ehiss.netVarsLastSeenValuesMap.resize( fileLevel.networkVars.len(), SLOT_CONTENTS_SENTINEL_NOTREADY )
	#elseif(UI)
		ehiss.loadoutSlotsLastSeenContentsMap.resize( fileLevel.loadoutSlotEntries.len(), SLOT_CONTENTS_SENTINEL_NOTREADY )
	#endif

	#if(CLIENT)
		if ( thisCallIsHappeningBecauseTheUIVMReset )
		{
			foreach ( LoadoutEntry entry in fileLevel.loadoutSlotEntries )
			{
				if ( !IsLoadoutSlotCurrentlyNetworked( player, entry ) )
					continue

				int slotContentsIndex = GetLoadoutSlotContentsIndexInternal( player, entry )
				RunUIScript( "ClientToUI_RefreshLoadoutSlot", player, entry._____INTERNAL_entryIndex, slotContentsIndex )
			}
		}
	#endif
}
#endif


#if(false)


//
//
//



//
//















#endif


#if(false)











#endif


#if(CLIENT)
void function HandleLoadoutSlotNetworkVarChanged( EHI playerEHI, LoadoutEntry entry, int old, int new, bool actuallyChanged )
{
	if ( !fileLevel.isInitialized )
		return

	RefreshLoadoutSlotInternal( playerEHI, entry )
}
#endif


bool function IsValidLoadoutSlotContentsIndex( LoadoutEntry entry, int slotContentsIndex, int validationBehavior = eValidation.DONT_ASSERT )
{
	if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
		return (slotContentsIndex in entry._____INTERNAL_networkIndexItemFlavorMap)

	if ( entry.type == eLoadoutEntryType.INTEGER )
	{
		int value = entry.minInteger + (slotContentsIndex - SLOT_CONTENTS_FIRST_VALID_ITEM)
		return (value >= entry.minInteger && value <= entry.maxInteger)
	}

	Assert( validationBehavior != eValidation.ASSERT, "Invalid loadout slot contents index " + slotContentsIndex + " for " + entry.id )
	return false
}


ItemFlavor function ConvertLoadoutSlotContentsIndexToItemFlavor( LoadoutEntry entry, int slotContentsIndex )
{
	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	Assert( slotContentsIndex != SLOT_CONTENTS_SENTINEL_INVALID )
	Assert( slotContentsIndex != SLOT_CONTENTS_SENTINEL_NOTREADY )
	Assert( slotContentsIndex >= SLOT_CONTENTS_FIRST_VALID_ITEM )

	return entry._____INTERNAL_networkIndexItemFlavorMap[slotContentsIndex]
}


int function ConvertItemFlavorToLoadoutSlotContentsIndex( LoadoutEntry entry, ItemFlavor itemFlavor )
{
	Assert( entry.type == eLoadoutEntryType.ITEM_FLAVOR )

	Assert( itemFlavor in entry._____INTERNAL_itemFlavorNetworkIndexMap )
	return entry._____INTERNAL_itemFlavorNetworkIndexMap[itemFlavor]
}


int function GetLoadoutSlotContentsIndexInternal( EHI playerEHI, LoadoutEntry entry )
{
	#if(false)









#elseif CLIENT || UI 
		if ( !EHIHasValidScriptStruct( playerEHI ) )
			return SLOT_CONTENTS_SENTINEL_NOTREADY

		int slotContentsIndex

		//

		if ( entry.networkTo == eLoadoutNetworking.PLAYER_GLOBAL && playerEHI != LocalClientEHI() )
		{
			#if(CLIENT)
				slotContentsIndex = GetLoadoutSlotContentsIndexFromNetworkVar( playerEHI, entry )
			#elseif(UI)
				slotContentsIndex = GetLoadoutSlotContentsIndexFromCache( playerEHI, entry )
			#endif
		}
		else
		{
			Assert( playerEHI == LocalClientEHI(), "Tried to access a loadout slot of a different client (LoadoutEntry.networkTo on '" + entry.id + "' is not PLAYER_GLOBAL)" )
			slotContentsIndex = GetLoadoutSlotContentsIndexFromPersistence( playerEHI, entry, eValidation.DONT_ASSERT )
		}

		if ( !IsContentsIndexValidForLoadoutSlot( playerEHI, entry, slotContentsIndex ) )
		{
			return SLOT_CONTENTS_SENTINEL_NOTREADY
		}
		return slotContentsIndex
	#endif
}


#if CLIENT || UI 
int function GetLoadoutSlotContentsIndexFromPersistence( EHI playerEHI, LoadoutEntry entry, int validationBehavior = eValidation.ASSERT )
{
#if(DEV)
	if ( DEV_ShouldIgnorePersistence() )
	{
		if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
		{
			ItemFlavor defaultItemFlavor = GetDefaultItemFlavorForLoadoutSlot( playerEHI, entry )
			return ConvertItemFlavorToLoadoutSlotContentsIndex( entry, defaultItemFlavor )
		}
		else if ( entry.type == eLoadoutEntryType.INTEGER )
		{
			return SLOT_CONTENTS_FIRST_VALID_ITEM + (entry.defaultInteger - entry.minInteger)
		}
	}
#endif

	#if(CLIENT)
		entity player         = FromEHI( playerEHI )
		int slotContentsIndex = expect int(player.GetPersistentVar( "loadouts." + entry.id ))
	#elseif(UI)
		if ( !IsPersistenceAvailable() )
			return SLOT_CONTENTS_SENTINEL_NOTREADY

		Assert( playerEHI == LocalClientEHI() )
		int slotContentsIndex = expect int(GetPersistentVar( "loadouts." + entry.id ))
	#endif

	if ( slotContentsIndex == PERSISTENT_DATA_INVALID_SENTINEL )
	{
		#if(false)

#elseif CLIENT || UI 
			//
		#endif
		return SLOT_CONTENTS_SENTINEL_INVALID
	}

	if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
	{
		if ( !(slotContentsIndex in entry._____INTERNAL_itemFlavorGUIDNetworkIndexMap) )
		{
			#if(false)

#elseif CLIENT || UI 
				//
			#endif
			return SLOT_CONTENTS_SENTINEL_INVALID
		}

		return entry._____INTERNAL_itemFlavorGUIDNetworkIndexMap[slotContentsIndex]
	}
	else if ( entry.type == eLoadoutEntryType.INTEGER )
	{
		int value = entry.minInteger + (slotContentsIndex - SLOT_CONTENTS_FIRST_VALID_ITEM)
		if ( value < entry.minInteger || value > entry.maxInteger )
		{
			#if(false)

#elseif CLIENT || UI 
				//
			#endif
			return SLOT_CONTENTS_SENTINEL_INVALID
		}

		return slotContentsIndex
	}

	return SLOT_CONTENTS_SENTINEL_INVALID
}
#endif


#if(CLIENT)
int function GetLoadoutSlotContentsIndexFromNetworkVar( EHI playerEHI, LoadoutEntry entry, int validationBehavior = eValidation.ASSERT )
{
	return GetEHIScriptStruct( playerEHI ).netVarsLastSeenValuesMap[entry._____INTERNAL_nvIndex]
}
#endif


#if(UI)
int function GetLoadoutSlotContentsIndexFromCache( EHI playerEHI, LoadoutEntry entry, int validationBehavior = eValidation.ASSERT )
{
	return GetEHIScriptStruct( playerEHI ).loadoutSlotsLastSeenContentsMap[entry._____INTERNAL_entryIndex]
}
#endif


#if(false)















//
//
//



#endif


#if(false)

















//
//
//



#endif


#if CLIENT || UI 
void function RefreshLoadoutSlotInternal( EHI playerEHI, LoadoutEntry entry )
{
	#if CLIENT || UI 
		LocalClientEHI() //
	#endif

	#if(false)




//
//
//
//
//
#endif

	int slotContentsIndex = GetLoadoutSlotContentsIndexInternal( playerEHI, entry )

	#if(false)

















//
//



#elseif(CLIENT)
		entity player = FromEHI( playerEHI )
		//
		RunUIScript( "ClientToUI_RefreshLoadoutSlot", playerEHI, entry._____INTERNAL_entryIndex, slotContentsIndex )
	#endif

	if ( slotContentsIndex != SLOT_CONTENTS_SENTINEL_NOTREADY && slotContentsIndex != SLOT_CONTENTS_SENTINEL_INVALID )
	{
		#if(false)
//
//
//
#else
			//
			//
			//
		#endif
		Signal( GetEHISignalDummy( playerEHI ), "Loadout_" + entry.id + "_Ready" )
	}

	if ( slotContentsIndex == SLOT_CONTENTS_SENTINEL_NOTREADY || slotContentsIndex == SLOT_CONTENTS_SENTINEL_INVALID )
	{
		//
	}
	else if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
	{
		ItemFlavor slotContents = ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )

		if ( IsLoadoutSlotActive( playerEHI, entry ) )
		{
			CallItemFlavorLoadoutSlotDidChangeCallbacks( playerEHI, entry, slotContents )

			#if(CLIENT)//
				if ( slotContents in entry._____INTERNAL_dependentsByItemFlav )
				{
					foreach( LoadoutEntry dependentEntry in entry._____INTERNAL_dependentsByItemFlav[slotContents] )
					{
						if ( IsLoadoutSlotActive( playerEHI, dependentEntry, entry ) )
							RefreshLoadoutSlotInternal( playerEHI, dependentEntry )
					}
				}
			#endif
		}
	}
	else if ( entry.type == eLoadoutEntryType.INTEGER )
	{
		int value = entry.minInteger + (slotContentsIndex - SLOT_CONTENTS_FIRST_VALID_ITEM)
		if ( IsLoadoutSlotActive( playerEHI, entry ) )
			CallIntegerLoadoutSlotDidChangeCallbacks( playerEHI, entry, value )
	}
}
#endif


#if(CLIENT)
void function ServerToClient_LoadoutSlotDidChange( EHI playerEHI, int entryIndex )
{
	Assert( playerEHI == LocalClientEHI() )

	LoadoutEntry entry = fileLevel.loadoutSlotEntries[entryIndex]

	RefreshLoadoutSlotInternal( playerEHI, entry )
}
#endif


#if(UI)
void function ClientToUI_RefreshLoadoutSlot( EHI playerEHI, int entryIndex, int slotContentsIndex )
{
	if ( !fileLevel.isInitialized )
		return //

	LoadoutEntry entry    = fileLevel.loadoutSlotEntries[entryIndex]
	EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )
	ehiss.loadoutSlotsLastSeenContentsMap[entryIndex] = slotContentsIndex

	RefreshLoadoutSlotInternal( playerEHI, entry )
}


array<ItemFlavor> function TEMP_FilterItemsForGRX( EHI playerEHI, array<ItemFlavor> items )
{
	array<ItemFlavor> filteredItems

	foreach ( itemFlavor in items )
	{
		if ( ItemFlavor_GetGRXMode( itemFlavor ) == GRX_ITEMFLAVORMODE_REGULAR )
		{
			if ( !GRX_AreOffersReady() )
				continue

			if ( !GRX_IsItemCraftable( itemFlavor ) && !GRX_IsItemOwnedByPlayer( itemFlavor ) )
			{
				//
				continue
			}
		}

		filteredItems.append( itemFlavor )
	}

	return filteredItems
}


array<ItemFlavor> function GetLoadoutItemsSortedForMenu( LoadoutEntry entry, int functionref( ItemFlavor ) sortOrdinalFunc )
{
	EHI playerEHI           = LocalClientEHI()
	array<ItemFlavor> items = GetValidItemFlavorsForLoadoutSlot( playerEHI, entry )

	if ( GetCurrentPlaylistVarBool( "filter_uncraftable_items", false ) )
		items = TEMP_FilterItemsForGRX( playerEHI, items )

	ItemFlavor equippedItem
	if ( LoadoutSlot_IsReady( playerEHI, entry ) )
		equippedItem = LoadoutSlot_GetItemFlavor( playerEHI, entry )

	items.sort( int function( ItemFlavor a, ItemFlavor b ) : ( playerEHI, equippedItem, sortOrdinalFunc ) {
		//
		//
		//
		//
		//
		//

		bool aIsEquipped = (a == equippedItem)
		bool bIsEquipped = (b == equippedItem)
		if ( aIsEquipped && !bIsEquipped )
			return -1
		else if ( bIsEquipped && !aIsEquipped )
			return 1

		int aQuality = ItemFlavor_HasQuality( a ) ? ItemFlavor_GetQuality( a ) : -1
		int bQuality = ItemFlavor_HasQuality( b ) ? ItemFlavor_GetQuality( b ) : -1
		if ( aQuality > bQuality )
			return -1
		else if ( aQuality < bQuality )
			return 1

		int itemType = ItemFlavor_GetType( a )
		if ( itemType == eItemType.gladiator_card_intro_quip || itemType == eItemType.gladiator_card_kill_quip )
			return SortStringAlphabetize( Localize( ItemFlavor_GetLongName( a ) ), Localize( ItemFlavor_GetLongName( b ) ) )

		return sortOrdinalFunc( a ) - sortOrdinalFunc( b )
	} )

	return items
}
#endif //


//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


bool function IsLoadoutSlotActive( EHI playerEHI, LoadoutEntry entry, LoadoutEntry ornull entryToNotCheck = null )
{
	#if CLIENT || UI 
		if ( playerEHI != LocalClientEHI() && entry.networkTo != eLoadoutNetworking.PLAYER_GLOBAL )
			return false
	#endif

	foreach ( LoadoutEntry dependency, table<ItemFlavor, bool> flavorSet in entry.isActiveConditions )
	{
		if ( dependency == entryToNotCheck )
			continue

		if ( !IsLoadoutSlotActive( playerEHI, dependency ) )
			return false

		if ( !LoadoutSlot_IsReady( playerEHI, dependency ) )
			return false

		ItemFlavor dependencyContents = LoadoutSlot_GetItemFlavor( playerEHI, dependency )
		if ( !(dependencyContents in flavorSet) )
			return false
	}

	return true
}


bool function IsLoadoutSlotCurrentlyNetworked( EHI playerEHI, LoadoutEntry entry, LoadoutEntry ornull entryToNotCheck = null )
{
	#if CLIENT || UI 
		if ( playerEHI != LocalClientEHI() && entry.networkTo != eLoadoutNetworking.PLAYER_GLOBAL )
			return false
	#endif

	if ( entry.networkTo == eLoadoutNetworking.SERVER_ONLY )
		return false

	return IsLoadoutSlotActive( playerEHI, entry, entryToNotCheck )
}


void function CallItemFlavorLoadoutSlotDidChangeCallbacks( EHI playerEHI, LoadoutEntry entry, ItemFlavor slotContents )
{
	foreach( ItemFlavorLoadoutSlotDidChangeFuncType callback in entry.changeCallbacks_ItemFlavor )
		callback( playerEHI, slotContents )

	EHIScriptStruct ehiss = GetEHIScriptStruct( playerEHI )
	if ( entry._____INTERNAL_entryIndex in ehiss.itemFlavorLoadoutSlotChangedCallbacksMap )
	{
		foreach( ItemFlavorLoadoutSlotDidChangeFuncType callback in ehiss.itemFlavorLoadoutSlotChangedCallbacksMap[entry._____INTERNAL_entryIndex] )
			callback( playerEHI, slotContents )
	}
}


void function CallIntegerLoadoutSlotDidChangeCallbacks( EHI playerEHI, LoadoutEntry entry, int value )
{
	foreach( IntegerLoadoutSlotDidChangeFuncType callback in entry.changeCallbacks_Integer )
		callback( playerEHI, value )
}


ItemFlavor function GetDefaultItemFlavorForLoadoutSlot( EHI playerEHI, LoadoutEntry entry )
{
	return entry.defaultItemFlavor
}


#if CLIENT || UI 
bool function IsContentsIndexValidForLoadoutSlot( EHI playerEHI, LoadoutEntry entry, int slotContentsIndex, int validationBehavior = eValidation.DONT_ASSERT )
{
	if ( slotContentsIndex == SLOT_CONTENTS_SENTINEL_INVALID )
	{
		Assert( false || validationBehavior != eValidation.ASSERT, "Tried to assign invalid value to loadout slot." )
		return false
	}
	else if ( slotContentsIndex == SLOT_CONTENTS_SENTINEL_NOTREADY )
	{
		Assert( false || validationBehavior != eValidation.ASSERT, "Tried to assign invalid value to loadout slot." )
		return false
	}
	else
	{
		if ( !IsValidLoadoutSlotContentsIndex( entry, slotContentsIndex, validationBehavior ) )
		{
			//
			return false
		}

		if ( entry.type == eLoadoutEntryType.ITEM_FLAVOR )
		{
			ItemFlavor itemFlavor = ConvertLoadoutSlotContentsIndexToItemFlavor( entry, slotContentsIndex )
			if ( !IsItemFlavorValidForLoadoutSlot( playerEHI, entry, itemFlavor ) )
			{
				Assert( false || validationBehavior != eValidation.ASSERT, "Tried to assign invalid item value to loadout slot." )
				return false
			}
			return true
		}
		else if ( entry.type == eLoadoutEntryType.INTEGER )
		{
			return true
		}
	}

	Assert( false || validationBehavior != eValidation.ASSERT, "Value is invalid for loadout slot." )
	return false
}
#endif


#if(false)





//

















#endif


#if(false)







































































#endif


bool function IsLoadoutSlotLocked( EHI playerEHI, LoadoutEntry entry )
{
	if ( entry.isSlotLocked == null )
		return false

	#if(DEV)
		if ( GetCurrentPlaylistVarBool( "dev_loadout_changeable_at_any_time", false ) )
			return false
	#endif

	return entry.isSlotLocked( playerEHI )
}


#if(false)


//
//
//
//










//


















//






//
//







#endif

#if(false)


//
//
//
//
//





































//

















































//






//




#endif

#if(false)





#endif

#if(false)





















#endif



